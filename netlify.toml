[build]
  command = "./scripts/build-safe.sh"
  publish = "dist"
  functions = "proxy"
  
  # Add environment variables to fix the dependency installation
  environment = { NODE_VERSION = "22", NPM_FLAGS = "--platform=linux --arch=arm64", NETLIFY = "true" }
  
  # Define pre and post install/build hooks
  [build.lifecycle]
    onPreDependencies = "./scripts/docker-entrypoint.sh && node ./scripts/netlify-arm64-verify.js"
    onPostBuild = "node ./scripts/netlify-postbuild.js"

# Environment-specific settings
[context.production]
  command = "./scripts/build-safe.sh"
  publish = "dist"
  environment = { CONTEXT = "production", URL_PREFIX = "/pages" }

# Test environment settings - use same URL_PREFIX as production for consistency
[context.test]
  command = "./scripts/build-safe.sh"
  publish = "dist"
  environment = { CONTEXT = "test", URL_PREFIX = "/pages" }

# Development settings
[dev]
  functions = "proxy"
  
# Simplified URL redirects - only keep what's essential
# In production, both /observations and /pages/observations will work
# In test, we focus on direct routes without /pages prefix

# For Production: Ensure direct routes work by redirecting to /pages/
[[redirects]]
  from = "/about"
  to = "/pages/about"
  status = 200
  force = false
  conditions = {host = ["ai-tools-lab.com"]}

[[redirects]]
  from = "/resources"
  to = "/pages/resources"
  status = 200
  force = false
  conditions = {host = ["ai-tools-lab.com"]}

[[redirects]]
  from = "/observations"
  to = "/pages/observations"
  status = 200
  force = false
  conditions = {host = ["ai-tools-lab.com"]}

# For Test: Ensure /pages routes redirect to direct routes
# This fixes the primary issue found in link verification
[[redirects]]
  from = "/pages/*"
  to = "/:splat"
  status = 301
  force = true
  conditions = {host = ["ai-tools-lab-tst.netlify.app"]}

# STANDARDIZED URL STRUCTURE: Make both environments use the same format
# All episode content is accessed using the /pages/ep01 format in both environments

# Handle legacy /episodes/ep1 format in both environments
[[redirects]]
  from = "/episodes/ep:id([0-9])"
  to = "/pages/ep0:id"
  status = 301
  force = true

[[redirects]]
  from = "/episodes/ep:id([0-9][0-9])"
  to = "/pages/ep:id"
  status = 301
  force = true
  
# Handle old episode URL format in production
[[redirects]]
  from = "/pages/episodes/ep:id([0-9])"
  to = "/pages/ep0:id"
  status = 301
  force = true

[[redirects]]
  from = "/pages/episodes/ep:id([0-9][0-9])"
  to = "/pages/ep:id"
  status = 301
  force = true
  
# Ensure direct access to episode pages works
[[redirects]]
  from = "/pages/ep:id([0-9][0-9])"
  to = "/pages/ep:id/index.html"
  status = 200
  force = false

# For Test: Make sure direct routes work properly
[[redirects]]
  from = "/resources"
  to = "/resources/index.html"
  status = 200
  force = false
  conditions = {host = ["ai-tools-lab-tst.netlify.app"]}

[[redirects]]
  from = "/observations"
  to = "/observations/index.html"
  status = 200
  force = false
  conditions = {host = ["ai-tools-lab-tst.netlify.app"]}

[[redirects]]
  from = "/about"
  to = "/about/index.html"
  status = 200
  force = false
  conditions = {host = ["ai-tools-lab-tst.netlify.app"]}


# Fix the javascript:history.back() issue found in production
[[redirects]]
  from = "/pages/javascript:*"
  to = "/pages/"
  status = 301
  force = true
  conditions = {host = ["ai-tools-lab.com"]}

# Datadog API proxy
[[redirects]]
  from = "/api/datadog/*"
  to = "/.netlify/functions/datadog-proxy"
  status = 200
  force = true
  
# Custom 404 page
[[redirects]]
  from = "/*"
  to = "/404.html"
  status = 404