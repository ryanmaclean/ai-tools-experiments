---
// src/pages/resources.astro
import MainLayout from '../layouts/MainLayout.astro';
import ResourcesContent from '../content/transcripts/resources.html?raw';

const pageTitle = "Resources";
const description = "A curated collection of resources for AI tools and experiments.";
const ogImageUrl = "/images/resource-placeholder.jpg"; // Make sure placeholder is in public/images
---

<MainLayout title={pageTitle} description={description} ogImage={ogImageUrl}>
  <!-- Render the imported HTML content -->
  <Fragment set:html={ResourcesContent} />

  <style is:global>
  /* Inline styles from resources.html lines 24-155 */
  .resource-card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border-radius: 12px;
    overflow: hidden;
    height: 100%;
    background: #ffffff; /* Added background explicitly */
    border: 1px solid #eee; /* Added subtle border */
  }

  .resource-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  .resource-card a {
    text-decoration: none; /* Ensure links aren't underlined by default */
    color: inherit;      /* Inherit text color */
    display: block;      /* Make the whole card clickable */
    height: 100%;
  }

  .resource-card-image {
    height: 180px;
    overflow: hidden;
  }

  .resource-card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .resource-card:hover .resource-card-image img {
    transform: scale(1.05);
  }

  .resource-card-content {
    padding: 20px;
    display: flex; /* Use flexbox for layout */
    flex-direction: column; /* Stack content vertically */
    height: 100%; /* Allow content to fill card height */
    box-sizing: border-box; /* Include padding in height calculation */
  }

  .resource-card-content h2 {
    font-size: 18px;
    margin-top: 0; /* Reset margin */
    margin-bottom: 10px;
    color: #333;
    line-height: 1.4;
  }

  .resource-card-content p {
    font-size: 14px;
    color: #666;
    margin-bottom: 15px;
    line-height: 1.5;
    flex-grow: 1; /* Allow description to take available space */
  }

  .resource-meta {
    display: flex;
    justify-content: space-between;
    font-size: 12px;
    color: #888;
    margin-top: auto; /* Push meta to bottom */
  }

  .resource-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 30px;
    margin: 40px 0;
  }

  .filter-container .tag-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: center; /* Center tags */
      padding-bottom: 20px; /* Add space below tags */
  }

  .filter-container .tag-filter {
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 20px;
      padding: 8px 15px;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s, border-color 0.3s;
      font-size: 0.9rem;
  }

  .filter-container .tag-filter:hover {
      background-color: #f0f0f0;
  }

  .filter-container .tag-filter.active {
      background-color: var(--primary-color);
      color: #fff;
      border-color: var(--primary-color);
  }

  /* Ensure filter container takes full width */
  .filter-container {
      background-color: #f8f9fa; /* Match suggest box */
      padding-top: 20px;
      margin-bottom: 30px; /* Add space below filter */
  }

  @media (max-width: 768px) {
    .resource-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Adjust for smaller screens */
    }
     .resource-card-image {
         height: 160px; /* Adjust from original inline style */
     }
  }
</style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // --- Resource Filtering Logic ---
      const filterButtons = document.querySelectorAll('.tag-filter');
      const resourceCards = document.querySelectorAll('.resource-card');

      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          const selectedTag = button.getAttribute('data-tag');

          // Update active button state
          filterButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');

          // Filter cards
          resourceCards.forEach(card => {
            const cardTags = card.getAttribute('data-tags')?.split(',') || [];
            if (selectedTag === 'all' || cardTags.includes(selectedTag)) {
              card.style.display = ''; // Show card
            } else {
              card.style.display = 'none'; // Hide card
            }
          });
        });
      });
  });
</script>

</MainLayout>