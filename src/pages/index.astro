---
import MainLayout from '../layouts/MainLayout.astro';
const pageTitle = "Home | AI Tools Lab"; // Or derive dynamically
const description = "Collection of AI tools experiments and resources.";

// Use import.meta.glob with ?raw to get the HTML content as a string
const htmlFiles = import.meta.glob('../content/transcripts/index.html', { query: '?raw', eager: true });
const indexHtmlContent = htmlFiles['../content/transcripts/index.html'].default; // Access the raw string
---

<MainLayout title={pageTitle} description={description}>
  {/* Featured Episode Styles (Inline) */}
  <style is:inline>
    /* Header logo font styling */
    .logo a {
        font-family: 'Revalia', cursive;
        font-size: 1.6rem;
    }
    
    #featured-episode {
        margin-bottom: 40px;
        padding: 25px;
        background: linear-gradient(145deg, #f0f7ff 0%, #e6f0ff 100%);
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 86, 210, 0.1);
    }
    
    #featured-episode h2 {
        margin-bottom: 20px;
        font-size: 1.8rem;
        color: #0066cc;
        border-bottom: 2px solid #0066cc;
        padding-bottom: 8px;
        display: inline-block;
    }
    
    .featured-episode-container {
        display: flex;
        gap: 25px;
        align-items: flex-start;
    }
    
    .featured-episode-video {
        flex: 0 0 50%;
        position: relative;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .featured-episode-video img {
        width: 100%;
        display: block;
        transition: transform 0.3s ease;
    }
    
    .featured-episode-video:hover img {
        transform: scale(1.03);
    }
    
    .play-button-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 102, 204, 0.8);
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0.9;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        z-index: 2;
    }
    
    .video-container:hover .play-button-overlay,
    .featured-episode-video:hover .play-button-overlay {
        background-color: rgba(0, 102, 204, 1);
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
    }
    
    .featured-episode-content {
        flex: 1;
    }
    
    .featured-episode-content h3 {
        color: #0066cc;
        font-size: 1.4rem;
        margin-bottom: 5px;
    }
    
    .featured-episode-content h4 {
        font-size: 1.6rem;
        margin-top: 0;
        margin-bottom: 15px;
    }
    
    .featured-episode-content p {
        font-size: 1.05rem;
        line-height: 1.6;
        margin-bottom: 20px;
    }
    
    .featured-episode-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .recording-date {
        color: #666;
        font-size: 0.9rem;
    }
    
    .featured-episode-tags {
        display: flex;
        gap: 8px;
    }
    
    .tag {
        background-color: #0066cc;
        color: white;
        padding: 4px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
    }
    
    .featured-episode-button {
        display: inline-block;
        background-color: #0066cc;
        color: white;
        padding: 10px 25px;
        border-radius: 6px;
        text-decoration: none;
        font-weight: 600;
        transition: background-color 0.2s ease;
    }
    
    .featured-episode-button:hover {
        background-color: #0055aa;
    }
    
    @media (max-width: 768px) {
        .featured-episode-container {
            flex-direction: column;
        }
        
        .featured-episode-video {
            flex: 0 0 100%;
            margin-bottom: 20px;
        }
    }
    
    /* Featured badge styling */
    .featured-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: #ff6b00;
        color: white;
        padding: 4px 10px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 600;
        z-index: 2;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }
  </style>

  {/* Render the imported raw HTML */}
  <div set:html={indexHtmlContent} />

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Add play icons to any video containers that don't have them
      addPlayIconsToVideos();

      // Make video thumbnails clickable
      makeVideoContainersClickable();

      // Add automatic sorting for episode cards on the index page
      sortEpisodesByDate();

      // Initialize any tag filters on the page
      initializeTagFilters();
    });

    // Helper function to convert month name to number (0-11)
    function getMonthNumber(monthName) {
      const months = {
        'January': 0, 'February': 1, 'March': 2, 'April': 3, 
        'May': 4, 'June': 5, 'July': 6, 'August': 7,
        'September': 8, 'October': 9, 'November': 10, 'December': 11
      };
      
      return months[monthName] || 0;
    }

    function getCardDate(card) {
      // Extract date from either recording-card or resource-card
      const dateElement = card.querySelector('.recording-date') || card.querySelector('.resource-date');
      if (!dateElement) return new Date(0); // Return epoch if no date found
      
      const dateText = dateElement.textContent.trim();
      
      // Parse the date in format "Month DD, YYYY"
      try {
        // Use Date.parse for standard format
        const parsedDate = new Date(dateText);
        
        // Check if valid date was parsed
        if (!isNaN(parsedDate.getTime())) {
          return parsedDate;
        }
        
        // Fallback to manual parsing for "Month DD, YYYY" format
        const parts = dateText.match(/(\w+)\s+(\d+),\s+(\d+)/);
        if (parts) {
          const month = getMonthNumber(parts[1]);
          const day = parseInt(parts[2], 10);
          const year = parseInt(parts[3], 10);
          return new Date(year, month, day);
        }
        
        // If we can't parse the date, return epoch
        return new Date(0);
      } catch (e) {
        console.warn('Error parsing date:', dateText, e);
        return new Date(0);
      }
    }

    // Function to sort episode cards by date (newest first)
    function sortEpisodesByDate() {
      const cardsContainer = document.querySelector('.recording-grid');
      if (!cardsContainer) return;
      
      console.log('Sorting episodes by date (newest first)');
      
      const cards = Array.from(cardsContainer.children);
      
      // Sort cards by date (newest first)
      cards.sort((a, b) => {
        const dateA = getCardDate(a);
        const dateB = getCardDate(b);
        
        return new Date(dateB) - new Date(dateA); // Newest first
      });
      
      // Remove existing cards
      cards.forEach(card => card.remove());
      
      // Append sorted cards
      cards.forEach(card => cardsContainer.appendChild(card));
      
      console.log('Episodes sorted successfully');
    }

    // Make video containers clickable (thumbnail area)
    function makeVideoContainersClickable() {
      const videoContainers = document.querySelectorAll('.video-container');
      
      videoContainers.forEach(container => {
        const link = container.querySelector('a');
        
        if (link) {
          const linkHref = link.getAttribute('href');
          const linkTarget = link.getAttribute('target');
          
          // Make the entire container clickable
          container.addEventListener('click', function(e) {
            // Only handle clicks directly on the container or the image, not on the link itself
            if (e.target === container || e.target.tagName === 'IMG') {
              e.preventDefault();
              // Open the link in the same way the anchor would
              if (linkTarget === '_blank') {
                window.open(linkHref, '_blank');
              } else {
                window.location.href = linkHref;
              }
            }
          });
          
          // Add aria attributes for accessibility
          container.setAttribute('role', 'button');
          container.setAttribute('aria-label', 'Watch video');
          container.style.cursor = 'pointer';
        }
      });
    }

    // Add play icons to video containers
    function addPlayIconsToVideos() {
      const videoContainers = document.querySelectorAll('.video-container');
      
      videoContainers.forEach(container => {
        const link = container.querySelector('a');
        
        if (link) {
          // Check if there is already a play button overlay
          let playButtonOverlay = link.querySelector('.play-button-overlay');
          
          // If not, create and add it
          if (!playButtonOverlay) {
            playButtonOverlay = document.createElement('div');
            playButtonOverlay.className = 'play-button-overlay';
            
            // Create the play icon SVG
            const playSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            playSvg.setAttribute('width', '24');
            playSvg.setAttribute('height', '24');
            playSvg.setAttribute('viewBox', '0 0 24 24');
            playSvg.setAttribute('fill', 'white');
            playSvg.style.filter = 'drop-shadow(0 1px 2px rgba(0,0,0,0.3))';
            playSvg.style.marginLeft = '2px'; // Slight adjustment for visual centering
            
            const playPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            playPath.setAttribute('d', 'M8 5v14l11-7z');
            
            playSvg.appendChild(playPath);
            playButtonOverlay.appendChild(playSvg);
            link.appendChild(playButtonOverlay);
          }
        }
      });
    }

    function shouldShowCardByTags(card, activeTags) {
      if (activeTags.length === 0 || activeTags.includes('all')) {
        return true;
      }
      
      const cardTags = card.getAttribute('data-tags') ? 
        card.getAttribute('data-tags').split(',') : [];
      
      // Check if the card has at least one of the active tags
      return activeTags.some(tag => cardTags.includes(tag));
    }

    function filterCardsByTags(activeTags) {
      // Works for both recording-card and resource-card
      const cards = document.querySelectorAll('.recording-card, .resource-card');
      const categoryFilter = document.getElementById('episode-category-filter');
      const selectedCategory = categoryFilter ? categoryFilter.value : 'all';
      
      cards.forEach(card => {
        const cardCategory = card.getAttribute('data-category');
        const categoryMatch = selectedCategory === 'all' || cardCategory === selectedCategory;
        const tagMatch = shouldShowCardByTags(card, activeTags);
        
        card.style.display = (categoryMatch && tagMatch) ? 'block' : 'none';
      });
    }

    // Initialize any tag filters on the page
    function initializeTagFilters() {
      const tagFilters = document.querySelectorAll('.tag-filter');
      const categoryFilter = document.getElementById('episode-category-filter');
      const tagButtonsContainer = document.querySelector('.tag-buttons');
      
      if (tagFilters.length === 0) return;
      
      // Add visual feedback for touch devices
      if (tagButtonsContainer) {
        // Prevent horizontal scrolling from triggering filter changes unintentionally
        tagButtonsContainer.addEventListener('scroll', function(e) {
          // Set a flag to indicate the container is scrolling
          tagButtonsContainer.setAttribute('data-scrolling', 'true');
          
          // Clear the flag after scrolling stops
          clearTimeout(tagButtonsContainer.scrollTimeout);
          tagButtonsContainer.scrollTimeout = setTimeout(function() {
            tagButtonsContainer.setAttribute('data-scrolling', 'false');
          }, 150);
        });
      }
      
      // Handle category filtering
      if (categoryFilter) {
        categoryFilter.addEventListener('change', function() {
          const selectedCategory = this.value;
          const cards = document.querySelectorAll('.recording-card, .resource-card');
          
          cards.forEach(card => {
            const cardCategory = card.getAttribute('data-category');
            
            if (selectedCategory === 'all' || cardCategory === selectedCategory) {
              // Only show if it also passes the tag filters
              const activeFilters = Array.from(document.querySelectorAll('.tag-filter.active'))
                .map(el => el.getAttribute('data-tag'));
              
              if (shouldShowCardByTags(card, activeFilters)) {
                card.style.display = 'block';
              }
            } else {
              card.style.display = 'none';
            }
          });
        });
      }
      
      // Handle tag filtering
      tagFilters.forEach(filter => {
        filter.addEventListener('click', function(e) {
          // Don't activate the filter if the container is still scrolling (prevents accidental activations)
          if (tagButtonsContainer && tagButtonsContainer.getAttribute('data-scrolling') === 'true') {
            return;
          }
          
          const tag = this.getAttribute('data-tag');
          
          // Add tactile feedback for mobile
          this.style.transform = 'scale(0.95)';
          setTimeout(() => {
            this.style.transform = '';
          }, 150);
          
          // Make this the only active tag of its group
          const otherTagsInGroup = Array.from(
            this.closest('.tag-buttons').querySelectorAll('.tag-filter')
          ).filter(t => t !== this);
          
          otherTagsInGroup.forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          
          // Get all currently active filters
          const activeFilters = Array.from(document.querySelectorAll('.tag-filter.active'))
            .map(el => el.getAttribute('data-tag'));
          
          // Filter the cards
          filterCardsByTags(activeFilters);
        });
      });
    }

  </script>
</MainLayout>
