---
// src/pages/[slug].astro - Moved from src/pages/transcripts/
import MainLayout from '../layouts/MainLayout.astro';

// Required for dynamic routes
export async function getStaticPaths() {
  try {
    // Use Astro.glob to import raw HTML content at build time
    // Path updated from ../content/ to ./content/ due to file relocation
    const transcriptModules = await Astro.glob('../content/transcripts/*.html', { query: 'raw' });

    const paths = Object.entries(transcriptModules).map(([filePath, rawHtmlContent]) => {
      // Extract slug from filename (e.g., '../content/transcripts/ep01.html' -> 'ep01')
      // Don't prepend 'pages/' as it causes routing issues
      const slug = filePath.split('/').pop().replace('.html', '');
      return {
        params: { slug },
        props: { rawHtmlContent } // Pass the raw HTML string directly
      };
    });
    // Debug: Log the generated paths
    console.log('[getStaticPaths] Generated paths:', JSON.stringify(paths, null, 2));
    return paths;
  } catch (error) {
    console.error('[getStaticPaths] Error generating paths:', error);
    // Return an empty array or re-throw, depending on desired behavior on error
    return []; 
  }
}

// Get the raw HTML content passed via props
const { slug } = Astro.params;
const { rawHtmlContent } = Astro.props;

let title = slug; // Default title
let bodyContent = ''; // Variable for extracted body content

// Check if rawHtmlContent is a string or an object with default property
const htmlString = typeof rawHtmlContent === 'string' ? rawHtmlContent : 
                   (rawHtmlContent && typeof rawHtmlContent === 'object' && rawHtmlContent.default) ? 
                   rawHtmlContent.default : '';

try {
  // Handle special cases for numeric slugs (like 20, 21) that might not have proper HTML content
  if (typeof htmlString !== 'string' || htmlString === '') {
    // For numeric slugs or empty content, create a placeholder
    if (/^\d+$/.test(slug)) {
      title = `Episode ${slug}`;
      bodyContent = `<p>Content for episode ${slug} is being prepared.</p>`;
      // Skip the rest of the processing
      throw new Error('Using fallback content for numeric slug');
    } else {
      throw new Error('HTML content is not available or not a string');
    }
  }
  
  // Attempt to extract title from <title> tag if present in the HTML
  const titleMatch = htmlString.match(/<title>(.*?)<\/title>/i);
  if (titleMatch && titleMatch[1]) {
    title = titleMatch[1].trim();
  }

  // Attempt to extract content between <body> tags
  const bodyMatch = htmlString.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
  if (bodyMatch && bodyMatch[1]) {
    bodyContent = bodyMatch[1].trim();
    // Basic fix for relative paths within the injected HTML:
    // Replace ../ with / for root-relative paths assuming assets are in public/
    // Adjusted this relative path fix logic as well, assuming assets are in /public
    // This might need refinement depending on actual asset structure in HTML files
    bodyContent = bodyContent.replace(/\.\.\//g, '/'); 
  } else {
    // If body is missing, the raw content might be the body itself
    bodyContent = htmlString;
    title = `${slug?.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) ?? 'Transcript'}`;
  }
} catch (error) {
  console.error(`Error processing transcript content for slug ${slug}:`, error);
  bodyContent = `<p style="color: red;">Error processing transcript content for ${slug}.</p>`;
  title = `Error: ${slug}`;
}

---

<MainLayout title={`${title} - Transcript`}>
  <main class="container">
    <a href="javascript:history.back()" class="back-link">‚Üê Back</a>

    <div class="episode-content">
      <h1>{title}</h1>

      <div class="transcript-body-content">
        <div set:html={bodyContent} />
      </div>
    </div>
  </main>
</MainLayout>

<style is:global>
  .container {
    max-width: 1140px;
    margin: 0 auto;
    padding: 0 15px;
  }
  .back-link {
    display: inline-block;
    margin: 1rem 0;
    color: #007bff;
    text-decoration: none;
  }
  .back-link:hover {
    text-decoration: underline;
  }
  .episode-content {
    margin-bottom: 2rem;
  }
  .video-container {
    position: relative;
    margin-bottom: 1.5rem;
  }
  .video-container img {
    max-width: 100%;
    height: auto;
    display: block;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  .episode-content h1 {
    margin-bottom: 1em;
  }
  .transcript-body-content p {
    margin-bottom: 1em;
    line-height: 1.6;
  }
  .transcript-body-content a {
    color: #007bff;
    text-decoration: none;
  }
  .transcript-body-content a:hover {
    text-decoration: underline;
  }
</style>
