---
// src/pages/index.astro - HOME PAGE
import MainLayout from '../layouts/MainLayout.astro';
import ProductionHomeContent from '../content/ai-tools-lab-homepage.html?raw';
import { YouTube } from 'astro-embed';

const pageTitle = "Home | AI Tools Lab";
const description = "Collection of AI tools experiments and resources.";
const ogImageUrl = "/images/ai-tools-lab-logo.png";

// YouTube video IDs for episodes - extracted from actual episode content
const youtubeIds = {
  'ep01': 'hESEOJRZ-wc',
  'ep04': 'l2H0HADOa5o',
  'ep06': 'OxHCfE1bFBs',
  'ep08': '-yNJmVCR-nM',
  'ep20': 'qgTu6hv6Hys'
  // Add more episode IDs as they become available
};

// Extract just the main content from the production homepage
function extractMainContent(html) {
  // Look for the main tag content - this should contain the primary content
  const mainContentMatch = html.match(/<main[^>]*>([\s\S]*?)<\/main>/i);
  
  if (mainContentMatch && mainContentMatch[1]) {
    return mainContentMatch[1].trim();
  }
  
  // Fallback to just returning everything between body tags if main tag not found
  const bodyContentMatch = html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
  if (bodyContentMatch && bodyContentMatch[1]) {
    return bodyContentMatch[1].trim();
  }
  
  // If all else fails, return the entire HTML
  return html;
}

// Add YouTube functionality to the cards without changing any layout
function modifyContentForYouTubeEmbeds(html) {
  let modifiedHtml = html;
  
  // Add custom attributes for YouTube functionality
  // Instead of using regex, use a simpler string replacement approach
  Object.entries(youtubeIds).forEach(([episodeId, youtubeId]) => {
    // Simple string replacement for episode links
    const originalLink = `<a href='/pages/${episodeId}'`;
    const newLink = `<a href='/pages/${episodeId}' class="youtube-trigger" data-youtube-id="${youtubeId}"`;
    
    // Replace all occurrences
    modifiedHtml = modifiedHtml.split(originalLink).join(newLink);
  });
  
  return modifiedHtml;
}

const extractedContent = extractMainContent(ProductionHomeContent);
const modifiedContent = modifyContentForYouTubeEmbeds(extractedContent);
---

<MainLayout title={pageTitle} description={description}>
  <!-- Style only for the YouTube functionality, no layout modifications -->
  <style>
    .video-close-button {
      position: absolute;
      top: 10px;
      right: 10px;
      z-index: 100;
      background: #f44336;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 5px 10px;
      cursor: pointer;
    }
  </style>

  <!-- Render original content with embedded YouTube triggers -->
  <Fragment set:html={modifiedContent} />
  
  <!-- Script to enable YouTube functionality -->
  <script>
    // Script to handle YouTube embed functionality
    console.log("Build mode"); /* document.addEventListener('DOMContentLoaded', () => {
      console.log('DOM loaded, initializing YouTube embed functionality');
      
      // Log all YouTube triggers found
      const allTriggers = document.querySelectorAll('.youtube-trigger');
      console.log(`Found ${allTriggers.length} YouTube triggers`);
      
      // Setup YouTube triggers
      document.querySelectorAll('.youtube-trigger').forEach(trigger => {
        const youtubeId = trigger.getAttribute('data-youtube-id');
        console.log(`Setting up trigger for link: ${trigger.getAttribute('href')}, YouTube ID: ${youtubeId}`);
        
        if (!youtubeId) {
          console.warn('Missing YouTube ID, skipping');
          return;
        }
        
        // Find the video container within this card
        let container = null;
        
        // Check if this is inside a recording card
        const recordingCard = trigger.closest('.recording-card');
        if (recordingCard) {
          container = recordingCard.querySelector('.video-container');
          console.log('Found container in recording card');
        }
        
        // Check if this is inside the featured episode
        const featuredVideo = trigger.closest('.featured-episode-video');
        if (featuredVideo) {
          container = featuredVideo;
          console.log('Found container in featured episode');
        }
        
        if (!container) {
          console.warn('No suitable container found for this trigger');
          return;
        }
        
        console.log('Container found, setting up click handler');
        
        
        // Store original content for restoration
        const originalContent = container.innerHTML;
        container.setAttribute('data-original-content', originalContent);
        
        // Add click event to play video
        trigger.addEventListener('click', (e) => {
          e.preventDefault();
          
          // Don't create duplicate iframes
          if (container.querySelector('iframe')) return;
          
          // Create YouTube iframe
          const iframe = document.createElement('iframe');
          iframe.width = '100%';
          iframe.height = '100%';
          iframe.src = `https://www.youtube-nocookie.com/embed/${youtubeId}?autoplay=1&playsinline=1`;
          iframe.title = 'YouTube video player';
          iframe.frameBorder = '0';
          iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
          iframe.allowFullscreen = true;
          iframe.style.position = 'absolute';
          iframe.style.top = '0';
          iframe.style.left = '0';
          iframe.style.width = '100%';
          iframe.style.height = '100%';
          iframe.style.border = 'none';
          
          // Store the original styles
          const originalStyles = {
            position: container.style.position,
            paddingBottom: container.style.paddingBottom,
            height: container.style.height
          };
          
          // Clear container and set proper positioning
          container.innerHTML = '';
          container.style.position = 'relative';
          
          // Apply specific styling based on container type
          if (container.classList.contains('video-container')) {
            // For regular card video containers
            container.style.paddingBottom = '56.25%';
          } else {
            // For featured episode
            container.style.height = '100%';
          }
          
          // Add iframe
          container.appendChild(iframe);
          
          // Add close button
          const closeButton = document.createElement('button');
          closeButton.textContent = 'Close Video';
          closeButton.className = 'video-close-button';
          container.appendChild(closeButton);
          
          // Handle close button click
          closeButton.addEventListener('click', (evt) => {
            evt.preventDefault();
            evt.stopPropagation();
            
            // Restore original content
            container.innerHTML = originalContent;
            
            // Restore original styles
            container.style.position = originalStyles.position;
            container.style.paddingBottom = originalStyles.paddingBottom;
            container.style.height = originalStyles.height;
          });
        });
      });
    });
  </script>
</MainLayout>
