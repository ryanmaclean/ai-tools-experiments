import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { ObservabilityPipeline } from "../models/ObservabilityPipeline";
import { ObservabilityPipelineCreateRequest } from "../models/ObservabilityPipelineCreateRequest";
export declare class ObservabilityPipelinesApiRequestFactory extends BaseAPIRequestFactory {
    createPipeline(body: ObservabilityPipelineCreateRequest, _options?: Configuration): Promise<RequestContext>;
    deletePipeline(pipelineId: string, _options?: Configuration): Promise<RequestContext>;
    getPipeline(pipelineId: string, _options?: Configuration): Promise<RequestContext>;
    updatePipeline(pipelineId: string, body: ObservabilityPipeline, _options?: Configuration): Promise<RequestContext>;
}
export declare class ObservabilityPipelinesApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createPipeline
     * @throws ApiException if the response code was not in [200, 299]
     */
    createPipeline(response: ResponseContext): Promise<ObservabilityPipeline>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deletePipeline
     * @throws ApiException if the response code was not in [200, 299]
     */
    deletePipeline(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getPipeline
     * @throws ApiException if the response code was not in [200, 299]
     */
    getPipeline(response: ResponseContext): Promise<ObservabilityPipeline>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updatePipeline
     * @throws ApiException if the response code was not in [200, 299]
     */
    updatePipeline(response: ResponseContext): Promise<ObservabilityPipeline>;
}
export interface ObservabilityPipelinesApiCreatePipelineRequest {
    /**
     * @type ObservabilityPipelineCreateRequest
     */
    body: ObservabilityPipelineCreateRequest;
}
export interface ObservabilityPipelinesApiDeletePipelineRequest {
    /**
     * The ID of the pipeline to delete.
     * @type string
     */
    pipelineId: string;
}
export interface ObservabilityPipelinesApiGetPipelineRequest {
    /**
     * The ID of the pipeline to retrieve.
     * @type string
     */
    pipelineId: string;
}
export interface ObservabilityPipelinesApiUpdatePipelineRequest {
    /**
     * The ID of the pipeline to update.
     * @type string
     */
    pipelineId: string;
    /**
     * @type ObservabilityPipeline
     */
    body: ObservabilityPipeline;
}
export declare class ObservabilityPipelinesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ObservabilityPipelinesApiRequestFactory, responseProcessor?: ObservabilityPipelinesApiResponseProcessor);
    /**
     * Create a new pipeline.
     * @param param The request object
     */
    createPipeline(param: ObservabilityPipelinesApiCreatePipelineRequest, options?: Configuration): Promise<ObservabilityPipeline>;
    /**
     * Delete a pipeline.
     * @param param The request object
     */
    deletePipeline(param: ObservabilityPipelinesApiDeletePipelineRequest, options?: Configuration): Promise<void>;
    /**
     * Get a specific pipeline by its ID.
     * @param param The request object
     */
    getPipeline(param: ObservabilityPipelinesApiGetPipelineRequest, options?: Configuration): Promise<ObservabilityPipeline>;
    /**
     * Update a pipeline.
     * @param param The request object
     */
    updatePipeline(param: ObservabilityPipelinesApiUpdatePipelineRequest, options?: Configuration): Promise<ObservabilityPipeline>;
}
