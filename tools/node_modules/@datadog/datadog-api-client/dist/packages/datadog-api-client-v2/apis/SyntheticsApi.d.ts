import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { OnDemandConcurrencyCapAttributes } from "../models/OnDemandConcurrencyCapAttributes";
import { OnDemandConcurrencyCapResponse } from "../models/OnDemandConcurrencyCapResponse";
export declare class SyntheticsApiRequestFactory extends BaseAPIRequestFactory {
    getOnDemandConcurrencyCap(_options?: Configuration): Promise<RequestContext>;
    setOnDemandConcurrencyCap(body: OnDemandConcurrencyCapAttributes, _options?: Configuration): Promise<RequestContext>;
}
export declare class SyntheticsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getOnDemandConcurrencyCap
     * @throws ApiException if the response code was not in [200, 299]
     */
    getOnDemandConcurrencyCap(response: ResponseContext): Promise<OnDemandConcurrencyCapResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to setOnDemandConcurrencyCap
     * @throws ApiException if the response code was not in [200, 299]
     */
    setOnDemandConcurrencyCap(response: ResponseContext): Promise<OnDemandConcurrencyCapResponse>;
}
export interface SyntheticsApiSetOnDemandConcurrencyCapRequest {
    /**
     * .
     * @type OnDemandConcurrencyCapAttributes
     */
    body: OnDemandConcurrencyCapAttributes;
}
export declare class SyntheticsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: SyntheticsApiRequestFactory, responseProcessor?: SyntheticsApiResponseProcessor);
    /**
     * Get the on-demand concurrency cap.
     * @param param The request object
     */
    getOnDemandConcurrencyCap(options?: Configuration): Promise<OnDemandConcurrencyCapResponse>;
    /**
     * Save new value for on-demand concurrency cap.
     * @param param The request object
     */
    setOnDemandConcurrencyCap(param: SyntheticsApiSetOnDemandConcurrencyCapRequest, options?: Configuration): Promise<OnDemandConcurrencyCapResponse>;
}
