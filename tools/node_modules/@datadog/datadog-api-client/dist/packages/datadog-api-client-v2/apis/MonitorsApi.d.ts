import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { MonitorConfigPolicyCreateRequest } from "../models/MonitorConfigPolicyCreateRequest";
import { MonitorConfigPolicyEditRequest } from "../models/MonitorConfigPolicyEditRequest";
import { MonitorConfigPolicyListResponse } from "../models/MonitorConfigPolicyListResponse";
import { MonitorConfigPolicyResponse } from "../models/MonitorConfigPolicyResponse";
export declare class MonitorsApiRequestFactory extends BaseAPIRequestFactory {
    createMonitorConfigPolicy(body: MonitorConfigPolicyCreateRequest, _options?: Configuration): Promise<RequestContext>;
    deleteMonitorConfigPolicy(policyId: string, _options?: Configuration): Promise<RequestContext>;
    getMonitorConfigPolicy(policyId: string, _options?: Configuration): Promise<RequestContext>;
    listMonitorConfigPolicies(_options?: Configuration): Promise<RequestContext>;
    updateMonitorConfigPolicy(policyId: string, body: MonitorConfigPolicyEditRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class MonitorsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createMonitorConfigPolicy
     * @throws ApiException if the response code was not in [200, 299]
     */
    createMonitorConfigPolicy(response: ResponseContext): Promise<MonitorConfigPolicyResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteMonitorConfigPolicy
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteMonitorConfigPolicy(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getMonitorConfigPolicy
     * @throws ApiException if the response code was not in [200, 299]
     */
    getMonitorConfigPolicy(response: ResponseContext): Promise<MonitorConfigPolicyResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to listMonitorConfigPolicies
     * @throws ApiException if the response code was not in [200, 299]
     */
    listMonitorConfigPolicies(response: ResponseContext): Promise<MonitorConfigPolicyListResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateMonitorConfigPolicy
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateMonitorConfigPolicy(response: ResponseContext): Promise<MonitorConfigPolicyResponse>;
}
export interface MonitorsApiCreateMonitorConfigPolicyRequest {
    /**
     * Create a monitor configuration policy request body.
     * @type MonitorConfigPolicyCreateRequest
     */
    body: MonitorConfigPolicyCreateRequest;
}
export interface MonitorsApiDeleteMonitorConfigPolicyRequest {
    /**
     * ID of the monitor configuration policy.
     * @type string
     */
    policyId: string;
}
export interface MonitorsApiGetMonitorConfigPolicyRequest {
    /**
     * ID of the monitor configuration policy.
     * @type string
     */
    policyId: string;
}
export interface MonitorsApiUpdateMonitorConfigPolicyRequest {
    /**
     * ID of the monitor configuration policy.
     * @type string
     */
    policyId: string;
    /**
     * Description of the update.
     * @type MonitorConfigPolicyEditRequest
     */
    body: MonitorConfigPolicyEditRequest;
}
export declare class MonitorsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MonitorsApiRequestFactory, responseProcessor?: MonitorsApiResponseProcessor);
    /**
     * Create a monitor configuration policy.
     * @param param The request object
     */
    createMonitorConfigPolicy(param: MonitorsApiCreateMonitorConfigPolicyRequest, options?: Configuration): Promise<MonitorConfigPolicyResponse>;
    /**
     * Delete a monitor configuration policy.
     * @param param The request object
     */
    deleteMonitorConfigPolicy(param: MonitorsApiDeleteMonitorConfigPolicyRequest, options?: Configuration): Promise<void>;
    /**
     * Get a monitor configuration policy by `policy_id`.
     * @param param The request object
     */
    getMonitorConfigPolicy(param: MonitorsApiGetMonitorConfigPolicyRequest, options?: Configuration): Promise<MonitorConfigPolicyResponse>;
    /**
     * Get all monitor configuration policies.
     * @param param The request object
     */
    listMonitorConfigPolicies(options?: Configuration): Promise<MonitorConfigPolicyListResponse>;
    /**
     * Edit a monitor configuration policy.
     * @param param The request object
     */
    updateMonitorConfigPolicy(param: MonitorsApiUpdateMonitorConfigPolicyRequest, options?: Configuration): Promise<MonitorConfigPolicyResponse>;
}
