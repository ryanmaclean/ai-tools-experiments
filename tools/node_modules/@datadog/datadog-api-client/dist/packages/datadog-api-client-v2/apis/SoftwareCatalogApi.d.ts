import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { EntityData } from "../models/EntityData";
import { IncludeType } from "../models/IncludeType";
import { ListEntityCatalogResponse } from "../models/ListEntityCatalogResponse";
import { RelationType } from "../models/RelationType";
import { UpsertCatalogEntityRequest } from "../models/UpsertCatalogEntityRequest";
import { UpsertCatalogEntityResponse } from "../models/UpsertCatalogEntityResponse";
export declare class SoftwareCatalogApiRequestFactory extends BaseAPIRequestFactory {
    deleteCatalogEntity(entityId: string, _options?: Configuration): Promise<RequestContext>;
    listCatalogEntity(pageOffset?: number, pageLimit?: number, filterId?: string, filterRef?: string, filterName?: string, filterKind?: string, filterOwner?: string, filterRelationType?: RelationType, filterExcludeSnapshot?: string, include?: IncludeType, _options?: Configuration): Promise<RequestContext>;
    upsertCatalogEntity(body: UpsertCatalogEntityRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class SoftwareCatalogApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCatalogEntity
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCatalogEntity(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to listCatalogEntity
     * @throws ApiException if the response code was not in [200, 299]
     */
    listCatalogEntity(response: ResponseContext): Promise<ListEntityCatalogResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to upsertCatalogEntity
     * @throws ApiException if the response code was not in [200, 299]
     */
    upsertCatalogEntity(response: ResponseContext): Promise<UpsertCatalogEntityResponse>;
}
export interface SoftwareCatalogApiDeleteCatalogEntityRequest {
    /**
     * UUID or Entity Ref.
     * @type string
     */
    entityId: string;
}
export interface SoftwareCatalogApiListCatalogEntityRequest {
    /**
     * Specific offset to use as the beginning of the returned page.
     * @type number
     */
    pageOffset?: number;
    /**
     * Maximum number of entities in the response.
     * @type number
     */
    pageLimit?: number;
    /**
     * Filter entities by UUID.
     * @type string
     */
    filterId?: string;
    /**
     * Filter entities by reference
     * @type string
     */
    filterRef?: string;
    /**
     * Filter entities by name.
     * @type string
     */
    filterName?: string;
    /**
     * Filter entities by kind.
     * @type string
     */
    filterKind?: string;
    /**
     * Filter entities by owner.
     * @type string
     */
    filterOwner?: string;
    /**
     * Filter entities by relation type.
     * @type RelationType
     */
    filterRelationType?: RelationType;
    /**
     * Filter entities by excluding snapshotted entities.
     * @type string
     */
    filterExcludeSnapshot?: string;
    /**
     * Include relationship data.
     * @type IncludeType
     */
    include?: IncludeType;
}
export interface SoftwareCatalogApiUpsertCatalogEntityRequest {
    /**
     * Entity YAML or JSON.
     * @type UpsertCatalogEntityRequest
     */
    body: UpsertCatalogEntityRequest;
}
export declare class SoftwareCatalogApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: SoftwareCatalogApiRequestFactory, responseProcessor?: SoftwareCatalogApiResponseProcessor);
    /**
     * Delete a single entity in Software Catalog.
     * @param param The request object
     */
    deleteCatalogEntity(param: SoftwareCatalogApiDeleteCatalogEntityRequest, options?: Configuration): Promise<void>;
    /**
     * Get a list of entities from Software Catalog.
     * @param param The request object
     */
    listCatalogEntity(param?: SoftwareCatalogApiListCatalogEntityRequest, options?: Configuration): Promise<ListEntityCatalogResponse>;
    /**
     * Provide a paginated version of listCatalogEntity returning a generator with all the items.
     */
    listCatalogEntityWithPagination(param?: SoftwareCatalogApiListCatalogEntityRequest, options?: Configuration): AsyncGenerator<EntityData>;
    /**
     * Create or update entities in Software Catalog.
     * @param param The request object
     */
    upsertCatalogEntity(param: SoftwareCatalogApiUpsertCatalogEntityRequest, options?: Configuration): Promise<UpsertCatalogEntityResponse>;
}
