import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { DORADeploymentRequest } from "../models/DORADeploymentRequest";
import { DORADeploymentResponse } from "../models/DORADeploymentResponse";
import { DORAIncidentRequest } from "../models/DORAIncidentRequest";
import { DORAIncidentResponse } from "../models/DORAIncidentResponse";
export declare class DORAMetricsApiRequestFactory extends BaseAPIRequestFactory {
    createDORADeployment(body: DORADeploymentRequest, _options?: Configuration): Promise<RequestContext>;
    createDORAIncident(body: DORAIncidentRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class DORAMetricsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createDORADeployment
     * @throws ApiException if the response code was not in [200, 299]
     */
    createDORADeployment(response: ResponseContext): Promise<DORADeploymentResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createDORAIncident
     * @throws ApiException if the response code was not in [200, 299]
     */
    createDORAIncident(response: ResponseContext): Promise<DORAIncidentResponse>;
}
export interface DORAMetricsApiCreateDORADeploymentRequest {
    /**
     * @type DORADeploymentRequest
     */
    body: DORADeploymentRequest;
}
export interface DORAMetricsApiCreateDORAIncidentRequest {
    /**
     * @type DORAIncidentRequest
     */
    body: DORAIncidentRequest;
}
export declare class DORAMetricsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DORAMetricsApiRequestFactory, responseProcessor?: DORAMetricsApiResponseProcessor);
    /**
     * Use this API endpoint to provide data about deployments for DORA metrics.
     *
     * This is necessary for:
     * - Deployment Frequency
     * - Change Lead Time
     * - Change Failure Rate
     * @param param The request object
     */
    createDORADeployment(param: DORAMetricsApiCreateDORADeploymentRequest, options?: Configuration): Promise<DORADeploymentResponse>;
    /**
     * Use this API endpoint to provide data about incidents for DORA metrics.
     *
     * This is necessary for:
     * - Change Failure Rate
     * - Time to Restore
     * @param param The request object
     */
    createDORAIncident(param: DORAMetricsApiCreateDORAIncidentRequest, options?: Configuration): Promise<DORAIncidentResponse>;
}
