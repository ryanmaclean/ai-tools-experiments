import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext, HttpFile } from "../../datadog-api-client-common/http/http";
import { CloudWorkloadSecurityAgentRuleCreateRequest } from "../models/CloudWorkloadSecurityAgentRuleCreateRequest";
import { CloudWorkloadSecurityAgentRuleResponse } from "../models/CloudWorkloadSecurityAgentRuleResponse";
import { CloudWorkloadSecurityAgentRulesListResponse } from "../models/CloudWorkloadSecurityAgentRulesListResponse";
import { CloudWorkloadSecurityAgentRuleUpdateRequest } from "../models/CloudWorkloadSecurityAgentRuleUpdateRequest";
export declare class CSMThreatsApiRequestFactory extends BaseAPIRequestFactory {
    createCloudWorkloadSecurityAgentRule(body: CloudWorkloadSecurityAgentRuleCreateRequest, _options?: Configuration): Promise<RequestContext>;
    createCSMThreatsAgentRule(body: CloudWorkloadSecurityAgentRuleCreateRequest, _options?: Configuration): Promise<RequestContext>;
    deleteCloudWorkloadSecurityAgentRule(agentRuleId: string, _options?: Configuration): Promise<RequestContext>;
    deleteCSMThreatsAgentRule(agentRuleId: string, _options?: Configuration): Promise<RequestContext>;
    downloadCloudWorkloadPolicyFile(_options?: Configuration): Promise<RequestContext>;
    downloadCSMThreatsPolicy(_options?: Configuration): Promise<RequestContext>;
    getCloudWorkloadSecurityAgentRule(agentRuleId: string, _options?: Configuration): Promise<RequestContext>;
    getCSMThreatsAgentRule(agentRuleId: string, _options?: Configuration): Promise<RequestContext>;
    listCloudWorkloadSecurityAgentRules(_options?: Configuration): Promise<RequestContext>;
    listCSMThreatsAgentRules(_options?: Configuration): Promise<RequestContext>;
    updateCloudWorkloadSecurityAgentRule(agentRuleId: string, body: CloudWorkloadSecurityAgentRuleUpdateRequest, _options?: Configuration): Promise<RequestContext>;
    updateCSMThreatsAgentRule(agentRuleId: string, body: CloudWorkloadSecurityAgentRuleUpdateRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class CSMThreatsApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createCloudWorkloadSecurityAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    createCloudWorkloadSecurityAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createCSMThreatsAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    createCSMThreatsAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCloudWorkloadSecurityAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCloudWorkloadSecurityAgentRule(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteCSMThreatsAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteCSMThreatsAgentRule(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to downloadCloudWorkloadPolicyFile
     * @throws ApiException if the response code was not in [200, 299]
     */
    downloadCloudWorkloadPolicyFile(response: ResponseContext): Promise<HttpFile>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to downloadCSMThreatsPolicy
     * @throws ApiException if the response code was not in [200, 299]
     */
    downloadCSMThreatsPolicy(response: ResponseContext): Promise<HttpFile>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCloudWorkloadSecurityAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCloudWorkloadSecurityAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getCSMThreatsAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    getCSMThreatsAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to listCloudWorkloadSecurityAgentRules
     * @throws ApiException if the response code was not in [200, 299]
     */
    listCloudWorkloadSecurityAgentRules(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRulesListResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to listCSMThreatsAgentRules
     * @throws ApiException if the response code was not in [200, 299]
     */
    listCSMThreatsAgentRules(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRulesListResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCloudWorkloadSecurityAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCloudWorkloadSecurityAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateCSMThreatsAgentRule
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateCSMThreatsAgentRule(response: ResponseContext): Promise<CloudWorkloadSecurityAgentRuleResponse>;
}
export interface CSMThreatsApiCreateCloudWorkloadSecurityAgentRuleRequest {
    /**
     * The definition of the new Agent rule.
     * @type CloudWorkloadSecurityAgentRuleCreateRequest
     */
    body: CloudWorkloadSecurityAgentRuleCreateRequest;
}
export interface CSMThreatsApiCreateCSMThreatsAgentRuleRequest {
    /**
     * The definition of the new Agent rule.
     * @type CloudWorkloadSecurityAgentRuleCreateRequest
     */
    body: CloudWorkloadSecurityAgentRuleCreateRequest;
}
export interface CSMThreatsApiDeleteCloudWorkloadSecurityAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
}
export interface CSMThreatsApiDeleteCSMThreatsAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
}
export interface CSMThreatsApiGetCloudWorkloadSecurityAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
}
export interface CSMThreatsApiGetCSMThreatsAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
}
export interface CSMThreatsApiUpdateCloudWorkloadSecurityAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
    /**
     * New definition of the Agent rule.
     * @type CloudWorkloadSecurityAgentRuleUpdateRequest
     */
    body: CloudWorkloadSecurityAgentRuleUpdateRequest;
}
export interface CSMThreatsApiUpdateCSMThreatsAgentRuleRequest {
    /**
     * The ID of the Agent rule.
     * @type string
     */
    agentRuleId: string;
    /**
     * New definition of the Agent rule.
     * @type CloudWorkloadSecurityAgentRuleUpdateRequest
     */
    body: CloudWorkloadSecurityAgentRuleUpdateRequest;
}
export declare class CSMThreatsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CSMThreatsApiRequestFactory, responseProcessor?: CSMThreatsApiResponseProcessor);
    /**
     * Create a new Agent rule with the given parameters.
     * @param param The request object
     */
    createCloudWorkloadSecurityAgentRule(param: CSMThreatsApiCreateCloudWorkloadSecurityAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Create a new Cloud Security Management Threats Agent rule with the given parameters.
     * @param param The request object
     */
    createCSMThreatsAgentRule(param: CSMThreatsApiCreateCSMThreatsAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Delete a specific Agent rule.
     * @param param The request object
     */
    deleteCloudWorkloadSecurityAgentRule(param: CSMThreatsApiDeleteCloudWorkloadSecurityAgentRuleRequest, options?: Configuration): Promise<void>;
    /**
     * Delete a specific Cloud Security Management Threats Agent rule.
     * @param param The request object
     */
    deleteCSMThreatsAgentRule(param: CSMThreatsApiDeleteCSMThreatsAgentRuleRequest, options?: Configuration): Promise<void>;
    /**
     * The download endpoint generates a Cloud Workload Security policy file from your currently active
     * Cloud Workload Security rules, and downloads them as a .policy file. This file can then be deployed to
     * your Agents to update the policy running in your environment.
     * @param param The request object
     */
    downloadCloudWorkloadPolicyFile(options?: Configuration): Promise<HttpFile>;
    /**
     * The download endpoint generates a CSM Threats policy file from your currently active
     * CSM Threats rules, and downloads them as a `.policy` file. This file can then be deployed to
     * your Agents to update the policy running in your environment.
     * @param param The request object
     */
    downloadCSMThreatsPolicy(options?: Configuration): Promise<HttpFile>;
    /**
     * Get the details of a specific Agent rule.
     * @param param The request object
     */
    getCloudWorkloadSecurityAgentRule(param: CSMThreatsApiGetCloudWorkloadSecurityAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Get the details of a specific Cloud Security Management Threats Agent rule.
     * @param param The request object
     */
    getCSMThreatsAgentRule(param: CSMThreatsApiGetCSMThreatsAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Get the list of Agent rules.
     * @param param The request object
     */
    listCloudWorkloadSecurityAgentRules(options?: Configuration): Promise<CloudWorkloadSecurityAgentRulesListResponse>;
    /**
     * Get the list of Cloud Security Management Threats Agent rules.
     * @param param The request object
     */
    listCSMThreatsAgentRules(options?: Configuration): Promise<CloudWorkloadSecurityAgentRulesListResponse>;
    /**
     * Update a specific Agent rule.
     * Returns the Agent rule object when the request is successful.
     * @param param The request object
     */
    updateCloudWorkloadSecurityAgentRule(param: CSMThreatsApiUpdateCloudWorkloadSecurityAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
    /**
     * Update a specific Cloud Security Management Threats Agent rule.
     * Returns the Agent rule object when the request is successful.
     * @param param The request object
     */
    updateCSMThreatsAgentRule(param: CSMThreatsApiUpdateCSMThreatsAgentRuleRequest, options?: Configuration): Promise<CloudWorkloadSecurityAgentRuleResponse>;
}
