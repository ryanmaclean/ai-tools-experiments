import { BaseAPIRequestFactory } from "../../datadog-api-client-common/baseapi";
import { Configuration } from "../../datadog-api-client-common/configuration";
import { RequestContext, ResponseContext } from "../../datadog-api-client-common/http/http";
import { Schedule } from "../models/Schedule";
import { ScheduleCreateRequest } from "../models/ScheduleCreateRequest";
import { ScheduleUpdateRequest } from "../models/ScheduleUpdateRequest";
export declare class OnCallApiRequestFactory extends BaseAPIRequestFactory {
    createOnCallSchedule(body: ScheduleCreateRequest, include?: string, _options?: Configuration): Promise<RequestContext>;
    deleteOnCallSchedule(scheduleId: string, _options?: Configuration): Promise<RequestContext>;
    getOnCallSchedule(scheduleId: string, include?: string, _options?: Configuration): Promise<RequestContext>;
    updateOnCallSchedule(scheduleId: string, body: ScheduleUpdateRequest, include?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class OnCallApiResponseProcessor {
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to createOnCallSchedule
     * @throws ApiException if the response code was not in [200, 299]
     */
    createOnCallSchedule(response: ResponseContext): Promise<Schedule>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to deleteOnCallSchedule
     * @throws ApiException if the response code was not in [200, 299]
     */
    deleteOnCallSchedule(response: ResponseContext): Promise<void>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to getOnCallSchedule
     * @throws ApiException if the response code was not in [200, 299]
     */
    getOnCallSchedule(response: ResponseContext): Promise<Schedule>;
    /**
     * Unwraps the actual response sent by the server from the response context and deserializes the response content
     * to the expected objects
     *
     * @params response Response returned by the server for a request to updateOnCallSchedule
     * @throws ApiException if the response code was not in [200, 299]
     */
    updateOnCallSchedule(response: ResponseContext): Promise<Schedule>;
}
export interface OnCallApiCreateOnCallScheduleRequest {
    /**
     * @type ScheduleCreateRequest
     */
    body: ScheduleCreateRequest;
    /**
     * Comma-separated list of included relationships to be returned. Allowed values: `teams`, `layers`, `layers.members`, `layers.members.user`.
     * @type string
     */
    include?: string;
}
export interface OnCallApiDeleteOnCallScheduleRequest {
    /**
     * The ID of the schedule
     * @type string
     */
    scheduleId: string;
}
export interface OnCallApiGetOnCallScheduleRequest {
    /**
     * The ID of the schedule
     * @type string
     */
    scheduleId: string;
    /**
     * Comma-separated list of included relationships to be returned. Allowed values: `teams`, `layers`, `layers.members`, `layers.members.user`.
     * @type string
     */
    include?: string;
}
export interface OnCallApiUpdateOnCallScheduleRequest {
    /**
     * The ID of the schedule
     * @type string
     */
    scheduleId: string;
    /**
     * @type ScheduleUpdateRequest
     */
    body: ScheduleUpdateRequest;
    /**
     * Comma-separated list of included relationships to be returned. Allowed values: `teams`, `layers`, `layers.members`, `layers.members.user`.
     * @type string
     */
    include?: string;
}
export declare class OnCallApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: OnCallApiRequestFactory, responseProcessor?: OnCallApiResponseProcessor);
    /**
     * Create a new on-call schedule
     * @param param The request object
     */
    createOnCallSchedule(param: OnCallApiCreateOnCallScheduleRequest, options?: Configuration): Promise<Schedule>;
    /**
     * Delete an on-call schedule
     * @param param The request object
     */
    deleteOnCallSchedule(param: OnCallApiDeleteOnCallScheduleRequest, options?: Configuration): Promise<void>;
    /**
     * Get an on-call schedule
     * @param param The request object
     */
    getOnCallSchedule(param: OnCallApiGetOnCallScheduleRequest, options?: Configuration): Promise<Schedule>;
    /**
     * Update a new on-call schedule
     * @param param The request object
     */
    updateOnCallSchedule(param: OnCallApiUpdateOnCallScheduleRequest, options?: Configuration): Promise<Schedule>;
}
