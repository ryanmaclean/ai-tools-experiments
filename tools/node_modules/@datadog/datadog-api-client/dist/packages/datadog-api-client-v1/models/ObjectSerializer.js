"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
const APIErrorResponse_1 = require("./APIErrorResponse");
const AWSAccount_1 = require("./AWSAccount");
const AWSAccountAndLambdaRequest_1 = require("./AWSAccountAndLambdaRequest");
const AWSAccountCreateResponse_1 = require("./AWSAccountCreateResponse");
const AWSAccountDeleteRequest_1 = require("./AWSAccountDeleteRequest");
const AWSAccountListResponse_1 = require("./AWSAccountListResponse");
const AWSEventBridgeAccountConfiguration_1 = require("./AWSEventBridgeAccountConfiguration");
const AWSEventBridgeCreateRequest_1 = require("./AWSEventBridgeCreateRequest");
const AWSEventBridgeCreateResponse_1 = require("./AWSEventBridgeCreateResponse");
const AWSEventBridgeDeleteRequest_1 = require("./AWSEventBridgeDeleteRequest");
const AWSEventBridgeDeleteResponse_1 = require("./AWSEventBridgeDeleteResponse");
const AWSEventBridgeListResponse_1 = require("./AWSEventBridgeListResponse");
const AWSEventBridgeSource_1 = require("./AWSEventBridgeSource");
const AWSLogsAsyncError_1 = require("./AWSLogsAsyncError");
const AWSLogsAsyncResponse_1 = require("./AWSLogsAsyncResponse");
const AWSLogsLambda_1 = require("./AWSLogsLambda");
const AWSLogsListResponse_1 = require("./AWSLogsListResponse");
const AWSLogsListServicesResponse_1 = require("./AWSLogsListServicesResponse");
const AWSLogsServicesRequest_1 = require("./AWSLogsServicesRequest");
const AWSTagFilter_1 = require("./AWSTagFilter");
const AWSTagFilterCreateRequest_1 = require("./AWSTagFilterCreateRequest");
const AWSTagFilterDeleteRequest_1 = require("./AWSTagFilterDeleteRequest");
const AWSTagFilterListResponse_1 = require("./AWSTagFilterListResponse");
const AddSignalToIncidentRequest_1 = require("./AddSignalToIncidentRequest");
const AlertGraphWidgetDefinition_1 = require("./AlertGraphWidgetDefinition");
const AlertValueWidgetDefinition_1 = require("./AlertValueWidgetDefinition");
const ApiKey_1 = require("./ApiKey");
const ApiKeyListResponse_1 = require("./ApiKeyListResponse");
const ApiKeyResponse_1 = require("./ApiKeyResponse");
const ApmStatsQueryColumnType_1 = require("./ApmStatsQueryColumnType");
const ApmStatsQueryDefinition_1 = require("./ApmStatsQueryDefinition");
const ApplicationKey_1 = require("./ApplicationKey");
const ApplicationKeyListResponse_1 = require("./ApplicationKeyListResponse");
const ApplicationKeyResponse_1 = require("./ApplicationKeyResponse");
const AuthenticationValidationResponse_1 = require("./AuthenticationValidationResponse");
const AzureAccount_1 = require("./AzureAccount");
const CancelDowntimesByScopeRequest_1 = require("./CancelDowntimesByScopeRequest");
const CanceledDowntimesIds_1 = require("./CanceledDowntimesIds");
const ChangeWidgetDefinition_1 = require("./ChangeWidgetDefinition");
const ChangeWidgetRequest_1 = require("./ChangeWidgetRequest");
const CheckCanDeleteMonitorResponse_1 = require("./CheckCanDeleteMonitorResponse");
const CheckCanDeleteMonitorResponseData_1 = require("./CheckCanDeleteMonitorResponseData");
const CheckCanDeleteSLOResponse_1 = require("./CheckCanDeleteSLOResponse");
const CheckCanDeleteSLOResponseData_1 = require("./CheckCanDeleteSLOResponseData");
const CheckStatusWidgetDefinition_1 = require("./CheckStatusWidgetDefinition");
const Creator_1 = require("./Creator");
const Dashboard_1 = require("./Dashboard");
const DashboardBulkActionData_1 = require("./DashboardBulkActionData");
const DashboardBulkDeleteRequest_1 = require("./DashboardBulkDeleteRequest");
const DashboardDeleteResponse_1 = require("./DashboardDeleteResponse");
const DashboardGlobalTime_1 = require("./DashboardGlobalTime");
const DashboardList_1 = require("./DashboardList");
const DashboardListDeleteResponse_1 = require("./DashboardListDeleteResponse");
const DashboardListListResponse_1 = require("./DashboardListListResponse");
const DashboardRestoreRequest_1 = require("./DashboardRestoreRequest");
const DashboardSummary_1 = require("./DashboardSummary");
const DashboardSummaryDefinition_1 = require("./DashboardSummaryDefinition");
const DashboardTemplateVariable_1 = require("./DashboardTemplateVariable");
const DashboardTemplateVariablePreset_1 = require("./DashboardTemplateVariablePreset");
const DashboardTemplateVariablePresetValue_1 = require("./DashboardTemplateVariablePresetValue");
const DeleteSharedDashboardResponse_1 = require("./DeleteSharedDashboardResponse");
const DeletedMonitor_1 = require("./DeletedMonitor");
const DistributionPointsPayload_1 = require("./DistributionPointsPayload");
const DistributionPointsSeries_1 = require("./DistributionPointsSeries");
const DistributionWidgetDefinition_1 = require("./DistributionWidgetDefinition");
const DistributionWidgetRequest_1 = require("./DistributionWidgetRequest");
const DistributionWidgetXAxis_1 = require("./DistributionWidgetXAxis");
const DistributionWidgetYAxis_1 = require("./DistributionWidgetYAxis");
const Downtime_1 = require("./Downtime");
const DowntimeChild_1 = require("./DowntimeChild");
const DowntimeRecurrence_1 = require("./DowntimeRecurrence");
const Event_1 = require("./Event");
const EventCreateRequest_1 = require("./EventCreateRequest");
const EventCreateResponse_1 = require("./EventCreateResponse");
const EventListResponse_1 = require("./EventListResponse");
const EventQueryDefinition_1 = require("./EventQueryDefinition");
const EventResponse_1 = require("./EventResponse");
const EventStreamWidgetDefinition_1 = require("./EventStreamWidgetDefinition");
const EventTimelineWidgetDefinition_1 = require("./EventTimelineWidgetDefinition");
const FormulaAndFunctionApmDependencyStatsQueryDefinition_1 = require("./FormulaAndFunctionApmDependencyStatsQueryDefinition");
const FormulaAndFunctionApmResourceStatsQueryDefinition_1 = require("./FormulaAndFunctionApmResourceStatsQueryDefinition");
const FormulaAndFunctionCloudCostQueryDefinition_1 = require("./FormulaAndFunctionCloudCostQueryDefinition");
const FormulaAndFunctionEventQueryDefinition_1 = require("./FormulaAndFunctionEventQueryDefinition");
const FormulaAndFunctionEventQueryDefinitionCompute_1 = require("./FormulaAndFunctionEventQueryDefinitionCompute");
const FormulaAndFunctionEventQueryDefinitionSearch_1 = require("./FormulaAndFunctionEventQueryDefinitionSearch");
const FormulaAndFunctionEventQueryGroupBy_1 = require("./FormulaAndFunctionEventQueryGroupBy");
const FormulaAndFunctionEventQueryGroupBySort_1 = require("./FormulaAndFunctionEventQueryGroupBySort");
const FormulaAndFunctionMetricQueryDefinition_1 = require("./FormulaAndFunctionMetricQueryDefinition");
const FormulaAndFunctionProcessQueryDefinition_1 = require("./FormulaAndFunctionProcessQueryDefinition");
const FormulaAndFunctionSLOQueryDefinition_1 = require("./FormulaAndFunctionSLOQueryDefinition");
const FreeTextWidgetDefinition_1 = require("./FreeTextWidgetDefinition");
const FunnelQuery_1 = require("./FunnelQuery");
const FunnelStep_1 = require("./FunnelStep");
const FunnelWidgetDefinition_1 = require("./FunnelWidgetDefinition");
const FunnelWidgetRequest_1 = require("./FunnelWidgetRequest");
const GCPAccount_1 = require("./GCPAccount");
const GeomapWidgetDefinition_1 = require("./GeomapWidgetDefinition");
const GeomapWidgetDefinitionStyle_1 = require("./GeomapWidgetDefinitionStyle");
const GeomapWidgetDefinitionView_1 = require("./GeomapWidgetDefinitionView");
const GeomapWidgetRequest_1 = require("./GeomapWidgetRequest");
const GraphSnapshot_1 = require("./GraphSnapshot");
const GroupWidgetDefinition_1 = require("./GroupWidgetDefinition");
const HTTPLogError_1 = require("./HTTPLogError");
const HTTPLogItem_1 = require("./HTTPLogItem");
const HeatMapWidgetDefinition_1 = require("./HeatMapWidgetDefinition");
const HeatMapWidgetRequest_1 = require("./HeatMapWidgetRequest");
const Host_1 = require("./Host");
const HostListResponse_1 = require("./HostListResponse");
const HostMapRequest_1 = require("./HostMapRequest");
const HostMapWidgetDefinition_1 = require("./HostMapWidgetDefinition");
const HostMapWidgetDefinitionRequests_1 = require("./HostMapWidgetDefinitionRequests");
const HostMapWidgetDefinitionStyle_1 = require("./HostMapWidgetDefinitionStyle");
const HostMeta_1 = require("./HostMeta");
const HostMetaInstallMethod_1 = require("./HostMetaInstallMethod");
const HostMetrics_1 = require("./HostMetrics");
const HostMuteResponse_1 = require("./HostMuteResponse");
const HostMuteSettings_1 = require("./HostMuteSettings");
const HostTags_1 = require("./HostTags");
const HostTotals_1 = require("./HostTotals");
const HourlyUsageAttributionBody_1 = require("./HourlyUsageAttributionBody");
const HourlyUsageAttributionMetadata_1 = require("./HourlyUsageAttributionMetadata");
const HourlyUsageAttributionPagination_1 = require("./HourlyUsageAttributionPagination");
const HourlyUsageAttributionResponse_1 = require("./HourlyUsageAttributionResponse");
const IFrameWidgetDefinition_1 = require("./IFrameWidgetDefinition");
const IPPrefixesAPI_1 = require("./IPPrefixesAPI");
const IPPrefixesAPM_1 = require("./IPPrefixesAPM");
const IPPrefixesAgents_1 = require("./IPPrefixesAgents");
const IPPrefixesGlobal_1 = require("./IPPrefixesGlobal");
const IPPrefixesLogs_1 = require("./IPPrefixesLogs");
const IPPrefixesOrchestrator_1 = require("./IPPrefixesOrchestrator");
const IPPrefixesProcess_1 = require("./IPPrefixesProcess");
const IPPrefixesRemoteConfiguration_1 = require("./IPPrefixesRemoteConfiguration");
const IPPrefixesSynthetics_1 = require("./IPPrefixesSynthetics");
const IPPrefixesSyntheticsPrivateLocations_1 = require("./IPPrefixesSyntheticsPrivateLocations");
const IPPrefixesWebhooks_1 = require("./IPPrefixesWebhooks");
const IPRanges_1 = require("./IPRanges");
const IdpFormData_1 = require("./IdpFormData");
const IdpResponse_1 = require("./IdpResponse");
const ImageWidgetDefinition_1 = require("./ImageWidgetDefinition");
const IntakePayloadAccepted_1 = require("./IntakePayloadAccepted");
const ListStreamColumn_1 = require("./ListStreamColumn");
const ListStreamComputeItems_1 = require("./ListStreamComputeItems");
const ListStreamGroupByItems_1 = require("./ListStreamGroupByItems");
const ListStreamQuery_1 = require("./ListStreamQuery");
const ListStreamWidgetDefinition_1 = require("./ListStreamWidgetDefinition");
const ListStreamWidgetRequest_1 = require("./ListStreamWidgetRequest");
const Log_1 = require("./Log");
const LogContent_1 = require("./LogContent");
const LogQueryDefinition_1 = require("./LogQueryDefinition");
const LogQueryDefinitionGroupBy_1 = require("./LogQueryDefinitionGroupBy");
const LogQueryDefinitionGroupBySort_1 = require("./LogQueryDefinitionGroupBySort");
const LogQueryDefinitionSearch_1 = require("./LogQueryDefinitionSearch");
const LogStreamWidgetDefinition_1 = require("./LogStreamWidgetDefinition");
const LogsAPIError_1 = require("./LogsAPIError");
const LogsAPIErrorResponse_1 = require("./LogsAPIErrorResponse");
const LogsArithmeticProcessor_1 = require("./LogsArithmeticProcessor");
const LogsAttributeRemapper_1 = require("./LogsAttributeRemapper");
const LogsByRetention_1 = require("./LogsByRetention");
const LogsByRetentionMonthlyUsage_1 = require("./LogsByRetentionMonthlyUsage");
const LogsByRetentionOrgUsage_1 = require("./LogsByRetentionOrgUsage");
const LogsByRetentionOrgs_1 = require("./LogsByRetentionOrgs");
const LogsCategoryProcessor_1 = require("./LogsCategoryProcessor");
const LogsCategoryProcessorCategory_1 = require("./LogsCategoryProcessorCategory");
const LogsDailyLimitReset_1 = require("./LogsDailyLimitReset");
const LogsDateRemapper_1 = require("./LogsDateRemapper");
const LogsExclusion_1 = require("./LogsExclusion");
const LogsExclusionFilter_1 = require("./LogsExclusionFilter");
const LogsFilter_1 = require("./LogsFilter");
const LogsGeoIPParser_1 = require("./LogsGeoIPParser");
const LogsGrokParser_1 = require("./LogsGrokParser");
const LogsGrokParserRules_1 = require("./LogsGrokParserRules");
const LogsIndex_1 = require("./LogsIndex");
const LogsIndexListResponse_1 = require("./LogsIndexListResponse");
const LogsIndexUpdateRequest_1 = require("./LogsIndexUpdateRequest");
const LogsIndexesOrder_1 = require("./LogsIndexesOrder");
const LogsListRequest_1 = require("./LogsListRequest");
const LogsListRequestTime_1 = require("./LogsListRequestTime");
const LogsListResponse_1 = require("./LogsListResponse");
const LogsLookupProcessor_1 = require("./LogsLookupProcessor");
const LogsMessageRemapper_1 = require("./LogsMessageRemapper");
const LogsPipeline_1 = require("./LogsPipeline");
const LogsPipelineProcessor_1 = require("./LogsPipelineProcessor");
const LogsPipelinesOrder_1 = require("./LogsPipelinesOrder");
const LogsQueryCompute_1 = require("./LogsQueryCompute");
const LogsRetentionAggSumUsage_1 = require("./LogsRetentionAggSumUsage");
const LogsRetentionSumUsage_1 = require("./LogsRetentionSumUsage");
const LogsServiceRemapper_1 = require("./LogsServiceRemapper");
const LogsSpanRemapper_1 = require("./LogsSpanRemapper");
const LogsStatusRemapper_1 = require("./LogsStatusRemapper");
const LogsStringBuilderProcessor_1 = require("./LogsStringBuilderProcessor");
const LogsTraceRemapper_1 = require("./LogsTraceRemapper");
const LogsURLParser_1 = require("./LogsURLParser");
const LogsUserAgentParser_1 = require("./LogsUserAgentParser");
const MatchingDowntime_1 = require("./MatchingDowntime");
const MetricMetadata_1 = require("./MetricMetadata");
const MetricSearchResponse_1 = require("./MetricSearchResponse");
const MetricSearchResponseResults_1 = require("./MetricSearchResponseResults");
const MetricsListResponse_1 = require("./MetricsListResponse");
const MetricsPayload_1 = require("./MetricsPayload");
const MetricsQueryMetadata_1 = require("./MetricsQueryMetadata");
const MetricsQueryResponse_1 = require("./MetricsQueryResponse");
const MetricsQueryUnit_1 = require("./MetricsQueryUnit");
const Monitor_1 = require("./Monitor");
const MonitorFormulaAndFunctionCostQueryDefinition_1 = require("./MonitorFormulaAndFunctionCostQueryDefinition");
const MonitorFormulaAndFunctionEventQueryDefinition_1 = require("./MonitorFormulaAndFunctionEventQueryDefinition");
const MonitorFormulaAndFunctionEventQueryDefinitionCompute_1 = require("./MonitorFormulaAndFunctionEventQueryDefinitionCompute");
const MonitorFormulaAndFunctionEventQueryDefinitionSearch_1 = require("./MonitorFormulaAndFunctionEventQueryDefinitionSearch");
const MonitorFormulaAndFunctionEventQueryGroupBy_1 = require("./MonitorFormulaAndFunctionEventQueryGroupBy");
const MonitorFormulaAndFunctionEventQueryGroupBySort_1 = require("./MonitorFormulaAndFunctionEventQueryGroupBySort");
const MonitorGroupSearchResponse_1 = require("./MonitorGroupSearchResponse");
const MonitorGroupSearchResponseCounts_1 = require("./MonitorGroupSearchResponseCounts");
const MonitorGroupSearchResult_1 = require("./MonitorGroupSearchResult");
const MonitorOptions_1 = require("./MonitorOptions");
const MonitorOptionsAggregation_1 = require("./MonitorOptionsAggregation");
const MonitorOptionsCustomSchedule_1 = require("./MonitorOptionsCustomSchedule");
const MonitorOptionsCustomScheduleRecurrence_1 = require("./MonitorOptionsCustomScheduleRecurrence");
const MonitorOptionsSchedulingOptions_1 = require("./MonitorOptionsSchedulingOptions");
const MonitorOptionsSchedulingOptionsEvaluationWindow_1 = require("./MonitorOptionsSchedulingOptionsEvaluationWindow");
const MonitorSearchCountItem_1 = require("./MonitorSearchCountItem");
const MonitorSearchResponse_1 = require("./MonitorSearchResponse");
const MonitorSearchResponseCounts_1 = require("./MonitorSearchResponseCounts");
const MonitorSearchResponseMetadata_1 = require("./MonitorSearchResponseMetadata");
const MonitorSearchResult_1 = require("./MonitorSearchResult");
const MonitorSearchResultNotification_1 = require("./MonitorSearchResultNotification");
const MonitorState_1 = require("./MonitorState");
const MonitorStateGroup_1 = require("./MonitorStateGroup");
const MonitorSummaryWidgetDefinition_1 = require("./MonitorSummaryWidgetDefinition");
const MonitorThresholdWindowOptions_1 = require("./MonitorThresholdWindowOptions");
const MonitorThresholds_1 = require("./MonitorThresholds");
const MonitorUpdateRequest_1 = require("./MonitorUpdateRequest");
const MonthlyUsageAttributionBody_1 = require("./MonthlyUsageAttributionBody");
const MonthlyUsageAttributionMetadata_1 = require("./MonthlyUsageAttributionMetadata");
const MonthlyUsageAttributionPagination_1 = require("./MonthlyUsageAttributionPagination");
const MonthlyUsageAttributionResponse_1 = require("./MonthlyUsageAttributionResponse");
const MonthlyUsageAttributionValues_1 = require("./MonthlyUsageAttributionValues");
const NoteWidgetDefinition_1 = require("./NoteWidgetDefinition");
const NotebookAbsoluteTime_1 = require("./NotebookAbsoluteTime");
const NotebookAuthor_1 = require("./NotebookAuthor");
const NotebookCellCreateRequest_1 = require("./NotebookCellCreateRequest");
const NotebookCellResponse_1 = require("./NotebookCellResponse");
const NotebookCellUpdateRequest_1 = require("./NotebookCellUpdateRequest");
const NotebookCreateData_1 = require("./NotebookCreateData");
const NotebookCreateDataAttributes_1 = require("./NotebookCreateDataAttributes");
const NotebookCreateRequest_1 = require("./NotebookCreateRequest");
const NotebookDistributionCellAttributes_1 = require("./NotebookDistributionCellAttributes");
const NotebookHeatMapCellAttributes_1 = require("./NotebookHeatMapCellAttributes");
const NotebookLogStreamCellAttributes_1 = require("./NotebookLogStreamCellAttributes");
const NotebookMarkdownCellAttributes_1 = require("./NotebookMarkdownCellAttributes");
const NotebookMarkdownCellDefinition_1 = require("./NotebookMarkdownCellDefinition");
const NotebookMetadata_1 = require("./NotebookMetadata");
const NotebookRelativeTime_1 = require("./NotebookRelativeTime");
const NotebookResponse_1 = require("./NotebookResponse");
const NotebookResponseData_1 = require("./NotebookResponseData");
const NotebookResponseDataAttributes_1 = require("./NotebookResponseDataAttributes");
const NotebookSplitBy_1 = require("./NotebookSplitBy");
const NotebookTimeseriesCellAttributes_1 = require("./NotebookTimeseriesCellAttributes");
const NotebookToplistCellAttributes_1 = require("./NotebookToplistCellAttributes");
const NotebookUpdateData_1 = require("./NotebookUpdateData");
const NotebookUpdateDataAttributes_1 = require("./NotebookUpdateDataAttributes");
const NotebookUpdateRequest_1 = require("./NotebookUpdateRequest");
const NotebooksResponse_1 = require("./NotebooksResponse");
const NotebooksResponseData_1 = require("./NotebooksResponseData");
const NotebooksResponseDataAttributes_1 = require("./NotebooksResponseDataAttributes");
const NotebooksResponseMeta_1 = require("./NotebooksResponseMeta");
const NotebooksResponsePage_1 = require("./NotebooksResponsePage");
const NumberFormatUnitCanonical_1 = require("./NumberFormatUnitCanonical");
const NumberFormatUnitCustom_1 = require("./NumberFormatUnitCustom");
const NumberFormatUnitScale_1 = require("./NumberFormatUnitScale");
const OrgDowngradedResponse_1 = require("./OrgDowngradedResponse");
const Organization_1 = require("./Organization");
const OrganizationBilling_1 = require("./OrganizationBilling");
const OrganizationCreateBody_1 = require("./OrganizationCreateBody");
const OrganizationCreateResponse_1 = require("./OrganizationCreateResponse");
const OrganizationListResponse_1 = require("./OrganizationListResponse");
const OrganizationResponse_1 = require("./OrganizationResponse");
const OrganizationSettings_1 = require("./OrganizationSettings");
const OrganizationSettingsSaml_1 = require("./OrganizationSettingsSaml");
const OrganizationSettingsSamlAutocreateUsersDomains_1 = require("./OrganizationSettingsSamlAutocreateUsersDomains");
const OrganizationSettingsSamlIdpInitiatedLogin_1 = require("./OrganizationSettingsSamlIdpInitiatedLogin");
const OrganizationSettingsSamlStrictMode_1 = require("./OrganizationSettingsSamlStrictMode");
const OrganizationSubscription_1 = require("./OrganizationSubscription");
const PagerDutyService_1 = require("./PagerDutyService");
const PagerDutyServiceKey_1 = require("./PagerDutyServiceKey");
const PagerDutyServiceName_1 = require("./PagerDutyServiceName");
const Pagination_1 = require("./Pagination");
const PowerpackTemplateVariableContents_1 = require("./PowerpackTemplateVariableContents");
const PowerpackTemplateVariables_1 = require("./PowerpackTemplateVariables");
const PowerpackWidgetDefinition_1 = require("./PowerpackWidgetDefinition");
const ProcessQueryDefinition_1 = require("./ProcessQueryDefinition");
const QueryValueWidgetDefinition_1 = require("./QueryValueWidgetDefinition");
const QueryValueWidgetRequest_1 = require("./QueryValueWidgetRequest");
const ReferenceTableLogsLookupProcessor_1 = require("./ReferenceTableLogsLookupProcessor");
const ResourceProviderConfig_1 = require("./ResourceProviderConfig");
const ResponseMetaAttributes_1 = require("./ResponseMetaAttributes");
const RunWorkflowWidgetDefinition_1 = require("./RunWorkflowWidgetDefinition");
const RunWorkflowWidgetInput_1 = require("./RunWorkflowWidgetInput");
const SLOBulkDeleteError_1 = require("./SLOBulkDeleteError");
const SLOBulkDeleteResponse_1 = require("./SLOBulkDeleteResponse");
const SLOBulkDeleteResponseData_1 = require("./SLOBulkDeleteResponseData");
const SLOCorrection_1 = require("./SLOCorrection");
const SLOCorrectionCreateData_1 = require("./SLOCorrectionCreateData");
const SLOCorrectionCreateRequest_1 = require("./SLOCorrectionCreateRequest");
const SLOCorrectionCreateRequestAttributes_1 = require("./SLOCorrectionCreateRequestAttributes");
const SLOCorrectionListResponse_1 = require("./SLOCorrectionListResponse");
const SLOCorrectionResponse_1 = require("./SLOCorrectionResponse");
const SLOCorrectionResponseAttributes_1 = require("./SLOCorrectionResponseAttributes");
const SLOCorrectionResponseAttributesModifier_1 = require("./SLOCorrectionResponseAttributesModifier");
const SLOCorrectionUpdateData_1 = require("./SLOCorrectionUpdateData");
const SLOCorrectionUpdateRequest_1 = require("./SLOCorrectionUpdateRequest");
const SLOCorrectionUpdateRequestAttributes_1 = require("./SLOCorrectionUpdateRequestAttributes");
const SLOCreator_1 = require("./SLOCreator");
const SLODeleteResponse_1 = require("./SLODeleteResponse");
const SLOFormula_1 = require("./SLOFormula");
const SLOHistoryMetrics_1 = require("./SLOHistoryMetrics");
const SLOHistoryMetricsSeries_1 = require("./SLOHistoryMetricsSeries");
const SLOHistoryMetricsSeriesMetadata_1 = require("./SLOHistoryMetricsSeriesMetadata");
const SLOHistoryMetricsSeriesMetadataUnit_1 = require("./SLOHistoryMetricsSeriesMetadataUnit");
const SLOHistoryMonitor_1 = require("./SLOHistoryMonitor");
const SLOHistoryResponse_1 = require("./SLOHistoryResponse");
const SLOHistoryResponseData_1 = require("./SLOHistoryResponseData");
const SLOHistoryResponseError_1 = require("./SLOHistoryResponseError");
const SLOHistoryResponseErrorWithType_1 = require("./SLOHistoryResponseErrorWithType");
const SLOHistorySLIData_1 = require("./SLOHistorySLIData");
const SLOListResponse_1 = require("./SLOListResponse");
const SLOListResponseMetadata_1 = require("./SLOListResponseMetadata");
const SLOListResponseMetadataPage_1 = require("./SLOListResponseMetadataPage");
const SLOListWidgetDefinition_1 = require("./SLOListWidgetDefinition");
const SLOListWidgetQuery_1 = require("./SLOListWidgetQuery");
const SLOListWidgetRequest_1 = require("./SLOListWidgetRequest");
const SLOOverallStatuses_1 = require("./SLOOverallStatuses");
const SLORawErrorBudgetRemaining_1 = require("./SLORawErrorBudgetRemaining");
const SLOResponse_1 = require("./SLOResponse");
const SLOResponseData_1 = require("./SLOResponseData");
const SLOStatus_1 = require("./SLOStatus");
const SLOThreshold_1 = require("./SLOThreshold");
const SLOTimeSliceCondition_1 = require("./SLOTimeSliceCondition");
const SLOTimeSliceQuery_1 = require("./SLOTimeSliceQuery");
const SLOTimeSliceSpec_1 = require("./SLOTimeSliceSpec");
const SLOWidgetDefinition_1 = require("./SLOWidgetDefinition");
const ScatterPlotRequest_1 = require("./ScatterPlotRequest");
const ScatterPlotWidgetDefinition_1 = require("./ScatterPlotWidgetDefinition");
const ScatterPlotWidgetDefinitionRequests_1 = require("./ScatterPlotWidgetDefinitionRequests");
const ScatterplotTableRequest_1 = require("./ScatterplotTableRequest");
const ScatterplotWidgetFormula_1 = require("./ScatterplotWidgetFormula");
const SearchSLOQuery_1 = require("./SearchSLOQuery");
const SearchSLOResponse_1 = require("./SearchSLOResponse");
const SearchSLOResponseData_1 = require("./SearchSLOResponseData");
const SearchSLOResponseDataAttributes_1 = require("./SearchSLOResponseDataAttributes");
const SearchSLOResponseDataAttributesFacets_1 = require("./SearchSLOResponseDataAttributesFacets");
const SearchSLOResponseDataAttributesFacetsObjectInt_1 = require("./SearchSLOResponseDataAttributesFacetsObjectInt");
const SearchSLOResponseDataAttributesFacetsObjectString_1 = require("./SearchSLOResponseDataAttributesFacetsObjectString");
const SearchSLOResponseLinks_1 = require("./SearchSLOResponseLinks");
const SearchSLOResponseMeta_1 = require("./SearchSLOResponseMeta");
const SearchSLOResponseMetaPage_1 = require("./SearchSLOResponseMetaPage");
const SearchSLOThreshold_1 = require("./SearchSLOThreshold");
const SearchServiceLevelObjective_1 = require("./SearchServiceLevelObjective");
const SearchServiceLevelObjectiveAttributes_1 = require("./SearchServiceLevelObjectiveAttributes");
const SearchServiceLevelObjectiveData_1 = require("./SearchServiceLevelObjectiveData");
const SelectableTemplateVariableItems_1 = require("./SelectableTemplateVariableItems");
const Series_1 = require("./Series");
const ServiceCheck_1 = require("./ServiceCheck");
const ServiceLevelObjective_1 = require("./ServiceLevelObjective");
const ServiceLevelObjectiveQuery_1 = require("./ServiceLevelObjectiveQuery");
const ServiceLevelObjectiveRequest_1 = require("./ServiceLevelObjectiveRequest");
const ServiceMapWidgetDefinition_1 = require("./ServiceMapWidgetDefinition");
const ServiceSummaryWidgetDefinition_1 = require("./ServiceSummaryWidgetDefinition");
const SharedDashboard_1 = require("./SharedDashboard");
const SharedDashboardAuthor_1 = require("./SharedDashboardAuthor");
const SharedDashboardInviteesItems_1 = require("./SharedDashboardInviteesItems");
const SharedDashboardInvites_1 = require("./SharedDashboardInvites");
const SharedDashboardInvitesDataObject_1 = require("./SharedDashboardInvitesDataObject");
const SharedDashboardInvitesDataObjectAttributes_1 = require("./SharedDashboardInvitesDataObjectAttributes");
const SharedDashboardInvitesMeta_1 = require("./SharedDashboardInvitesMeta");
const SharedDashboardInvitesMetaPage_1 = require("./SharedDashboardInvitesMetaPage");
const SharedDashboardUpdateRequest_1 = require("./SharedDashboardUpdateRequest");
const SharedDashboardUpdateRequestGlobalTime_1 = require("./SharedDashboardUpdateRequestGlobalTime");
const SignalAssigneeUpdateRequest_1 = require("./SignalAssigneeUpdateRequest");
const SignalStateUpdateRequest_1 = require("./SignalStateUpdateRequest");
const SlackIntegrationChannel_1 = require("./SlackIntegrationChannel");
const SlackIntegrationChannelDisplay_1 = require("./SlackIntegrationChannelDisplay");
const SplitConfig_1 = require("./SplitConfig");
const SplitConfigSortCompute_1 = require("./SplitConfigSortCompute");
const SplitDimension_1 = require("./SplitDimension");
const SplitGraphWidgetDefinition_1 = require("./SplitGraphWidgetDefinition");
const SplitSort_1 = require("./SplitSort");
const SplitVectorEntryItem_1 = require("./SplitVectorEntryItem");
const SuccessfulSignalUpdateResponse_1 = require("./SuccessfulSignalUpdateResponse");
const SunburstWidgetDefinition_1 = require("./SunburstWidgetDefinition");
const SunburstWidgetLegendInlineAutomatic_1 = require("./SunburstWidgetLegendInlineAutomatic");
const SunburstWidgetLegendTable_1 = require("./SunburstWidgetLegendTable");
const SunburstWidgetRequest_1 = require("./SunburstWidgetRequest");
const SyntheticsAPITest_1 = require("./SyntheticsAPITest");
const SyntheticsAPITestConfig_1 = require("./SyntheticsAPITestConfig");
const SyntheticsAPITestResultData_1 = require("./SyntheticsAPITestResultData");
const SyntheticsAPITestResultFull_1 = require("./SyntheticsAPITestResultFull");
const SyntheticsAPITestResultFullCheck_1 = require("./SyntheticsAPITestResultFullCheck");
const SyntheticsAPITestResultShort_1 = require("./SyntheticsAPITestResultShort");
const SyntheticsAPITestResultShortResult_1 = require("./SyntheticsAPITestResultShortResult");
const SyntheticsAPITestStep_1 = require("./SyntheticsAPITestStep");
const SyntheticsAPIWaitStep_1 = require("./SyntheticsAPIWaitStep");
const SyntheticsApiTestResultFailure_1 = require("./SyntheticsApiTestResultFailure");
const SyntheticsAssertionBodyHashTarget_1 = require("./SyntheticsAssertionBodyHashTarget");
const SyntheticsAssertionJSONPathTarget_1 = require("./SyntheticsAssertionJSONPathTarget");
const SyntheticsAssertionJSONPathTargetTarget_1 = require("./SyntheticsAssertionJSONPathTargetTarget");
const SyntheticsAssertionJSONSchemaTarget_1 = require("./SyntheticsAssertionJSONSchemaTarget");
const SyntheticsAssertionJSONSchemaTargetTarget_1 = require("./SyntheticsAssertionJSONSchemaTargetTarget");
const SyntheticsAssertionJavascript_1 = require("./SyntheticsAssertionJavascript");
const SyntheticsAssertionTarget_1 = require("./SyntheticsAssertionTarget");
const SyntheticsAssertionXPathTarget_1 = require("./SyntheticsAssertionXPathTarget");
const SyntheticsAssertionXPathTargetTarget_1 = require("./SyntheticsAssertionXPathTargetTarget");
const SyntheticsBasicAuthDigest_1 = require("./SyntheticsBasicAuthDigest");
const SyntheticsBasicAuthNTLM_1 = require("./SyntheticsBasicAuthNTLM");
const SyntheticsBasicAuthOauthClient_1 = require("./SyntheticsBasicAuthOauthClient");
const SyntheticsBasicAuthOauthROP_1 = require("./SyntheticsBasicAuthOauthROP");
const SyntheticsBasicAuthSigv4_1 = require("./SyntheticsBasicAuthSigv4");
const SyntheticsBasicAuthWeb_1 = require("./SyntheticsBasicAuthWeb");
const SyntheticsBatchDetails_1 = require("./SyntheticsBatchDetails");
const SyntheticsBatchDetailsData_1 = require("./SyntheticsBatchDetailsData");
const SyntheticsBatchResult_1 = require("./SyntheticsBatchResult");
const SyntheticsBrowserError_1 = require("./SyntheticsBrowserError");
const SyntheticsBrowserTest_1 = require("./SyntheticsBrowserTest");
const SyntheticsBrowserTestConfig_1 = require("./SyntheticsBrowserTestConfig");
const SyntheticsBrowserTestResultData_1 = require("./SyntheticsBrowserTestResultData");
const SyntheticsBrowserTestResultFailure_1 = require("./SyntheticsBrowserTestResultFailure");
const SyntheticsBrowserTestResultFull_1 = require("./SyntheticsBrowserTestResultFull");
const SyntheticsBrowserTestResultFullCheck_1 = require("./SyntheticsBrowserTestResultFullCheck");
const SyntheticsBrowserTestResultShort_1 = require("./SyntheticsBrowserTestResultShort");
const SyntheticsBrowserTestResultShortResult_1 = require("./SyntheticsBrowserTestResultShortResult");
const SyntheticsBrowserTestRumSettings_1 = require("./SyntheticsBrowserTestRumSettings");
const SyntheticsBrowserVariable_1 = require("./SyntheticsBrowserVariable");
const SyntheticsCIBatchMetadata_1 = require("./SyntheticsCIBatchMetadata");
const SyntheticsCIBatchMetadataCI_1 = require("./SyntheticsCIBatchMetadataCI");
const SyntheticsCIBatchMetadataGit_1 = require("./SyntheticsCIBatchMetadataGit");
const SyntheticsCIBatchMetadataPipeline_1 = require("./SyntheticsCIBatchMetadataPipeline");
const SyntheticsCIBatchMetadataProvider_1 = require("./SyntheticsCIBatchMetadataProvider");
const SyntheticsCITest_1 = require("./SyntheticsCITest");
const SyntheticsCITestBody_1 = require("./SyntheticsCITestBody");
const SyntheticsConfigVariable_1 = require("./SyntheticsConfigVariable");
const SyntheticsCoreWebVitals_1 = require("./SyntheticsCoreWebVitals");
const SyntheticsDeleteTestsPayload_1 = require("./SyntheticsDeleteTestsPayload");
const SyntheticsDeleteTestsResponse_1 = require("./SyntheticsDeleteTestsResponse");
const SyntheticsDeletedTest_1 = require("./SyntheticsDeletedTest");
const SyntheticsDevice_1 = require("./SyntheticsDevice");
const SyntheticsFetchUptimesPayload_1 = require("./SyntheticsFetchUptimesPayload");
const SyntheticsGetAPITestLatestResultsResponse_1 = require("./SyntheticsGetAPITestLatestResultsResponse");
const SyntheticsGetBrowserTestLatestResultsResponse_1 = require("./SyntheticsGetBrowserTestLatestResultsResponse");
const SyntheticsGlobalVariable_1 = require("./SyntheticsGlobalVariable");
const SyntheticsGlobalVariableAttributes_1 = require("./SyntheticsGlobalVariableAttributes");
const SyntheticsGlobalVariableOptions_1 = require("./SyntheticsGlobalVariableOptions");
const SyntheticsGlobalVariableParseTestOptions_1 = require("./SyntheticsGlobalVariableParseTestOptions");
const SyntheticsGlobalVariableRequest_1 = require("./SyntheticsGlobalVariableRequest");
const SyntheticsGlobalVariableTOTPParameters_1 = require("./SyntheticsGlobalVariableTOTPParameters");
const SyntheticsGlobalVariableValue_1 = require("./SyntheticsGlobalVariableValue");
const SyntheticsListGlobalVariablesResponse_1 = require("./SyntheticsListGlobalVariablesResponse");
const SyntheticsListTestsResponse_1 = require("./SyntheticsListTestsResponse");
const SyntheticsLocation_1 = require("./SyntheticsLocation");
const SyntheticsLocations_1 = require("./SyntheticsLocations");
const SyntheticsMobileStep_1 = require("./SyntheticsMobileStep");
const SyntheticsMobileStepParams_1 = require("./SyntheticsMobileStepParams");
const SyntheticsMobileStepParamsElement_1 = require("./SyntheticsMobileStepParamsElement");
const SyntheticsMobileStepParamsElementRelativePosition_1 = require("./SyntheticsMobileStepParamsElementRelativePosition");
const SyntheticsMobileStepParamsElementUserLocator_1 = require("./SyntheticsMobileStepParamsElementUserLocator");
const SyntheticsMobileStepParamsElementUserLocatorValuesItems_1 = require("./SyntheticsMobileStepParamsElementUserLocatorValuesItems");
const SyntheticsMobileStepParamsPositionsItems_1 = require("./SyntheticsMobileStepParamsPositionsItems");
const SyntheticsMobileStepParamsVariable_1 = require("./SyntheticsMobileStepParamsVariable");
const SyntheticsMobileTest_1 = require("./SyntheticsMobileTest");
const SyntheticsMobileTestConfig_1 = require("./SyntheticsMobileTestConfig");
const SyntheticsMobileTestOptions_1 = require("./SyntheticsMobileTestOptions");
const SyntheticsMobileTestsMobileApplication_1 = require("./SyntheticsMobileTestsMobileApplication");
const SyntheticsParsingOptions_1 = require("./SyntheticsParsingOptions");
const SyntheticsPatchTestBody_1 = require("./SyntheticsPatchTestBody");
const SyntheticsPatchTestOperation_1 = require("./SyntheticsPatchTestOperation");
const SyntheticsPrivateLocation_1 = require("./SyntheticsPrivateLocation");
const SyntheticsPrivateLocationCreationResponse_1 = require("./SyntheticsPrivateLocationCreationResponse");
const SyntheticsPrivateLocationCreationResponseResultEncryption_1 = require("./SyntheticsPrivateLocationCreationResponseResultEncryption");
const SyntheticsPrivateLocationMetadata_1 = require("./SyntheticsPrivateLocationMetadata");
const SyntheticsPrivateLocationSecrets_1 = require("./SyntheticsPrivateLocationSecrets");
const SyntheticsPrivateLocationSecretsAuthentication_1 = require("./SyntheticsPrivateLocationSecretsAuthentication");
const SyntheticsPrivateLocationSecretsConfigDecryption_1 = require("./SyntheticsPrivateLocationSecretsConfigDecryption");
const SyntheticsSSLCertificate_1 = require("./SyntheticsSSLCertificate");
const SyntheticsSSLCertificateIssuer_1 = require("./SyntheticsSSLCertificateIssuer");
const SyntheticsSSLCertificateSubject_1 = require("./SyntheticsSSLCertificateSubject");
const SyntheticsStep_1 = require("./SyntheticsStep");
const SyntheticsStepDetail_1 = require("./SyntheticsStepDetail");
const SyntheticsStepDetailWarning_1 = require("./SyntheticsStepDetailWarning");
const SyntheticsTestCiOptions_1 = require("./SyntheticsTestCiOptions");
const SyntheticsTestConfig_1 = require("./SyntheticsTestConfig");
const SyntheticsTestDetails_1 = require("./SyntheticsTestDetails");
const SyntheticsTestOptions_1 = require("./SyntheticsTestOptions");
const SyntheticsTestOptionsMonitorOptions_1 = require("./SyntheticsTestOptionsMonitorOptions");
const SyntheticsTestOptionsRetry_1 = require("./SyntheticsTestOptionsRetry");
const SyntheticsTestOptionsScheduling_1 = require("./SyntheticsTestOptionsScheduling");
const SyntheticsTestOptionsSchedulingTimeframe_1 = require("./SyntheticsTestOptionsSchedulingTimeframe");
const SyntheticsTestRequest_1 = require("./SyntheticsTestRequest");
const SyntheticsTestRequestBodyFile_1 = require("./SyntheticsTestRequestBodyFile");
const SyntheticsTestRequestCertificate_1 = require("./SyntheticsTestRequestCertificate");
const SyntheticsTestRequestCertificateItem_1 = require("./SyntheticsTestRequestCertificateItem");
const SyntheticsTestRequestProxy_1 = require("./SyntheticsTestRequestProxy");
const SyntheticsTestRestrictionPolicyBinding_1 = require("./SyntheticsTestRestrictionPolicyBinding");
const SyntheticsTestUptime_1 = require("./SyntheticsTestUptime");
const SyntheticsTiming_1 = require("./SyntheticsTiming");
const SyntheticsTriggerBody_1 = require("./SyntheticsTriggerBody");
const SyntheticsTriggerCITestLocation_1 = require("./SyntheticsTriggerCITestLocation");
const SyntheticsTriggerCITestRunResult_1 = require("./SyntheticsTriggerCITestRunResult");
const SyntheticsTriggerCITestsResponse_1 = require("./SyntheticsTriggerCITestsResponse");
const SyntheticsTriggerTest_1 = require("./SyntheticsTriggerTest");
const SyntheticsUpdateTestPauseStatusPayload_1 = require("./SyntheticsUpdateTestPauseStatusPayload");
const SyntheticsUptime_1 = require("./SyntheticsUptime");
const SyntheticsVariableParser_1 = require("./SyntheticsVariableParser");
const TableWidgetDefinition_1 = require("./TableWidgetDefinition");
const TableWidgetRequest_1 = require("./TableWidgetRequest");
const TableWidgetTextFormatMatch_1 = require("./TableWidgetTextFormatMatch");
const TableWidgetTextFormatReplaceAll_1 = require("./TableWidgetTextFormatReplaceAll");
const TableWidgetTextFormatReplaceSubstring_1 = require("./TableWidgetTextFormatReplaceSubstring");
const TableWidgetTextFormatRule_1 = require("./TableWidgetTextFormatRule");
const TagToHosts_1 = require("./TagToHosts");
const TimeseriesBackground_1 = require("./TimeseriesBackground");
const TimeseriesWidgetDefinition_1 = require("./TimeseriesWidgetDefinition");
const TimeseriesWidgetExpressionAlias_1 = require("./TimeseriesWidgetExpressionAlias");
const TimeseriesWidgetRequest_1 = require("./TimeseriesWidgetRequest");
const ToplistWidgetDefinition_1 = require("./ToplistWidgetDefinition");
const ToplistWidgetFlat_1 = require("./ToplistWidgetFlat");
const ToplistWidgetRequest_1 = require("./ToplistWidgetRequest");
const ToplistWidgetStacked_1 = require("./ToplistWidgetStacked");
const ToplistWidgetStyle_1 = require("./ToplistWidgetStyle");
const TopologyMapWidgetDefinition_1 = require("./TopologyMapWidgetDefinition");
const TopologyQuery_1 = require("./TopologyQuery");
const TopologyRequest_1 = require("./TopologyRequest");
const TreeMapWidgetDefinition_1 = require("./TreeMapWidgetDefinition");
const TreeMapWidgetRequest_1 = require("./TreeMapWidgetRequest");
const UsageAnalyzedLogsHour_1 = require("./UsageAnalyzedLogsHour");
const UsageAnalyzedLogsResponse_1 = require("./UsageAnalyzedLogsResponse");
const UsageAttributionAggregatesBody_1 = require("./UsageAttributionAggregatesBody");
const UsageAuditLogsHour_1 = require("./UsageAuditLogsHour");
const UsageAuditLogsResponse_1 = require("./UsageAuditLogsResponse");
const UsageBillableSummaryBody_1 = require("./UsageBillableSummaryBody");
const UsageBillableSummaryHour_1 = require("./UsageBillableSummaryHour");
const UsageBillableSummaryKeys_1 = require("./UsageBillableSummaryKeys");
const UsageBillableSummaryResponse_1 = require("./UsageBillableSummaryResponse");
const UsageCIVisibilityHour_1 = require("./UsageCIVisibilityHour");
const UsageCIVisibilityResponse_1 = require("./UsageCIVisibilityResponse");
const UsageCWSHour_1 = require("./UsageCWSHour");
const UsageCWSResponse_1 = require("./UsageCWSResponse");
const UsageCloudSecurityPostureManagementHour_1 = require("./UsageCloudSecurityPostureManagementHour");
const UsageCloudSecurityPostureManagementResponse_1 = require("./UsageCloudSecurityPostureManagementResponse");
const UsageCustomReportsAttributes_1 = require("./UsageCustomReportsAttributes");
const UsageCustomReportsData_1 = require("./UsageCustomReportsData");
const UsageCustomReportsMeta_1 = require("./UsageCustomReportsMeta");
const UsageCustomReportsPage_1 = require("./UsageCustomReportsPage");
const UsageCustomReportsResponse_1 = require("./UsageCustomReportsResponse");
const UsageDBMHour_1 = require("./UsageDBMHour");
const UsageDBMResponse_1 = require("./UsageDBMResponse");
const UsageFargateHour_1 = require("./UsageFargateHour");
const UsageFargateResponse_1 = require("./UsageFargateResponse");
const UsageHostHour_1 = require("./UsageHostHour");
const UsageHostsResponse_1 = require("./UsageHostsResponse");
const UsageIncidentManagementHour_1 = require("./UsageIncidentManagementHour");
const UsageIncidentManagementResponse_1 = require("./UsageIncidentManagementResponse");
const UsageIndexedSpansHour_1 = require("./UsageIndexedSpansHour");
const UsageIndexedSpansResponse_1 = require("./UsageIndexedSpansResponse");
const UsageIngestedSpansHour_1 = require("./UsageIngestedSpansHour");
const UsageIngestedSpansResponse_1 = require("./UsageIngestedSpansResponse");
const UsageIoTHour_1 = require("./UsageIoTHour");
const UsageIoTResponse_1 = require("./UsageIoTResponse");
const UsageLambdaHour_1 = require("./UsageLambdaHour");
const UsageLambdaResponse_1 = require("./UsageLambdaResponse");
const UsageLogsByIndexHour_1 = require("./UsageLogsByIndexHour");
const UsageLogsByIndexResponse_1 = require("./UsageLogsByIndexResponse");
const UsageLogsByRetentionHour_1 = require("./UsageLogsByRetentionHour");
const UsageLogsByRetentionResponse_1 = require("./UsageLogsByRetentionResponse");
const UsageLogsHour_1 = require("./UsageLogsHour");
const UsageLogsResponse_1 = require("./UsageLogsResponse");
const UsageNetworkFlowsHour_1 = require("./UsageNetworkFlowsHour");
const UsageNetworkFlowsResponse_1 = require("./UsageNetworkFlowsResponse");
const UsageNetworkHostsHour_1 = require("./UsageNetworkHostsHour");
const UsageNetworkHostsResponse_1 = require("./UsageNetworkHostsResponse");
const UsageOnlineArchiveHour_1 = require("./UsageOnlineArchiveHour");
const UsageOnlineArchiveResponse_1 = require("./UsageOnlineArchiveResponse");
const UsageProfilingHour_1 = require("./UsageProfilingHour");
const UsageProfilingResponse_1 = require("./UsageProfilingResponse");
const UsageRumSessionsHour_1 = require("./UsageRumSessionsHour");
const UsageRumSessionsResponse_1 = require("./UsageRumSessionsResponse");
const UsageRumUnitsHour_1 = require("./UsageRumUnitsHour");
const UsageRumUnitsResponse_1 = require("./UsageRumUnitsResponse");
const UsageSDSHour_1 = require("./UsageSDSHour");
const UsageSDSResponse_1 = require("./UsageSDSResponse");
const UsageSNMPHour_1 = require("./UsageSNMPHour");
const UsageSNMPResponse_1 = require("./UsageSNMPResponse");
const UsageSpecifiedCustomReportsAttributes_1 = require("./UsageSpecifiedCustomReportsAttributes");
const UsageSpecifiedCustomReportsData_1 = require("./UsageSpecifiedCustomReportsData");
const UsageSpecifiedCustomReportsMeta_1 = require("./UsageSpecifiedCustomReportsMeta");
const UsageSpecifiedCustomReportsPage_1 = require("./UsageSpecifiedCustomReportsPage");
const UsageSpecifiedCustomReportsResponse_1 = require("./UsageSpecifiedCustomReportsResponse");
const UsageSummaryDate_1 = require("./UsageSummaryDate");
const UsageSummaryDateOrg_1 = require("./UsageSummaryDateOrg");
const UsageSummaryResponse_1 = require("./UsageSummaryResponse");
const UsageSyntheticsAPIHour_1 = require("./UsageSyntheticsAPIHour");
const UsageSyntheticsAPIResponse_1 = require("./UsageSyntheticsAPIResponse");
const UsageSyntheticsBrowserHour_1 = require("./UsageSyntheticsBrowserHour");
const UsageSyntheticsBrowserResponse_1 = require("./UsageSyntheticsBrowserResponse");
const UsageSyntheticsHour_1 = require("./UsageSyntheticsHour");
const UsageSyntheticsResponse_1 = require("./UsageSyntheticsResponse");
const UsageTimeseriesHour_1 = require("./UsageTimeseriesHour");
const UsageTimeseriesResponse_1 = require("./UsageTimeseriesResponse");
const UsageTopAvgMetricsHour_1 = require("./UsageTopAvgMetricsHour");
const UsageTopAvgMetricsMetadata_1 = require("./UsageTopAvgMetricsMetadata");
const UsageTopAvgMetricsPagination_1 = require("./UsageTopAvgMetricsPagination");
const UsageTopAvgMetricsResponse_1 = require("./UsageTopAvgMetricsResponse");
const User_1 = require("./User");
const UserDisableResponse_1 = require("./UserDisableResponse");
const UserListResponse_1 = require("./UserListResponse");
const UserResponse_1 = require("./UserResponse");
const ViewingPreferences_1 = require("./ViewingPreferences");
const WebhooksIntegration_1 = require("./WebhooksIntegration");
const WebhooksIntegrationCustomVariable_1 = require("./WebhooksIntegrationCustomVariable");
const WebhooksIntegrationCustomVariableResponse_1 = require("./WebhooksIntegrationCustomVariableResponse");
const WebhooksIntegrationCustomVariableUpdateRequest_1 = require("./WebhooksIntegrationCustomVariableUpdateRequest");
const WebhooksIntegrationUpdateRequest_1 = require("./WebhooksIntegrationUpdateRequest");
const Widget_1 = require("./Widget");
const WidgetAxis_1 = require("./WidgetAxis");
const WidgetConditionalFormat_1 = require("./WidgetConditionalFormat");
const WidgetCustomLink_1 = require("./WidgetCustomLink");
const WidgetEvent_1 = require("./WidgetEvent");
const WidgetFieldSort_1 = require("./WidgetFieldSort");
const WidgetFormula_1 = require("./WidgetFormula");
const WidgetFormulaCellDisplayModeOptions_1 = require("./WidgetFormulaCellDisplayModeOptions");
const WidgetFormulaLimit_1 = require("./WidgetFormulaLimit");
const WidgetFormulaSort_1 = require("./WidgetFormulaSort");
const WidgetFormulaStyle_1 = require("./WidgetFormulaStyle");
const WidgetGroupSort_1 = require("./WidgetGroupSort");
const WidgetLayout_1 = require("./WidgetLayout");
const WidgetLegacyLiveSpan_1 = require("./WidgetLegacyLiveSpan");
const WidgetMarker_1 = require("./WidgetMarker");
const WidgetNewFixedSpan_1 = require("./WidgetNewFixedSpan");
const WidgetNewLiveSpan_1 = require("./WidgetNewLiveSpan");
const WidgetNumberFormat_1 = require("./WidgetNumberFormat");
const WidgetRequestStyle_1 = require("./WidgetRequestStyle");
const WidgetSortBy_1 = require("./WidgetSortBy");
const WidgetStyle_1 = require("./WidgetStyle");
const util_1 = require("../../datadog-api-client-common/util");
const logger_1 = require("../../../logger");
const primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
];
const ARRAY_PREFIX = "Array<";
const MAP_PREFIX = "{ [key: string]: ";
const TUPLE_PREFIX = "[";
const supportedMediaTypes = {
    "application/json": Infinity,
    "text/json": 100,
    "application/octet-stream": 0,
};
const enumsMap = {
    AWSEventBridgeCreateStatus: ["created"],
    AWSEventBridgeDeleteStatus: ["empty"],
    AWSNamespace: [
        "elb",
        "application_elb",
        "sqs",
        "rds",
        "custom",
        "network_elb",
        "lambda",
        "step_functions",
    ],
    AccessRole: ["st", "adm", "ro", "ERROR"],
    AlertGraphWidgetDefinitionType: ["alert_graph"],
    AlertValueWidgetDefinitionType: ["alert_value"],
    ApmStatsQueryRowType: ["service", "resource", "span"],
    ChangeWidgetDefinitionType: ["change"],
    CheckStatusWidgetDefinitionType: ["check_status"],
    ContentEncoding: ["gzip", "deflate"],
    DashboardGlobalTimeLiveSpan: [
        "15m",
        "1h",
        "4h",
        "1d",
        "2d",
        "1w",
        "1mo",
        "3mo",
    ],
    DashboardInviteType: ["public_dashboard_invitation"],
    DashboardLayoutType: ["ordered", "free"],
    DashboardReflowType: ["auto", "fixed"],
    DashboardResourceType: ["dashboard"],
    DashboardShareType: ["open", "invite", "embed"],
    DashboardType: ["custom_timeboard", "custom_screenboard"],
    DistributionPointsContentEncoding: ["deflate"],
    DistributionPointsType: ["distribution"],
    DistributionWidgetDefinitionType: ["distribution"],
    DistributionWidgetHistogramRequestType: ["histogram"],
    EventAlertType: [
        "error",
        "warning",
        "info",
        "success",
        "user_update",
        "recommendation",
        "snapshot",
    ],
    EventPriority: ["normal", "low"],
    EventStreamWidgetDefinitionType: ["event_stream"],
    EventTimelineWidgetDefinitionType: ["event_timeline"],
    FormulaAndFunctionApmDependencyStatName: [
        "avg_duration",
        "avg_root_duration",
        "avg_spans_per_trace",
        "error_rate",
        "pct_exec_time",
        "pct_of_traces",
        "total_traces_count",
    ],
    FormulaAndFunctionApmDependencyStatsDataSource: ["apm_dependency_stats"],
    FormulaAndFunctionApmResourceStatName: [
        "errors",
        "error_rate",
        "hits",
        "latency_avg",
        "latency_distribution",
        "latency_max",
        "latency_p50",
        "latency_p75",
        "latency_p90",
        "latency_p95",
        "latency_p99",
    ],
    FormulaAndFunctionApmResourceStatsDataSource: ["apm_resource_stats"],
    FormulaAndFunctionCloudCostDataSource: ["cloud_cost"],
    FormulaAndFunctionEventAggregation: [
        "count",
        "cardinality",
        "median",
        "pc75",
        "pc90",
        "pc95",
        "pc98",
        "pc99",
        "sum",
        "min",
        "max",
        "avg",
    ],
    FormulaAndFunctionEventsDataSource: [
        "logs",
        "spans",
        "network",
        "rum",
        "security_signals",
        "profiles",
        "audit",
        "events",
        "ci_tests",
        "ci_pipelines",
        "incident_analytics",
    ],
    FormulaAndFunctionMetricAggregation: [
        "avg",
        "min",
        "max",
        "sum",
        "last",
        "area",
        "l2norm",
        "percentile",
    ],
    FormulaAndFunctionMetricDataSource: ["metrics"],
    FormulaAndFunctionProcessQueryDataSource: ["process", "container"],
    FormulaAndFunctionResponseFormat: ["timeseries", "scalar", "event_list"],
    FormulaAndFunctionSLODataSource: ["slo"],
    FormulaAndFunctionSLOGroupMode: ["overall", "components"],
    FormulaAndFunctionSLOMeasure: [
        "good_events",
        "bad_events",
        "good_minutes",
        "bad_minutes",
        "slo_status",
        "error_budget_remaining",
        "burn_rate",
        "error_budget_burndown",
    ],
    FormulaAndFunctionSLOQueryType: ["metric", "monitor", "time_slice"],
    FormulaType: ["formula"],
    FreeTextWidgetDefinitionType: ["free_text"],
    FunnelRequestType: ["funnel"],
    FunnelSource: ["rum"],
    FunnelWidgetDefinitionType: ["funnel"],
    GeomapWidgetDefinitionType: ["geomap"],
    GroupType: ["group"],
    GroupWidgetDefinitionType: ["group"],
    HeatMapWidgetDefinitionType: ["heatmap"],
    HostMapWidgetDefinitionType: ["hostmap"],
    HourlyUsageAttributionUsageType: [
        "api_usage",
        "apm_fargate_usage",
        "apm_host_usage",
        "apm_usm_usage",
        "appsec_fargate_usage",
        "appsec_usage",
        "asm_serverless_traced_invocations_usage",
        "asm_serverless_traced_invocations_percentage",
        "browser_usage",
        "ci_pipeline_indexed_spans_usage",
        "ci_test_indexed_spans_usage",
        "ci_visibility_itr_usage",
        "cloud_siem_usage",
        "code_security_host_usage",
        "container_excl_agent_usage",
        "container_usage",
        "cspm_containers_usage",
        "cspm_hosts_usage",
        "custom_event_usage",
        "custom_ingested_timeseries_usage",
        "custom_timeseries_usage",
        "cws_containers_usage",
        "cws_fargate_task_usage",
        "cws_hosts_usage",
        "data_jobs_monitoring_usage",
        "data_stream_monitoring_usage",
        "dbm_hosts_usage",
        "dbm_queries_usage",
        "error_tracking_usage",
        "error_tracking_percentage",
        "estimated_indexed_spans_usage",
        "estimated_ingested_spans_usage",
        "fargate_usage",
        "functions_usage",
        "incident_management_monthly_active_users_usage",
        "indexed_spans_usage",
        "infra_host_usage",
        "ingested_logs_bytes_usage",
        "ingested_spans_bytes_usage",
        "invocations_usage",
        "lambda_traced_invocations_usage",
        "logs_indexed_15day_usage",
        "logs_indexed_180day_usage",
        "logs_indexed_1day_usage",
        "logs_indexed_30day_usage",
        "logs_indexed_360day_usage",
        "logs_indexed_3day_usage",
        "logs_indexed_45day_usage",
        "logs_indexed_60day_usage",
        "logs_indexed_7day_usage",
        "logs_indexed_90day_usage",
        "logs_indexed_custom_retention_usage",
        "mobile_app_testing_usage",
        "ndm_netflow_usage",
        "npm_host_usage",
        "obs_pipeline_bytes_usage",
        "obs_pipelines_vcpu_usage",
        "online_archive_usage",
        "profiled_container_usage",
        "profiled_fargate_usage",
        "profiled_host_usage",
        "rum_browser_mobile_sessions_usage",
        "rum_replay_sessions_usage",
        "sca_fargate_usage",
        "sds_scanned_bytes_usage",
        "serverless_apps_usage",
        "siem_analyzed_logs_add_on_usage",
        "siem_ingested_bytes_usage",
        "snmp_usage",
        "universal_service_monitoring_usage",
        "vuln_management_hosts_usage",
        "workflow_executions_usage",
    ],
    IFrameWidgetDefinitionType: ["iframe"],
    ImageWidgetDefinitionType: ["image"],
    ListStreamColumnWidth: ["auto", "compact", "full"],
    ListStreamComputeAggregation: [
        "count",
        "cardinality",
        "median",
        "pc75",
        "pc90",
        "pc95",
        "pc98",
        "pc99",
        "sum",
        "min",
        "max",
        "avg",
        "earliest",
        "latest",
        "most_frequent",
    ],
    ListStreamResponseFormat: ["event_list"],
    ListStreamSource: [
        "logs_stream",
        "audit_stream",
        "ci_pipeline_stream",
        "ci_test_stream",
        "rum_issue_stream",
        "apm_issue_stream",
        "trace_stream",
        "logs_issue_stream",
        "logs_pattern_stream",
        "logs_transaction_stream",
        "event_stream",
        "rum_stream",
        "llm_observability_stream",
    ],
    ListStreamWidgetDefinitionType: ["list_stream"],
    LogStreamWidgetDefinitionType: ["log_stream"],
    LogsArithmeticProcessorType: ["arithmetic-processor"],
    LogsAttributeRemapperType: ["attribute-remapper"],
    LogsCategoryProcessorType: ["category-processor"],
    LogsDateRemapperType: ["date-remapper"],
    LogsGeoIPParserType: ["geo-ip-parser"],
    LogsGrokParserType: ["grok-parser"],
    LogsLookupProcessorType: ["lookup-processor"],
    LogsMessageRemapperType: ["message-remapper"],
    LogsPipelineProcessorType: ["pipeline"],
    LogsServiceRemapperType: ["service-remapper"],
    LogsSort: ["asc", "desc"],
    LogsSpanRemapperType: ["span-id-remapper"],
    LogsStatusRemapperType: ["status-remapper"],
    LogsStringBuilderProcessorType: ["string-builder-processor"],
    LogsTraceRemapperType: ["trace-id-remapper"],
    LogsURLParserType: ["url-parser"],
    LogsUserAgentParserType: ["user-agent-parser"],
    MetricContentEncoding: ["deflate", "gzip"],
    MonitorDeviceID: [
        "laptop_large",
        "tablet",
        "mobile_small",
        "chrome.laptop_large",
        "chrome.tablet",
        "chrome.mobile_small",
        "firefox.laptop_large",
        "firefox.tablet",
        "firefox.mobile_small",
    ],
    MonitorFormulaAndFunctionCostAggregator: [
        "avg",
        "sum",
        "max",
        "min",
        "last",
        "area",
        "l2norm",
        "percentile",
        "stddev",
    ],
    MonitorFormulaAndFunctionCostDataSource: [
        "metrics",
        "cloud_cost",
        "datadog_usage",
    ],
    MonitorFormulaAndFunctionEventAggregation: [
        "count",
        "cardinality",
        "median",
        "pc75",
        "pc90",
        "pc95",
        "pc98",
        "pc99",
        "sum",
        "min",
        "max",
        "avg",
    ],
    MonitorFormulaAndFunctionEventsDataSource: [
        "rum",
        "ci_pipelines",
        "ci_tests",
        "audit",
        "events",
        "logs",
        "spans",
        "database_queries",
        "network",
    ],
    MonitorOptionsNotificationPresets: [
        "show_all",
        "hide_query",
        "hide_handles",
        "hide_all",
    ],
    MonitorOverallStates: [
        "Alert",
        "Ignored",
        "No Data",
        "OK",
        "Skipped",
        "Unknown",
        "Warn",
    ],
    MonitorRenotifyStatusType: ["alert", "warn", "no data"],
    MonitorSummaryWidgetDefinitionType: ["manage_status"],
    MonitorType: [
        "composite",
        "event alert",
        "log alert",
        "metric alert",
        "process alert",
        "query alert",
        "rum alert",
        "service check",
        "synthetics alert",
        "trace-analytics alert",
        "slo alert",
        "event-v2 alert",
        "audit alert",
        "ci-pipelines alert",
        "ci-tests alert",
        "error-tracking alert",
        "database-monitoring alert",
        "network-performance alert",
        "cost alert",
    ],
    MonthlyUsageAttributionSupportedMetrics: [
        "api_usage",
        "api_percentage",
        "apm_fargate_usage",
        "apm_fargate_percentage",
        "appsec_fargate_usage",
        "appsec_fargate_percentage",
        "apm_host_usage",
        "apm_host_percentage",
        "apm_usm_usage",
        "apm_usm_percentage",
        "appsec_usage",
        "appsec_percentage",
        "asm_serverless_traced_invocations_usage",
        "asm_serverless_traced_invocations_percentage",
        "browser_usage",
        "browser_percentage",
        "ci_visibility_itr_usage",
        "ci_visibility_itr_percentage",
        "cloud_siem_usage",
        "cloud_siem_percentage",
        "code_security_host_usage",
        "code_security_host_percentage",
        "container_excl_agent_usage",
        "container_excl_agent_percentage",
        "container_usage",
        "container_percentage",
        "cspm_containers_percentage",
        "cspm_containers_usage",
        "cspm_hosts_percentage",
        "cspm_hosts_usage",
        "custom_timeseries_usage",
        "custom_timeseries_percentage",
        "custom_ingested_timeseries_usage",
        "custom_ingested_timeseries_percentage",
        "cws_containers_percentage",
        "cws_containers_usage",
        "cws_fargate_task_percentage",
        "cws_fargate_task_usage",
        "cws_hosts_percentage",
        "cws_hosts_usage",
        "data_jobs_monitoring_usage",
        "data_jobs_monitoring_percentage",
        "data_stream_monitoring_usage",
        "data_stream_monitoring_percentage",
        "dbm_hosts_percentage",
        "dbm_hosts_usage",
        "dbm_queries_percentage",
        "dbm_queries_usage",
        "error_tracking_usage",
        "error_tracking_percentage",
        "estimated_indexed_spans_usage",
        "estimated_indexed_spans_percentage",
        "estimated_ingested_spans_usage",
        "estimated_ingested_spans_percentage",
        "fargate_usage",
        "fargate_percentage",
        "functions_usage",
        "functions_percentage",
        "incident_management_monthly_active_users_usage",
        "incident_management_monthly_active_users_percentage",
        "infra_host_usage",
        "infra_host_percentage",
        "invocations_usage",
        "invocations_percentage",
        "lambda_traced_invocations_usage",
        "lambda_traced_invocations_percentage",
        "mobile_app_testing_percentage",
        "mobile_app_testing_usage",
        "ndm_netflow_usage",
        "ndm_netflow_percentage",
        "npm_host_usage",
        "npm_host_percentage",
        "obs_pipeline_bytes_usage",
        "obs_pipeline_bytes_percentage",
        "obs_pipelines_vcpu_usage",
        "obs_pipelines_vcpu_percentage",
        "online_archive_usage",
        "online_archive_percentage",
        "profiled_container_usage",
        "profiled_container_percentage",
        "profiled_fargate_usage",
        "profiled_fargate_percentage",
        "profiled_host_usage",
        "profiled_host_percentage",
        "serverless_apps_usage",
        "serverless_apps_percentage",
        "snmp_usage",
        "snmp_percentage",
        "universal_service_monitoring_usage",
        "universal_service_monitoring_percentage",
        "vuln_management_hosts_usage",
        "vuln_management_hosts_percentage",
        "sds_scanned_bytes_usage",
        "sds_scanned_bytes_percentage",
        "ci_test_indexed_spans_usage",
        "ci_test_indexed_spans_percentage",
        "ingested_logs_bytes_usage",
        "ingested_logs_bytes_percentage",
        "ci_pipeline_indexed_spans_usage",
        "ci_pipeline_indexed_spans_percentage",
        "indexed_spans_usage",
        "indexed_spans_percentage",
        "custom_event_usage",
        "custom_event_percentage",
        "logs_indexed_custom_retention_usage",
        "logs_indexed_custom_retention_percentage",
        "logs_indexed_360day_usage",
        "logs_indexed_360day_percentage",
        "logs_indexed_180day_usage",
        "logs_indexed_180day_percentage",
        "logs_indexed_90day_usage",
        "logs_indexed_90day_percentage",
        "logs_indexed_60day_usage",
        "logs_indexed_60day_percentage",
        "logs_indexed_45day_usage",
        "logs_indexed_45day_percentage",
        "logs_indexed_30day_usage",
        "logs_indexed_30day_percentage",
        "logs_indexed_15day_usage",
        "logs_indexed_15day_percentage",
        "logs_indexed_7day_usage",
        "logs_indexed_7day_percentage",
        "logs_indexed_3day_usage",
        "logs_indexed_3day_percentage",
        "logs_indexed_1day_usage",
        "logs_indexed_1day_percentage",
        "rum_replay_sessions_usage",
        "rum_replay_sessions_percentage",
        "rum_browser_mobile_sessions_usage",
        "rum_browser_mobile_sessions_percentage",
        "ingested_spans_bytes_usage",
        "ingested_spans_bytes_percentage",
        "siem_analyzed_logs_add_on_usage",
        "siem_analyzed_logs_add_on_percentage",
        "siem_ingested_bytes_usage",
        "siem_ingested_bytes_percentage",
        "workflow_executions_usage",
        "workflow_executions_percentage",
        "sca_fargate_usage",
        "sca_fargate_percentage",
        "*",
    ],
    NoteWidgetDefinitionType: ["note"],
    NotebookCellResourceType: ["notebook_cells"],
    NotebookGraphSize: ["xs", "s", "m", "l", "xl"],
    NotebookMarkdownCellDefinitionType: ["markdown"],
    NotebookMetadataType: [
        "postmortem",
        "runbook",
        "investigation",
        "documentation",
        "report",
    ],
    NotebookResourceType: ["notebooks"],
    NotebookStatus: ["published"],
    NotifyEndState: ["alert", "no data", "warn"],
    NotifyEndType: ["canceled", "expired"],
    NumberFormatUnitCustomType: ["custom_unit_label"],
    NumberFormatUnitScaleType: ["canonical_unit"],
    OnMissingDataOption: [
        "default",
        "show_no_data",
        "show_and_notify_no_data",
        "resolve",
    ],
    PowerpackWidgetDefinitionType: ["powerpack"],
    QuerySortOrder: ["asc", "desc"],
    QueryValueWidgetDefinitionType: ["query_value"],
    RunWorkflowWidgetDefinitionType: ["run_workflow"],
    SLOCorrectionCategory: [
        "Scheduled Maintenance",
        "Outside Business Hours",
        "Deployment",
        "Other",
    ],
    SLOCorrectionType: ["correction"],
    SLOErrorTimeframe: ["7d", "30d", "90d", "all"],
    SLOListWidgetDefinitionType: ["slo_list"],
    SLOListWidgetRequestType: ["slo_list"],
    SLOState: ["breached", "warning", "ok", "no_data"],
    SLOTimeSliceComparator: [">", ">=", "<", "<="],
    SLOTimeSliceInterval: [60, 300],
    SLOTimeframe: ["7d", "30d", "90d", "custom"],
    SLOType: ["metric", "monitor", "time_slice"],
    SLOTypeNumeric: [0, 1, 2],
    SLOWidgetDefinitionType: ["slo"],
    ScatterPlotWidgetDefinitionType: ["scatterplot"],
    ScatterplotDimension: ["x", "y", "radius", "color"],
    ScatterplotWidgetAggregator: ["avg", "last", "max", "min", "sum"],
    SearchSLOTimeframe: ["7d", "30d", "90d"],
    ServiceCheckStatus: [0, 1, 2, 3],
    ServiceMapWidgetDefinitionType: ["servicemap"],
    ServiceSummaryWidgetDefinitionType: ["trace_service"],
    SharedDashboardStatus: ["active", "paused"],
    SignalArchiveReason: [
        "none",
        "false_positive",
        "testing_or_maintenance",
        "investigated_case_opened",
        "true_positive_benign",
        "true_positive_malicious",
        "other",
    ],
    SignalTriageState: ["open", "archived", "under_review"],
    SplitGraphVizSize: ["xs", "sm", "md", "lg"],
    SplitGraphWidgetDefinitionType: ["split_group"],
    SunburstWidgetDefinitionType: ["sunburst"],
    SunburstWidgetLegendInlineAutomaticType: ["inline", "automatic"],
    SunburstWidgetLegendTableType: ["table", "none"],
    SyntheticsAPITestStepSubtype: ["http", "grpc"],
    SyntheticsAPITestType: ["api"],
    SyntheticsAPIWaitStepSubtype: ["wait"],
    SyntheticsApiTestFailureCode: [
        "BODY_TOO_LARGE",
        "DENIED",
        "TOO_MANY_REDIRECTS",
        "AUTHENTICATION_ERROR",
        "DECRYPTION",
        "INVALID_CHAR_IN_HEADER",
        "HEADER_TOO_LARGE",
        "HEADERS_INCOMPATIBLE_CONTENT_LENGTH",
        "INVALID_REQUEST",
        "REQUIRES_UPDATE",
        "UNESCAPED_CHARACTERS_IN_REQUEST_PATH",
        "MALFORMED_RESPONSE",
        "INCORRECT_ASSERTION",
        "CONNREFUSED",
        "CONNRESET",
        "DNS",
        "HOSTUNREACH",
        "NETUNREACH",
        "TIMEOUT",
        "SSL",
        "OCSP",
        "INVALID_TEST",
        "TUNNEL",
        "WEBSOCKET",
        "UNKNOWN",
        "INTERNAL_ERROR",
    ],
    SyntheticsAssertionBodyHashOperator: ["md5", "sha1", "sha256"],
    SyntheticsAssertionBodyHashType: ["bodyHash"],
    SyntheticsAssertionJSONPathOperator: ["validatesJSONPath"],
    SyntheticsAssertionJSONSchemaMetaSchema: ["draft-07", "draft-06"],
    SyntheticsAssertionJSONSchemaOperator: ["validatesJSONSchema"],
    SyntheticsAssertionJavascriptType: ["javascript"],
    SyntheticsAssertionOperator: [
        "contains",
        "doesNotContain",
        "is",
        "isNot",
        "lessThan",
        "lessThanOrEqual",
        "moreThan",
        "moreThanOrEqual",
        "matches",
        "doesNotMatch",
        "validates",
        "isInMoreThan",
        "isInLessThan",
        "doesNotExist",
        "isUndefined",
    ],
    SyntheticsAssertionTimingsScope: ["all", "withoutDNS"],
    SyntheticsAssertionType: [
        "body",
        "header",
        "statusCode",
        "certificate",
        "responseTime",
        "property",
        "recordEvery",
        "recordSome",
        "tlsVersion",
        "minTlsVersion",
        "latency",
        "packetLossPercentage",
        "packetsReceived",
        "networkHop",
        "receivedMessage",
        "grpcHealthcheckStatus",
        "grpcMetadata",
        "grpcProto",
        "connection",
    ],
    SyntheticsAssertionXPathOperator: ["validatesXPath"],
    SyntheticsBasicAuthDigestType: ["digest"],
    SyntheticsBasicAuthNTLMType: ["ntlm"],
    SyntheticsBasicAuthOauthClientType: ["oauth-client"],
    SyntheticsBasicAuthOauthROPType: ["oauth-rop"],
    SyntheticsBasicAuthOauthTokenApiAuthentication: ["header", "body"],
    SyntheticsBasicAuthSigv4Type: ["sigv4"],
    SyntheticsBasicAuthWebType: ["web"],
    SyntheticsBatchStatus: ["passed", "skipped", "failed"],
    SyntheticsBrowserErrorType: ["network", "js"],
    SyntheticsBrowserTestFailureCode: [
        "API_REQUEST_FAILURE",
        "ASSERTION_FAILURE",
        "DOWNLOAD_FILE_TOO_LARGE",
        "ELEMENT_NOT_INTERACTABLE",
        "EMAIL_VARIABLE_NOT_DEFINED",
        "EVALUATE_JAVASCRIPT",
        "EVALUATE_JAVASCRIPT_CONTEXT",
        "EXTRACT_VARIABLE",
        "FORBIDDEN_URL",
        "FRAME_DETACHED",
        "INCONSISTENCIES",
        "INTERNAL_ERROR",
        "INVALID_TYPE_TEXT_DELAY",
        "INVALID_URL",
        "INVALID_VARIABLE_PATTERN",
        "INVISIBLE_ELEMENT",
        "LOCATE_ELEMENT",
        "NAVIGATE_TO_LINK",
        "OPEN_URL",
        "PRESS_KEY",
        "SERVER_CERTIFICATE",
        "SELECT_OPTION",
        "STEP_TIMEOUT",
        "SUB_TEST_NOT_PASSED",
        "TEST_TIMEOUT",
        "TOO_MANY_HTTP_REQUESTS",
        "UNAVAILABLE_BROWSER",
        "UNKNOWN",
        "UNSUPPORTED_AUTH_SCHEMA",
        "UPLOAD_FILES_ELEMENT_TYPE",
        "UPLOAD_FILES_DIALOG",
        "UPLOAD_FILES_DYNAMIC_ELEMENT",
        "UPLOAD_FILES_NAME",
    ],
    SyntheticsBrowserTestType: ["browser"],
    SyntheticsBrowserVariableType: ["element", "email", "global", "text"],
    SyntheticsCheckType: [
        "equals",
        "notEquals",
        "contains",
        "notContains",
        "startsWith",
        "notStartsWith",
        "greater",
        "lower",
        "greaterEquals",
        "lowerEquals",
        "matchRegex",
        "between",
        "isEmpty",
        "notIsEmpty",
    ],
    SyntheticsConfigVariableType: ["global", "text", "email"],
    SyntheticsGlobalVariableParseTestOptionsType: [
        "http_body",
        "http_header",
        "http_status_code",
        "local_variable",
    ],
    SyntheticsGlobalVariableParserType: ["raw", "json_path", "regex", "x_path"],
    SyntheticsLocalVariableParsingOptionsType: [
        "grpc_message",
        "grpc_metadata",
        "http_body",
        "http_header",
        "http_status_code",
    ],
    SyntheticsMobileStepParamsDirection: ["up", "down", "left", "right"],
    SyntheticsMobileStepParamsElementContextType: ["native", "web"],
    SyntheticsMobileStepParamsElementUserLocatorValuesItemsType: [
        "accessibility-id",
        "id",
        "ios-predicate-string",
        "ios-class-chain",
        "xpath",
    ],
    SyntheticsMobileStepType: [
        "assertElementContent",
        "assertScreenContains",
        "assertScreenLacks",
        "doubleTap",
        "extractVariable",
        "flick",
        "openDeeplink",
        "playSubTest",
        "pressBack",
        "restartApplication",
        "rotate",
        "scroll",
        "scrollToElement",
        "tap",
        "toggleWiFi",
        "typeText",
        "wait",
    ],
    SyntheticsMobileTestType: ["mobile"],
    SyntheticsMobileTestsMobileApplicationReferenceType: ["latest", "version"],
    SyntheticsPatchTestOperationName: [
        "add",
        "remove",
        "replace",
        "move",
        "copy",
        "test",
    ],
    SyntheticsPlayingTab: [-1, 0, 1, 2, 3],
    SyntheticsStepType: [
        "assertCurrentUrl",
        "assertElementAttribute",
        "assertElementContent",
        "assertElementPresent",
        "assertEmail",
        "assertFileDownload",
        "assertFromJavascript",
        "assertPageContains",
        "assertPageLacks",
        "assertRequests",
        "click",
        "extractFromJavascript",
        "extractVariable",
        "goToEmailLink",
        "goToUrl",
        "goToUrlAndMeasureTti",
        "hover",
        "playSubTest",
        "pressKey",
        "refresh",
        "runApiTest",
        "scroll",
        "selectOption",
        "typeText",
        "uploadFiles",
        "wait",
    ],
    SyntheticsTestCallType: ["healthcheck", "unary"],
    SyntheticsTestDetailsSubType: [
        "http",
        "ssl",
        "tcp",
        "dns",
        "multi",
        "icmp",
        "udp",
        "websocket",
        "grpc",
    ],
    SyntheticsTestDetailsType: ["api", "browser", "mobile"],
    SyntheticsTestExecutionRule: ["blocking", "non_blocking", "skipped"],
    SyntheticsTestMonitorStatus: [0, 1, 2],
    SyntheticsTestOptionsHTTPVersion: ["http1", "http2", "any"],
    SyntheticsTestOptionsMonitorOptionsNotificationPresetName: [
        "show_all",
        "hide_all",
        "hide_query",
        "hide_handles",
    ],
    SyntheticsTestPauseStatus: ["live", "paused"],
    SyntheticsTestProcessStatus: [
        "not_scheduled",
        "scheduled",
        "finished",
        "finished_with_error",
    ],
    SyntheticsTestRequestBodyType: [
        "text/plain",
        "application/json",
        "text/xml",
        "text/html",
        "application/x-www-form-urlencoded",
        "graphql",
        "application/octet-stream",
        "multipart/form-data",
    ],
    SyntheticsTestRestrictionPolicyBindingRelation: ["editor", "viewer"],
    SyntheticsWarningType: ["user_locator"],
    TableWidgetCellDisplayMode: ["number", "bar", "trend"],
    TableWidgetDefinitionType: ["query_table"],
    TableWidgetHasSearchBar: ["always", "never", "auto"],
    TableWidgetTextFormatMatchType: [
        "is",
        "is_not",
        "contains",
        "does_not_contain",
        "starts_with",
        "ends_with",
    ],
    TableWidgetTextFormatPalette: [
        "white_on_red",
        "white_on_yellow",
        "white_on_green",
        "black_on_light_red",
        "black_on_light_yellow",
        "black_on_light_green",
        "red_on_white",
        "yellow_on_white",
        "green_on_white",
        "custom_bg",
        "custom_text",
    ],
    TableWidgetTextFormatReplaceAllType: ["all"],
    TableWidgetTextFormatReplaceSubstringType: ["substring"],
    TargetFormatType: ["auto", "string", "integer", "double"],
    TimeseriesBackgroundType: ["bars", "area"],
    TimeseriesWidgetDefinitionType: ["timeseries"],
    TimeseriesWidgetLegendColumn: ["value", "avg", "sum", "min", "max"],
    TimeseriesWidgetLegendLayout: ["auto", "horizontal", "vertical"],
    ToplistWidgetDefinitionType: ["toplist"],
    ToplistWidgetFlatType: ["flat"],
    ToplistWidgetLegend: ["automatic", "inline", "none"],
    ToplistWidgetScaling: ["absolute", "relative"],
    ToplistWidgetStackedType: ["stacked"],
    TopologyMapWidgetDefinitionType: ["topology_map"],
    TopologyQueryDataSource: ["data_streams", "service_map"],
    TopologyRequestType: ["topology"],
    TreeMapColorBy: ["user"],
    TreeMapGroupBy: ["user", "family", "process"],
    TreeMapSizeBy: ["pct_cpu", "pct_mem"],
    TreeMapWidgetDefinitionType: ["treemap"],
    UsageMetricCategory: ["standard", "custom"],
    UsageReportsType: ["reports"],
    UsageSort: ["computed_on", "size", "start_date", "end_date"],
    UsageSortDirection: ["desc", "asc"],
    ViewingPreferencesTheme: ["system", "light", "dark"],
    WebhooksIntegrationEncoding: ["json", "form"],
    WidgetAggregator: ["avg", "last", "max", "min", "sum", "percentile"],
    WidgetChangeType: ["absolute", "relative"],
    WidgetColorPreference: ["background", "text"],
    WidgetComparator: ["=", ">", ">=", "<", "<="],
    WidgetCompareTo: ["hour_before", "day_before", "week_before", "month_before"],
    WidgetDisplayType: ["area", "bars", "line", "overlay"],
    WidgetEventSize: ["s", "l"],
    WidgetFormulaCellDisplayModeOptionsTrendType: ["area", "line", "bars"],
    WidgetFormulaCellDisplayModeOptionsYScale: ["shared", "independent"],
    WidgetGrouping: ["check", "cluster"],
    WidgetHorizontalAlign: ["center", "left", "right"],
    WidgetImageSizing: [
        "fill",
        "contain",
        "cover",
        "none",
        "scale-down",
        "zoom",
        "fit",
        "center",
    ],
    WidgetLayoutType: ["ordered"],
    WidgetLineType: ["dashed", "dotted", "solid"],
    WidgetLineWidth: ["normal", "thick", "thin"],
    WidgetLiveSpan: [
        "1m",
        "5m",
        "10m",
        "15m",
        "30m",
        "1h",
        "4h",
        "1d",
        "2d",
        "1w",
        "1mo",
        "3mo",
        "6mo",
        "week_to_date",
        "month_to_date",
        "1y",
        "alert",
    ],
    WidgetLiveSpanUnit: ["minute", "hour", "day", "week", "month", "year"],
    WidgetMargin: ["sm", "md", "lg", "small", "large"],
    WidgetMessageDisplay: ["inline", "expanded-md", "expanded-lg"],
    WidgetMonitorSummaryDisplayFormat: ["counts", "countsAndList", "list"],
    WidgetMonitorSummarySort: [
        "name",
        "group",
        "status",
        "tags",
        "triggered",
        "group,asc",
        "group,desc",
        "name,asc",
        "name,desc",
        "status,asc",
        "status,desc",
        "tags,asc",
        "tags,desc",
        "triggered,asc",
        "triggered,desc",
        "priority,asc",
        "priority,desc",
    ],
    WidgetNewFixedSpanType: ["fixed"],
    WidgetNewLiveSpanType: ["live"],
    WidgetNodeType: ["host", "container"],
    WidgetOrderBy: ["change", "name", "present", "past"],
    WidgetPalette: [
        "blue",
        "custom_bg",
        "custom_image",
        "custom_text",
        "gray_on_white",
        "grey",
        "green",
        "orange",
        "red",
        "red_on_white",
        "white_on_gray",
        "white_on_green",
        "green_on_white",
        "white_on_red",
        "white_on_yellow",
        "yellow_on_white",
        "black_on_light_yellow",
        "black_on_light_green",
        "black_on_light_red",
    ],
    WidgetServiceSummaryDisplayFormat: [
        "one_column",
        "two_column",
        "three_column",
    ],
    WidgetSizeFormat: ["small", "medium", "large"],
    WidgetSort: ["asc", "desc"],
    WidgetSummaryType: ["monitors", "groups", "combined"],
    WidgetTextAlign: ["center", "left", "right"],
    WidgetTickEdge: ["bottom", "left", "right", "top"],
    WidgetTimeWindows: [
        "7d",
        "30d",
        "90d",
        "week_to_date",
        "previous_week",
        "month_to_date",
        "previous_month",
        "global_time",
    ],
    WidgetVerticalAlign: ["center", "top", "bottom"],
    WidgetViewMode: ["overall", "component", "both"],
    WidgetVizType: ["timeseries", "toplist"],
};
const typeMap = {
    APIErrorResponse: APIErrorResponse_1.APIErrorResponse,
    AWSAccount: AWSAccount_1.AWSAccount,
    AWSAccountAndLambdaRequest: AWSAccountAndLambdaRequest_1.AWSAccountAndLambdaRequest,
    AWSAccountCreateResponse: AWSAccountCreateResponse_1.AWSAccountCreateResponse,
    AWSAccountDeleteRequest: AWSAccountDeleteRequest_1.AWSAccountDeleteRequest,
    AWSAccountListResponse: AWSAccountListResponse_1.AWSAccountListResponse,
    AWSEventBridgeAccountConfiguration: AWSEventBridgeAccountConfiguration_1.AWSEventBridgeAccountConfiguration,
    AWSEventBridgeCreateRequest: AWSEventBridgeCreateRequest_1.AWSEventBridgeCreateRequest,
    AWSEventBridgeCreateResponse: AWSEventBridgeCreateResponse_1.AWSEventBridgeCreateResponse,
    AWSEventBridgeDeleteRequest: AWSEventBridgeDeleteRequest_1.AWSEventBridgeDeleteRequest,
    AWSEventBridgeDeleteResponse: AWSEventBridgeDeleteResponse_1.AWSEventBridgeDeleteResponse,
    AWSEventBridgeListResponse: AWSEventBridgeListResponse_1.AWSEventBridgeListResponse,
    AWSEventBridgeSource: AWSEventBridgeSource_1.AWSEventBridgeSource,
    AWSLogsAsyncError: AWSLogsAsyncError_1.AWSLogsAsyncError,
    AWSLogsAsyncResponse: AWSLogsAsyncResponse_1.AWSLogsAsyncResponse,
    AWSLogsLambda: AWSLogsLambda_1.AWSLogsLambda,
    AWSLogsListResponse: AWSLogsListResponse_1.AWSLogsListResponse,
    AWSLogsListServicesResponse: AWSLogsListServicesResponse_1.AWSLogsListServicesResponse,
    AWSLogsServicesRequest: AWSLogsServicesRequest_1.AWSLogsServicesRequest,
    AWSTagFilter: AWSTagFilter_1.AWSTagFilter,
    AWSTagFilterCreateRequest: AWSTagFilterCreateRequest_1.AWSTagFilterCreateRequest,
    AWSTagFilterDeleteRequest: AWSTagFilterDeleteRequest_1.AWSTagFilterDeleteRequest,
    AWSTagFilterListResponse: AWSTagFilterListResponse_1.AWSTagFilterListResponse,
    AddSignalToIncidentRequest: AddSignalToIncidentRequest_1.AddSignalToIncidentRequest,
    AlertGraphWidgetDefinition: AlertGraphWidgetDefinition_1.AlertGraphWidgetDefinition,
    AlertValueWidgetDefinition: AlertValueWidgetDefinition_1.AlertValueWidgetDefinition,
    ApiKey: ApiKey_1.ApiKey,
    ApiKeyListResponse: ApiKeyListResponse_1.ApiKeyListResponse,
    ApiKeyResponse: ApiKeyResponse_1.ApiKeyResponse,
    ApmStatsQueryColumnType: ApmStatsQueryColumnType_1.ApmStatsQueryColumnType,
    ApmStatsQueryDefinition: ApmStatsQueryDefinition_1.ApmStatsQueryDefinition,
    ApplicationKey: ApplicationKey_1.ApplicationKey,
    ApplicationKeyListResponse: ApplicationKeyListResponse_1.ApplicationKeyListResponse,
    ApplicationKeyResponse: ApplicationKeyResponse_1.ApplicationKeyResponse,
    AuthenticationValidationResponse: AuthenticationValidationResponse_1.AuthenticationValidationResponse,
    AzureAccount: AzureAccount_1.AzureAccount,
    CancelDowntimesByScopeRequest: CancelDowntimesByScopeRequest_1.CancelDowntimesByScopeRequest,
    CanceledDowntimesIds: CanceledDowntimesIds_1.CanceledDowntimesIds,
    ChangeWidgetDefinition: ChangeWidgetDefinition_1.ChangeWidgetDefinition,
    ChangeWidgetRequest: ChangeWidgetRequest_1.ChangeWidgetRequest,
    CheckCanDeleteMonitorResponse: CheckCanDeleteMonitorResponse_1.CheckCanDeleteMonitorResponse,
    CheckCanDeleteMonitorResponseData: CheckCanDeleteMonitorResponseData_1.CheckCanDeleteMonitorResponseData,
    CheckCanDeleteSLOResponse: CheckCanDeleteSLOResponse_1.CheckCanDeleteSLOResponse,
    CheckCanDeleteSLOResponseData: CheckCanDeleteSLOResponseData_1.CheckCanDeleteSLOResponseData,
    CheckStatusWidgetDefinition: CheckStatusWidgetDefinition_1.CheckStatusWidgetDefinition,
    Creator: Creator_1.Creator,
    Dashboard: Dashboard_1.Dashboard,
    DashboardBulkActionData: DashboardBulkActionData_1.DashboardBulkActionData,
    DashboardBulkDeleteRequest: DashboardBulkDeleteRequest_1.DashboardBulkDeleteRequest,
    DashboardDeleteResponse: DashboardDeleteResponse_1.DashboardDeleteResponse,
    DashboardGlobalTime: DashboardGlobalTime_1.DashboardGlobalTime,
    DashboardList: DashboardList_1.DashboardList,
    DashboardListDeleteResponse: DashboardListDeleteResponse_1.DashboardListDeleteResponse,
    DashboardListListResponse: DashboardListListResponse_1.DashboardListListResponse,
    DashboardRestoreRequest: DashboardRestoreRequest_1.DashboardRestoreRequest,
    DashboardSummary: DashboardSummary_1.DashboardSummary,
    DashboardSummaryDefinition: DashboardSummaryDefinition_1.DashboardSummaryDefinition,
    DashboardTemplateVariable: DashboardTemplateVariable_1.DashboardTemplateVariable,
    DashboardTemplateVariablePreset: DashboardTemplateVariablePreset_1.DashboardTemplateVariablePreset,
    DashboardTemplateVariablePresetValue: DashboardTemplateVariablePresetValue_1.DashboardTemplateVariablePresetValue,
    DeleteSharedDashboardResponse: DeleteSharedDashboardResponse_1.DeleteSharedDashboardResponse,
    DeletedMonitor: DeletedMonitor_1.DeletedMonitor,
    DistributionPointsPayload: DistributionPointsPayload_1.DistributionPointsPayload,
    DistributionPointsSeries: DistributionPointsSeries_1.DistributionPointsSeries,
    DistributionWidgetDefinition: DistributionWidgetDefinition_1.DistributionWidgetDefinition,
    DistributionWidgetRequest: DistributionWidgetRequest_1.DistributionWidgetRequest,
    DistributionWidgetXAxis: DistributionWidgetXAxis_1.DistributionWidgetXAxis,
    DistributionWidgetYAxis: DistributionWidgetYAxis_1.DistributionWidgetYAxis,
    Downtime: Downtime_1.Downtime,
    DowntimeChild: DowntimeChild_1.DowntimeChild,
    DowntimeRecurrence: DowntimeRecurrence_1.DowntimeRecurrence,
    Event: Event_1.Event,
    EventCreateRequest: EventCreateRequest_1.EventCreateRequest,
    EventCreateResponse: EventCreateResponse_1.EventCreateResponse,
    EventListResponse: EventListResponse_1.EventListResponse,
    EventQueryDefinition: EventQueryDefinition_1.EventQueryDefinition,
    EventResponse: EventResponse_1.EventResponse,
    EventStreamWidgetDefinition: EventStreamWidgetDefinition_1.EventStreamWidgetDefinition,
    EventTimelineWidgetDefinition: EventTimelineWidgetDefinition_1.EventTimelineWidgetDefinition,
    FormulaAndFunctionApmDependencyStatsQueryDefinition: FormulaAndFunctionApmDependencyStatsQueryDefinition_1.FormulaAndFunctionApmDependencyStatsQueryDefinition,
    FormulaAndFunctionApmResourceStatsQueryDefinition: FormulaAndFunctionApmResourceStatsQueryDefinition_1.FormulaAndFunctionApmResourceStatsQueryDefinition,
    FormulaAndFunctionCloudCostQueryDefinition: FormulaAndFunctionCloudCostQueryDefinition_1.FormulaAndFunctionCloudCostQueryDefinition,
    FormulaAndFunctionEventQueryDefinition: FormulaAndFunctionEventQueryDefinition_1.FormulaAndFunctionEventQueryDefinition,
    FormulaAndFunctionEventQueryDefinitionCompute: FormulaAndFunctionEventQueryDefinitionCompute_1.FormulaAndFunctionEventQueryDefinitionCompute,
    FormulaAndFunctionEventQueryDefinitionSearch: FormulaAndFunctionEventQueryDefinitionSearch_1.FormulaAndFunctionEventQueryDefinitionSearch,
    FormulaAndFunctionEventQueryGroupBy: FormulaAndFunctionEventQueryGroupBy_1.FormulaAndFunctionEventQueryGroupBy,
    FormulaAndFunctionEventQueryGroupBySort: FormulaAndFunctionEventQueryGroupBySort_1.FormulaAndFunctionEventQueryGroupBySort,
    FormulaAndFunctionMetricQueryDefinition: FormulaAndFunctionMetricQueryDefinition_1.FormulaAndFunctionMetricQueryDefinition,
    FormulaAndFunctionProcessQueryDefinition: FormulaAndFunctionProcessQueryDefinition_1.FormulaAndFunctionProcessQueryDefinition,
    FormulaAndFunctionSLOQueryDefinition: FormulaAndFunctionSLOQueryDefinition_1.FormulaAndFunctionSLOQueryDefinition,
    FreeTextWidgetDefinition: FreeTextWidgetDefinition_1.FreeTextWidgetDefinition,
    FunnelQuery: FunnelQuery_1.FunnelQuery,
    FunnelStep: FunnelStep_1.FunnelStep,
    FunnelWidgetDefinition: FunnelWidgetDefinition_1.FunnelWidgetDefinition,
    FunnelWidgetRequest: FunnelWidgetRequest_1.FunnelWidgetRequest,
    GCPAccount: GCPAccount_1.GCPAccount,
    GeomapWidgetDefinition: GeomapWidgetDefinition_1.GeomapWidgetDefinition,
    GeomapWidgetDefinitionStyle: GeomapWidgetDefinitionStyle_1.GeomapWidgetDefinitionStyle,
    GeomapWidgetDefinitionView: GeomapWidgetDefinitionView_1.GeomapWidgetDefinitionView,
    GeomapWidgetRequest: GeomapWidgetRequest_1.GeomapWidgetRequest,
    GraphSnapshot: GraphSnapshot_1.GraphSnapshot,
    GroupWidgetDefinition: GroupWidgetDefinition_1.GroupWidgetDefinition,
    HTTPLogError: HTTPLogError_1.HTTPLogError,
    HTTPLogItem: HTTPLogItem_1.HTTPLogItem,
    HeatMapWidgetDefinition: HeatMapWidgetDefinition_1.HeatMapWidgetDefinition,
    HeatMapWidgetRequest: HeatMapWidgetRequest_1.HeatMapWidgetRequest,
    Host: Host_1.Host,
    HostListResponse: HostListResponse_1.HostListResponse,
    HostMapRequest: HostMapRequest_1.HostMapRequest,
    HostMapWidgetDefinition: HostMapWidgetDefinition_1.HostMapWidgetDefinition,
    HostMapWidgetDefinitionRequests: HostMapWidgetDefinitionRequests_1.HostMapWidgetDefinitionRequests,
    HostMapWidgetDefinitionStyle: HostMapWidgetDefinitionStyle_1.HostMapWidgetDefinitionStyle,
    HostMeta: HostMeta_1.HostMeta,
    HostMetaInstallMethod: HostMetaInstallMethod_1.HostMetaInstallMethod,
    HostMetrics: HostMetrics_1.HostMetrics,
    HostMuteResponse: HostMuteResponse_1.HostMuteResponse,
    HostMuteSettings: HostMuteSettings_1.HostMuteSettings,
    HostTags: HostTags_1.HostTags,
    HostTotals: HostTotals_1.HostTotals,
    HourlyUsageAttributionBody: HourlyUsageAttributionBody_1.HourlyUsageAttributionBody,
    HourlyUsageAttributionMetadata: HourlyUsageAttributionMetadata_1.HourlyUsageAttributionMetadata,
    HourlyUsageAttributionPagination: HourlyUsageAttributionPagination_1.HourlyUsageAttributionPagination,
    HourlyUsageAttributionResponse: HourlyUsageAttributionResponse_1.HourlyUsageAttributionResponse,
    IFrameWidgetDefinition: IFrameWidgetDefinition_1.IFrameWidgetDefinition,
    IPPrefixesAPI: IPPrefixesAPI_1.IPPrefixesAPI,
    IPPrefixesAPM: IPPrefixesAPM_1.IPPrefixesAPM,
    IPPrefixesAgents: IPPrefixesAgents_1.IPPrefixesAgents,
    IPPrefixesGlobal: IPPrefixesGlobal_1.IPPrefixesGlobal,
    IPPrefixesLogs: IPPrefixesLogs_1.IPPrefixesLogs,
    IPPrefixesOrchestrator: IPPrefixesOrchestrator_1.IPPrefixesOrchestrator,
    IPPrefixesProcess: IPPrefixesProcess_1.IPPrefixesProcess,
    IPPrefixesRemoteConfiguration: IPPrefixesRemoteConfiguration_1.IPPrefixesRemoteConfiguration,
    IPPrefixesSynthetics: IPPrefixesSynthetics_1.IPPrefixesSynthetics,
    IPPrefixesSyntheticsPrivateLocations: IPPrefixesSyntheticsPrivateLocations_1.IPPrefixesSyntheticsPrivateLocations,
    IPPrefixesWebhooks: IPPrefixesWebhooks_1.IPPrefixesWebhooks,
    IPRanges: IPRanges_1.IPRanges,
    IdpFormData: IdpFormData_1.IdpFormData,
    IdpResponse: IdpResponse_1.IdpResponse,
    ImageWidgetDefinition: ImageWidgetDefinition_1.ImageWidgetDefinition,
    IntakePayloadAccepted: IntakePayloadAccepted_1.IntakePayloadAccepted,
    ListStreamColumn: ListStreamColumn_1.ListStreamColumn,
    ListStreamComputeItems: ListStreamComputeItems_1.ListStreamComputeItems,
    ListStreamGroupByItems: ListStreamGroupByItems_1.ListStreamGroupByItems,
    ListStreamQuery: ListStreamQuery_1.ListStreamQuery,
    ListStreamWidgetDefinition: ListStreamWidgetDefinition_1.ListStreamWidgetDefinition,
    ListStreamWidgetRequest: ListStreamWidgetRequest_1.ListStreamWidgetRequest,
    Log: Log_1.Log,
    LogContent: LogContent_1.LogContent,
    LogQueryDefinition: LogQueryDefinition_1.LogQueryDefinition,
    LogQueryDefinitionGroupBy: LogQueryDefinitionGroupBy_1.LogQueryDefinitionGroupBy,
    LogQueryDefinitionGroupBySort: LogQueryDefinitionGroupBySort_1.LogQueryDefinitionGroupBySort,
    LogQueryDefinitionSearch: LogQueryDefinitionSearch_1.LogQueryDefinitionSearch,
    LogStreamWidgetDefinition: LogStreamWidgetDefinition_1.LogStreamWidgetDefinition,
    LogsAPIError: LogsAPIError_1.LogsAPIError,
    LogsAPIErrorResponse: LogsAPIErrorResponse_1.LogsAPIErrorResponse,
    LogsArithmeticProcessor: LogsArithmeticProcessor_1.LogsArithmeticProcessor,
    LogsAttributeRemapper: LogsAttributeRemapper_1.LogsAttributeRemapper,
    LogsByRetention: LogsByRetention_1.LogsByRetention,
    LogsByRetentionMonthlyUsage: LogsByRetentionMonthlyUsage_1.LogsByRetentionMonthlyUsage,
    LogsByRetentionOrgUsage: LogsByRetentionOrgUsage_1.LogsByRetentionOrgUsage,
    LogsByRetentionOrgs: LogsByRetentionOrgs_1.LogsByRetentionOrgs,
    LogsCategoryProcessor: LogsCategoryProcessor_1.LogsCategoryProcessor,
    LogsCategoryProcessorCategory: LogsCategoryProcessorCategory_1.LogsCategoryProcessorCategory,
    LogsDailyLimitReset: LogsDailyLimitReset_1.LogsDailyLimitReset,
    LogsDateRemapper: LogsDateRemapper_1.LogsDateRemapper,
    LogsExclusion: LogsExclusion_1.LogsExclusion,
    LogsExclusionFilter: LogsExclusionFilter_1.LogsExclusionFilter,
    LogsFilter: LogsFilter_1.LogsFilter,
    LogsGeoIPParser: LogsGeoIPParser_1.LogsGeoIPParser,
    LogsGrokParser: LogsGrokParser_1.LogsGrokParser,
    LogsGrokParserRules: LogsGrokParserRules_1.LogsGrokParserRules,
    LogsIndex: LogsIndex_1.LogsIndex,
    LogsIndexListResponse: LogsIndexListResponse_1.LogsIndexListResponse,
    LogsIndexUpdateRequest: LogsIndexUpdateRequest_1.LogsIndexUpdateRequest,
    LogsIndexesOrder: LogsIndexesOrder_1.LogsIndexesOrder,
    LogsListRequest: LogsListRequest_1.LogsListRequest,
    LogsListRequestTime: LogsListRequestTime_1.LogsListRequestTime,
    LogsListResponse: LogsListResponse_1.LogsListResponse,
    LogsLookupProcessor: LogsLookupProcessor_1.LogsLookupProcessor,
    LogsMessageRemapper: LogsMessageRemapper_1.LogsMessageRemapper,
    LogsPipeline: LogsPipeline_1.LogsPipeline,
    LogsPipelineProcessor: LogsPipelineProcessor_1.LogsPipelineProcessor,
    LogsPipelinesOrder: LogsPipelinesOrder_1.LogsPipelinesOrder,
    LogsQueryCompute: LogsQueryCompute_1.LogsQueryCompute,
    LogsRetentionAggSumUsage: LogsRetentionAggSumUsage_1.LogsRetentionAggSumUsage,
    LogsRetentionSumUsage: LogsRetentionSumUsage_1.LogsRetentionSumUsage,
    LogsServiceRemapper: LogsServiceRemapper_1.LogsServiceRemapper,
    LogsSpanRemapper: LogsSpanRemapper_1.LogsSpanRemapper,
    LogsStatusRemapper: LogsStatusRemapper_1.LogsStatusRemapper,
    LogsStringBuilderProcessor: LogsStringBuilderProcessor_1.LogsStringBuilderProcessor,
    LogsTraceRemapper: LogsTraceRemapper_1.LogsTraceRemapper,
    LogsURLParser: LogsURLParser_1.LogsURLParser,
    LogsUserAgentParser: LogsUserAgentParser_1.LogsUserAgentParser,
    MatchingDowntime: MatchingDowntime_1.MatchingDowntime,
    MetricMetadata: MetricMetadata_1.MetricMetadata,
    MetricSearchResponse: MetricSearchResponse_1.MetricSearchResponse,
    MetricSearchResponseResults: MetricSearchResponseResults_1.MetricSearchResponseResults,
    MetricsListResponse: MetricsListResponse_1.MetricsListResponse,
    MetricsPayload: MetricsPayload_1.MetricsPayload,
    MetricsQueryMetadata: MetricsQueryMetadata_1.MetricsQueryMetadata,
    MetricsQueryResponse: MetricsQueryResponse_1.MetricsQueryResponse,
    MetricsQueryUnit: MetricsQueryUnit_1.MetricsQueryUnit,
    Monitor: Monitor_1.Monitor,
    MonitorFormulaAndFunctionCostQueryDefinition: MonitorFormulaAndFunctionCostQueryDefinition_1.MonitorFormulaAndFunctionCostQueryDefinition,
    MonitorFormulaAndFunctionEventQueryDefinition: MonitorFormulaAndFunctionEventQueryDefinition_1.MonitorFormulaAndFunctionEventQueryDefinition,
    MonitorFormulaAndFunctionEventQueryDefinitionCompute: MonitorFormulaAndFunctionEventQueryDefinitionCompute_1.MonitorFormulaAndFunctionEventQueryDefinitionCompute,
    MonitorFormulaAndFunctionEventQueryDefinitionSearch: MonitorFormulaAndFunctionEventQueryDefinitionSearch_1.MonitorFormulaAndFunctionEventQueryDefinitionSearch,
    MonitorFormulaAndFunctionEventQueryGroupBy: MonitorFormulaAndFunctionEventQueryGroupBy_1.MonitorFormulaAndFunctionEventQueryGroupBy,
    MonitorFormulaAndFunctionEventQueryGroupBySort: MonitorFormulaAndFunctionEventQueryGroupBySort_1.MonitorFormulaAndFunctionEventQueryGroupBySort,
    MonitorGroupSearchResponse: MonitorGroupSearchResponse_1.MonitorGroupSearchResponse,
    MonitorGroupSearchResponseCounts: MonitorGroupSearchResponseCounts_1.MonitorGroupSearchResponseCounts,
    MonitorGroupSearchResult: MonitorGroupSearchResult_1.MonitorGroupSearchResult,
    MonitorOptions: MonitorOptions_1.MonitorOptions,
    MonitorOptionsAggregation: MonitorOptionsAggregation_1.MonitorOptionsAggregation,
    MonitorOptionsCustomSchedule: MonitorOptionsCustomSchedule_1.MonitorOptionsCustomSchedule,
    MonitorOptionsCustomScheduleRecurrence: MonitorOptionsCustomScheduleRecurrence_1.MonitorOptionsCustomScheduleRecurrence,
    MonitorOptionsSchedulingOptions: MonitorOptionsSchedulingOptions_1.MonitorOptionsSchedulingOptions,
    MonitorOptionsSchedulingOptionsEvaluationWindow: MonitorOptionsSchedulingOptionsEvaluationWindow_1.MonitorOptionsSchedulingOptionsEvaluationWindow,
    MonitorSearchCountItem: MonitorSearchCountItem_1.MonitorSearchCountItem,
    MonitorSearchResponse: MonitorSearchResponse_1.MonitorSearchResponse,
    MonitorSearchResponseCounts: MonitorSearchResponseCounts_1.MonitorSearchResponseCounts,
    MonitorSearchResponseMetadata: MonitorSearchResponseMetadata_1.MonitorSearchResponseMetadata,
    MonitorSearchResult: MonitorSearchResult_1.MonitorSearchResult,
    MonitorSearchResultNotification: MonitorSearchResultNotification_1.MonitorSearchResultNotification,
    MonitorState: MonitorState_1.MonitorState,
    MonitorStateGroup: MonitorStateGroup_1.MonitorStateGroup,
    MonitorSummaryWidgetDefinition: MonitorSummaryWidgetDefinition_1.MonitorSummaryWidgetDefinition,
    MonitorThresholdWindowOptions: MonitorThresholdWindowOptions_1.MonitorThresholdWindowOptions,
    MonitorThresholds: MonitorThresholds_1.MonitorThresholds,
    MonitorUpdateRequest: MonitorUpdateRequest_1.MonitorUpdateRequest,
    MonthlyUsageAttributionBody: MonthlyUsageAttributionBody_1.MonthlyUsageAttributionBody,
    MonthlyUsageAttributionMetadata: MonthlyUsageAttributionMetadata_1.MonthlyUsageAttributionMetadata,
    MonthlyUsageAttributionPagination: MonthlyUsageAttributionPagination_1.MonthlyUsageAttributionPagination,
    MonthlyUsageAttributionResponse: MonthlyUsageAttributionResponse_1.MonthlyUsageAttributionResponse,
    MonthlyUsageAttributionValues: MonthlyUsageAttributionValues_1.MonthlyUsageAttributionValues,
    NoteWidgetDefinition: NoteWidgetDefinition_1.NoteWidgetDefinition,
    NotebookAbsoluteTime: NotebookAbsoluteTime_1.NotebookAbsoluteTime,
    NotebookAuthor: NotebookAuthor_1.NotebookAuthor,
    NotebookCellCreateRequest: NotebookCellCreateRequest_1.NotebookCellCreateRequest,
    NotebookCellResponse: NotebookCellResponse_1.NotebookCellResponse,
    NotebookCellUpdateRequest: NotebookCellUpdateRequest_1.NotebookCellUpdateRequest,
    NotebookCreateData: NotebookCreateData_1.NotebookCreateData,
    NotebookCreateDataAttributes: NotebookCreateDataAttributes_1.NotebookCreateDataAttributes,
    NotebookCreateRequest: NotebookCreateRequest_1.NotebookCreateRequest,
    NotebookDistributionCellAttributes: NotebookDistributionCellAttributes_1.NotebookDistributionCellAttributes,
    NotebookHeatMapCellAttributes: NotebookHeatMapCellAttributes_1.NotebookHeatMapCellAttributes,
    NotebookLogStreamCellAttributes: NotebookLogStreamCellAttributes_1.NotebookLogStreamCellAttributes,
    NotebookMarkdownCellAttributes: NotebookMarkdownCellAttributes_1.NotebookMarkdownCellAttributes,
    NotebookMarkdownCellDefinition: NotebookMarkdownCellDefinition_1.NotebookMarkdownCellDefinition,
    NotebookMetadata: NotebookMetadata_1.NotebookMetadata,
    NotebookRelativeTime: NotebookRelativeTime_1.NotebookRelativeTime,
    NotebookResponse: NotebookResponse_1.NotebookResponse,
    NotebookResponseData: NotebookResponseData_1.NotebookResponseData,
    NotebookResponseDataAttributes: NotebookResponseDataAttributes_1.NotebookResponseDataAttributes,
    NotebookSplitBy: NotebookSplitBy_1.NotebookSplitBy,
    NotebookTimeseriesCellAttributes: NotebookTimeseriesCellAttributes_1.NotebookTimeseriesCellAttributes,
    NotebookToplistCellAttributes: NotebookToplistCellAttributes_1.NotebookToplistCellAttributes,
    NotebookUpdateData: NotebookUpdateData_1.NotebookUpdateData,
    NotebookUpdateDataAttributes: NotebookUpdateDataAttributes_1.NotebookUpdateDataAttributes,
    NotebookUpdateRequest: NotebookUpdateRequest_1.NotebookUpdateRequest,
    NotebooksResponse: NotebooksResponse_1.NotebooksResponse,
    NotebooksResponseData: NotebooksResponseData_1.NotebooksResponseData,
    NotebooksResponseDataAttributes: NotebooksResponseDataAttributes_1.NotebooksResponseDataAttributes,
    NotebooksResponseMeta: NotebooksResponseMeta_1.NotebooksResponseMeta,
    NotebooksResponsePage: NotebooksResponsePage_1.NotebooksResponsePage,
    NumberFormatUnitCanonical: NumberFormatUnitCanonical_1.NumberFormatUnitCanonical,
    NumberFormatUnitCustom: NumberFormatUnitCustom_1.NumberFormatUnitCustom,
    NumberFormatUnitScale: NumberFormatUnitScale_1.NumberFormatUnitScale,
    OrgDowngradedResponse: OrgDowngradedResponse_1.OrgDowngradedResponse,
    Organization: Organization_1.Organization,
    OrganizationBilling: OrganizationBilling_1.OrganizationBilling,
    OrganizationCreateBody: OrganizationCreateBody_1.OrganizationCreateBody,
    OrganizationCreateResponse: OrganizationCreateResponse_1.OrganizationCreateResponse,
    OrganizationListResponse: OrganizationListResponse_1.OrganizationListResponse,
    OrganizationResponse: OrganizationResponse_1.OrganizationResponse,
    OrganizationSettings: OrganizationSettings_1.OrganizationSettings,
    OrganizationSettingsSaml: OrganizationSettingsSaml_1.OrganizationSettingsSaml,
    OrganizationSettingsSamlAutocreateUsersDomains: OrganizationSettingsSamlAutocreateUsersDomains_1.OrganizationSettingsSamlAutocreateUsersDomains,
    OrganizationSettingsSamlIdpInitiatedLogin: OrganizationSettingsSamlIdpInitiatedLogin_1.OrganizationSettingsSamlIdpInitiatedLogin,
    OrganizationSettingsSamlStrictMode: OrganizationSettingsSamlStrictMode_1.OrganizationSettingsSamlStrictMode,
    OrganizationSubscription: OrganizationSubscription_1.OrganizationSubscription,
    PagerDutyService: PagerDutyService_1.PagerDutyService,
    PagerDutyServiceKey: PagerDutyServiceKey_1.PagerDutyServiceKey,
    PagerDutyServiceName: PagerDutyServiceName_1.PagerDutyServiceName,
    Pagination: Pagination_1.Pagination,
    PowerpackTemplateVariableContents: PowerpackTemplateVariableContents_1.PowerpackTemplateVariableContents,
    PowerpackTemplateVariables: PowerpackTemplateVariables_1.PowerpackTemplateVariables,
    PowerpackWidgetDefinition: PowerpackWidgetDefinition_1.PowerpackWidgetDefinition,
    ProcessQueryDefinition: ProcessQueryDefinition_1.ProcessQueryDefinition,
    QueryValueWidgetDefinition: QueryValueWidgetDefinition_1.QueryValueWidgetDefinition,
    QueryValueWidgetRequest: QueryValueWidgetRequest_1.QueryValueWidgetRequest,
    ReferenceTableLogsLookupProcessor: ReferenceTableLogsLookupProcessor_1.ReferenceTableLogsLookupProcessor,
    ResourceProviderConfig: ResourceProviderConfig_1.ResourceProviderConfig,
    ResponseMetaAttributes: ResponseMetaAttributes_1.ResponseMetaAttributes,
    RunWorkflowWidgetDefinition: RunWorkflowWidgetDefinition_1.RunWorkflowWidgetDefinition,
    RunWorkflowWidgetInput: RunWorkflowWidgetInput_1.RunWorkflowWidgetInput,
    SLOBulkDeleteError: SLOBulkDeleteError_1.SLOBulkDeleteError,
    SLOBulkDeleteResponse: SLOBulkDeleteResponse_1.SLOBulkDeleteResponse,
    SLOBulkDeleteResponseData: SLOBulkDeleteResponseData_1.SLOBulkDeleteResponseData,
    SLOCorrection: SLOCorrection_1.SLOCorrection,
    SLOCorrectionCreateData: SLOCorrectionCreateData_1.SLOCorrectionCreateData,
    SLOCorrectionCreateRequest: SLOCorrectionCreateRequest_1.SLOCorrectionCreateRequest,
    SLOCorrectionCreateRequestAttributes: SLOCorrectionCreateRequestAttributes_1.SLOCorrectionCreateRequestAttributes,
    SLOCorrectionListResponse: SLOCorrectionListResponse_1.SLOCorrectionListResponse,
    SLOCorrectionResponse: SLOCorrectionResponse_1.SLOCorrectionResponse,
    SLOCorrectionResponseAttributes: SLOCorrectionResponseAttributes_1.SLOCorrectionResponseAttributes,
    SLOCorrectionResponseAttributesModifier: SLOCorrectionResponseAttributesModifier_1.SLOCorrectionResponseAttributesModifier,
    SLOCorrectionUpdateData: SLOCorrectionUpdateData_1.SLOCorrectionUpdateData,
    SLOCorrectionUpdateRequest: SLOCorrectionUpdateRequest_1.SLOCorrectionUpdateRequest,
    SLOCorrectionUpdateRequestAttributes: SLOCorrectionUpdateRequestAttributes_1.SLOCorrectionUpdateRequestAttributes,
    SLOCreator: SLOCreator_1.SLOCreator,
    SLODeleteResponse: SLODeleteResponse_1.SLODeleteResponse,
    SLOFormula: SLOFormula_1.SLOFormula,
    SLOHistoryMetrics: SLOHistoryMetrics_1.SLOHistoryMetrics,
    SLOHistoryMetricsSeries: SLOHistoryMetricsSeries_1.SLOHistoryMetricsSeries,
    SLOHistoryMetricsSeriesMetadata: SLOHistoryMetricsSeriesMetadata_1.SLOHistoryMetricsSeriesMetadata,
    SLOHistoryMetricsSeriesMetadataUnit: SLOHistoryMetricsSeriesMetadataUnit_1.SLOHistoryMetricsSeriesMetadataUnit,
    SLOHistoryMonitor: SLOHistoryMonitor_1.SLOHistoryMonitor,
    SLOHistoryResponse: SLOHistoryResponse_1.SLOHistoryResponse,
    SLOHistoryResponseData: SLOHistoryResponseData_1.SLOHistoryResponseData,
    SLOHistoryResponseError: SLOHistoryResponseError_1.SLOHistoryResponseError,
    SLOHistoryResponseErrorWithType: SLOHistoryResponseErrorWithType_1.SLOHistoryResponseErrorWithType,
    SLOHistorySLIData: SLOHistorySLIData_1.SLOHistorySLIData,
    SLOListResponse: SLOListResponse_1.SLOListResponse,
    SLOListResponseMetadata: SLOListResponseMetadata_1.SLOListResponseMetadata,
    SLOListResponseMetadataPage: SLOListResponseMetadataPage_1.SLOListResponseMetadataPage,
    SLOListWidgetDefinition: SLOListWidgetDefinition_1.SLOListWidgetDefinition,
    SLOListWidgetQuery: SLOListWidgetQuery_1.SLOListWidgetQuery,
    SLOListWidgetRequest: SLOListWidgetRequest_1.SLOListWidgetRequest,
    SLOOverallStatuses: SLOOverallStatuses_1.SLOOverallStatuses,
    SLORawErrorBudgetRemaining: SLORawErrorBudgetRemaining_1.SLORawErrorBudgetRemaining,
    SLOResponse: SLOResponse_1.SLOResponse,
    SLOResponseData: SLOResponseData_1.SLOResponseData,
    SLOStatus: SLOStatus_1.SLOStatus,
    SLOThreshold: SLOThreshold_1.SLOThreshold,
    SLOTimeSliceCondition: SLOTimeSliceCondition_1.SLOTimeSliceCondition,
    SLOTimeSliceQuery: SLOTimeSliceQuery_1.SLOTimeSliceQuery,
    SLOTimeSliceSpec: SLOTimeSliceSpec_1.SLOTimeSliceSpec,
    SLOWidgetDefinition: SLOWidgetDefinition_1.SLOWidgetDefinition,
    ScatterPlotRequest: ScatterPlotRequest_1.ScatterPlotRequest,
    ScatterPlotWidgetDefinition: ScatterPlotWidgetDefinition_1.ScatterPlotWidgetDefinition,
    ScatterPlotWidgetDefinitionRequests: ScatterPlotWidgetDefinitionRequests_1.ScatterPlotWidgetDefinitionRequests,
    ScatterplotTableRequest: ScatterplotTableRequest_1.ScatterplotTableRequest,
    ScatterplotWidgetFormula: ScatterplotWidgetFormula_1.ScatterplotWidgetFormula,
    SearchSLOQuery: SearchSLOQuery_1.SearchSLOQuery,
    SearchSLOResponse: SearchSLOResponse_1.SearchSLOResponse,
    SearchSLOResponseData: SearchSLOResponseData_1.SearchSLOResponseData,
    SearchSLOResponseDataAttributes: SearchSLOResponseDataAttributes_1.SearchSLOResponseDataAttributes,
    SearchSLOResponseDataAttributesFacets: SearchSLOResponseDataAttributesFacets_1.SearchSLOResponseDataAttributesFacets,
    SearchSLOResponseDataAttributesFacetsObjectInt: SearchSLOResponseDataAttributesFacetsObjectInt_1.SearchSLOResponseDataAttributesFacetsObjectInt,
    SearchSLOResponseDataAttributesFacetsObjectString: SearchSLOResponseDataAttributesFacetsObjectString_1.SearchSLOResponseDataAttributesFacetsObjectString,
    SearchSLOResponseLinks: SearchSLOResponseLinks_1.SearchSLOResponseLinks,
    SearchSLOResponseMeta: SearchSLOResponseMeta_1.SearchSLOResponseMeta,
    SearchSLOResponseMetaPage: SearchSLOResponseMetaPage_1.SearchSLOResponseMetaPage,
    SearchSLOThreshold: SearchSLOThreshold_1.SearchSLOThreshold,
    SearchServiceLevelObjective: SearchServiceLevelObjective_1.SearchServiceLevelObjective,
    SearchServiceLevelObjectiveAttributes: SearchServiceLevelObjectiveAttributes_1.SearchServiceLevelObjectiveAttributes,
    SearchServiceLevelObjectiveData: SearchServiceLevelObjectiveData_1.SearchServiceLevelObjectiveData,
    SelectableTemplateVariableItems: SelectableTemplateVariableItems_1.SelectableTemplateVariableItems,
    Series: Series_1.Series,
    ServiceCheck: ServiceCheck_1.ServiceCheck,
    ServiceLevelObjective: ServiceLevelObjective_1.ServiceLevelObjective,
    ServiceLevelObjectiveQuery: ServiceLevelObjectiveQuery_1.ServiceLevelObjectiveQuery,
    ServiceLevelObjectiveRequest: ServiceLevelObjectiveRequest_1.ServiceLevelObjectiveRequest,
    ServiceMapWidgetDefinition: ServiceMapWidgetDefinition_1.ServiceMapWidgetDefinition,
    ServiceSummaryWidgetDefinition: ServiceSummaryWidgetDefinition_1.ServiceSummaryWidgetDefinition,
    SharedDashboard: SharedDashboard_1.SharedDashboard,
    SharedDashboardAuthor: SharedDashboardAuthor_1.SharedDashboardAuthor,
    SharedDashboardInviteesItems: SharedDashboardInviteesItems_1.SharedDashboardInviteesItems,
    SharedDashboardInvites: SharedDashboardInvites_1.SharedDashboardInvites,
    SharedDashboardInvitesDataObject: SharedDashboardInvitesDataObject_1.SharedDashboardInvitesDataObject,
    SharedDashboardInvitesDataObjectAttributes: SharedDashboardInvitesDataObjectAttributes_1.SharedDashboardInvitesDataObjectAttributes,
    SharedDashboardInvitesMeta: SharedDashboardInvitesMeta_1.SharedDashboardInvitesMeta,
    SharedDashboardInvitesMetaPage: SharedDashboardInvitesMetaPage_1.SharedDashboardInvitesMetaPage,
    SharedDashboardUpdateRequest: SharedDashboardUpdateRequest_1.SharedDashboardUpdateRequest,
    SharedDashboardUpdateRequestGlobalTime: SharedDashboardUpdateRequestGlobalTime_1.SharedDashboardUpdateRequestGlobalTime,
    SignalAssigneeUpdateRequest: SignalAssigneeUpdateRequest_1.SignalAssigneeUpdateRequest,
    SignalStateUpdateRequest: SignalStateUpdateRequest_1.SignalStateUpdateRequest,
    SlackIntegrationChannel: SlackIntegrationChannel_1.SlackIntegrationChannel,
    SlackIntegrationChannelDisplay: SlackIntegrationChannelDisplay_1.SlackIntegrationChannelDisplay,
    SplitConfig: SplitConfig_1.SplitConfig,
    SplitConfigSortCompute: SplitConfigSortCompute_1.SplitConfigSortCompute,
    SplitDimension: SplitDimension_1.SplitDimension,
    SplitGraphWidgetDefinition: SplitGraphWidgetDefinition_1.SplitGraphWidgetDefinition,
    SplitSort: SplitSort_1.SplitSort,
    SplitVectorEntryItem: SplitVectorEntryItem_1.SplitVectorEntryItem,
    SuccessfulSignalUpdateResponse: SuccessfulSignalUpdateResponse_1.SuccessfulSignalUpdateResponse,
    SunburstWidgetDefinition: SunburstWidgetDefinition_1.SunburstWidgetDefinition,
    SunburstWidgetLegendInlineAutomatic: SunburstWidgetLegendInlineAutomatic_1.SunburstWidgetLegendInlineAutomatic,
    SunburstWidgetLegendTable: SunburstWidgetLegendTable_1.SunburstWidgetLegendTable,
    SunburstWidgetRequest: SunburstWidgetRequest_1.SunburstWidgetRequest,
    SyntheticsAPITest: SyntheticsAPITest_1.SyntheticsAPITest,
    SyntheticsAPITestConfig: SyntheticsAPITestConfig_1.SyntheticsAPITestConfig,
    SyntheticsAPITestResultData: SyntheticsAPITestResultData_1.SyntheticsAPITestResultData,
    SyntheticsAPITestResultFull: SyntheticsAPITestResultFull_1.SyntheticsAPITestResultFull,
    SyntheticsAPITestResultFullCheck: SyntheticsAPITestResultFullCheck_1.SyntheticsAPITestResultFullCheck,
    SyntheticsAPITestResultShort: SyntheticsAPITestResultShort_1.SyntheticsAPITestResultShort,
    SyntheticsAPITestResultShortResult: SyntheticsAPITestResultShortResult_1.SyntheticsAPITestResultShortResult,
    SyntheticsAPITestStep: SyntheticsAPITestStep_1.SyntheticsAPITestStep,
    SyntheticsAPIWaitStep: SyntheticsAPIWaitStep_1.SyntheticsAPIWaitStep,
    SyntheticsApiTestResultFailure: SyntheticsApiTestResultFailure_1.SyntheticsApiTestResultFailure,
    SyntheticsAssertionBodyHashTarget: SyntheticsAssertionBodyHashTarget_1.SyntheticsAssertionBodyHashTarget,
    SyntheticsAssertionJSONPathTarget: SyntheticsAssertionJSONPathTarget_1.SyntheticsAssertionJSONPathTarget,
    SyntheticsAssertionJSONPathTargetTarget: SyntheticsAssertionJSONPathTargetTarget_1.SyntheticsAssertionJSONPathTargetTarget,
    SyntheticsAssertionJSONSchemaTarget: SyntheticsAssertionJSONSchemaTarget_1.SyntheticsAssertionJSONSchemaTarget,
    SyntheticsAssertionJSONSchemaTargetTarget: SyntheticsAssertionJSONSchemaTargetTarget_1.SyntheticsAssertionJSONSchemaTargetTarget,
    SyntheticsAssertionJavascript: SyntheticsAssertionJavascript_1.SyntheticsAssertionJavascript,
    SyntheticsAssertionTarget: SyntheticsAssertionTarget_1.SyntheticsAssertionTarget,
    SyntheticsAssertionXPathTarget: SyntheticsAssertionXPathTarget_1.SyntheticsAssertionXPathTarget,
    SyntheticsAssertionXPathTargetTarget: SyntheticsAssertionXPathTargetTarget_1.SyntheticsAssertionXPathTargetTarget,
    SyntheticsBasicAuthDigest: SyntheticsBasicAuthDigest_1.SyntheticsBasicAuthDigest,
    SyntheticsBasicAuthNTLM: SyntheticsBasicAuthNTLM_1.SyntheticsBasicAuthNTLM,
    SyntheticsBasicAuthOauthClient: SyntheticsBasicAuthOauthClient_1.SyntheticsBasicAuthOauthClient,
    SyntheticsBasicAuthOauthROP: SyntheticsBasicAuthOauthROP_1.SyntheticsBasicAuthOauthROP,
    SyntheticsBasicAuthSigv4: SyntheticsBasicAuthSigv4_1.SyntheticsBasicAuthSigv4,
    SyntheticsBasicAuthWeb: SyntheticsBasicAuthWeb_1.SyntheticsBasicAuthWeb,
    SyntheticsBatchDetails: SyntheticsBatchDetails_1.SyntheticsBatchDetails,
    SyntheticsBatchDetailsData: SyntheticsBatchDetailsData_1.SyntheticsBatchDetailsData,
    SyntheticsBatchResult: SyntheticsBatchResult_1.SyntheticsBatchResult,
    SyntheticsBrowserError: SyntheticsBrowserError_1.SyntheticsBrowserError,
    SyntheticsBrowserTest: SyntheticsBrowserTest_1.SyntheticsBrowserTest,
    SyntheticsBrowserTestConfig: SyntheticsBrowserTestConfig_1.SyntheticsBrowserTestConfig,
    SyntheticsBrowserTestResultData: SyntheticsBrowserTestResultData_1.SyntheticsBrowserTestResultData,
    SyntheticsBrowserTestResultFailure: SyntheticsBrowserTestResultFailure_1.SyntheticsBrowserTestResultFailure,
    SyntheticsBrowserTestResultFull: SyntheticsBrowserTestResultFull_1.SyntheticsBrowserTestResultFull,
    SyntheticsBrowserTestResultFullCheck: SyntheticsBrowserTestResultFullCheck_1.SyntheticsBrowserTestResultFullCheck,
    SyntheticsBrowserTestResultShort: SyntheticsBrowserTestResultShort_1.SyntheticsBrowserTestResultShort,
    SyntheticsBrowserTestResultShortResult: SyntheticsBrowserTestResultShortResult_1.SyntheticsBrowserTestResultShortResult,
    SyntheticsBrowserTestRumSettings: SyntheticsBrowserTestRumSettings_1.SyntheticsBrowserTestRumSettings,
    SyntheticsBrowserVariable: SyntheticsBrowserVariable_1.SyntheticsBrowserVariable,
    SyntheticsCIBatchMetadata: SyntheticsCIBatchMetadata_1.SyntheticsCIBatchMetadata,
    SyntheticsCIBatchMetadataCI: SyntheticsCIBatchMetadataCI_1.SyntheticsCIBatchMetadataCI,
    SyntheticsCIBatchMetadataGit: SyntheticsCIBatchMetadataGit_1.SyntheticsCIBatchMetadataGit,
    SyntheticsCIBatchMetadataPipeline: SyntheticsCIBatchMetadataPipeline_1.SyntheticsCIBatchMetadataPipeline,
    SyntheticsCIBatchMetadataProvider: SyntheticsCIBatchMetadataProvider_1.SyntheticsCIBatchMetadataProvider,
    SyntheticsCITest: SyntheticsCITest_1.SyntheticsCITest,
    SyntheticsCITestBody: SyntheticsCITestBody_1.SyntheticsCITestBody,
    SyntheticsConfigVariable: SyntheticsConfigVariable_1.SyntheticsConfigVariable,
    SyntheticsCoreWebVitals: SyntheticsCoreWebVitals_1.SyntheticsCoreWebVitals,
    SyntheticsDeleteTestsPayload: SyntheticsDeleteTestsPayload_1.SyntheticsDeleteTestsPayload,
    SyntheticsDeleteTestsResponse: SyntheticsDeleteTestsResponse_1.SyntheticsDeleteTestsResponse,
    SyntheticsDeletedTest: SyntheticsDeletedTest_1.SyntheticsDeletedTest,
    SyntheticsDevice: SyntheticsDevice_1.SyntheticsDevice,
    SyntheticsFetchUptimesPayload: SyntheticsFetchUptimesPayload_1.SyntheticsFetchUptimesPayload,
    SyntheticsGetAPITestLatestResultsResponse: SyntheticsGetAPITestLatestResultsResponse_1.SyntheticsGetAPITestLatestResultsResponse,
    SyntheticsGetBrowserTestLatestResultsResponse: SyntheticsGetBrowserTestLatestResultsResponse_1.SyntheticsGetBrowserTestLatestResultsResponse,
    SyntheticsGlobalVariable: SyntheticsGlobalVariable_1.SyntheticsGlobalVariable,
    SyntheticsGlobalVariableAttributes: SyntheticsGlobalVariableAttributes_1.SyntheticsGlobalVariableAttributes,
    SyntheticsGlobalVariableOptions: SyntheticsGlobalVariableOptions_1.SyntheticsGlobalVariableOptions,
    SyntheticsGlobalVariableParseTestOptions: SyntheticsGlobalVariableParseTestOptions_1.SyntheticsGlobalVariableParseTestOptions,
    SyntheticsGlobalVariableRequest: SyntheticsGlobalVariableRequest_1.SyntheticsGlobalVariableRequest,
    SyntheticsGlobalVariableTOTPParameters: SyntheticsGlobalVariableTOTPParameters_1.SyntheticsGlobalVariableTOTPParameters,
    SyntheticsGlobalVariableValue: SyntheticsGlobalVariableValue_1.SyntheticsGlobalVariableValue,
    SyntheticsListGlobalVariablesResponse: SyntheticsListGlobalVariablesResponse_1.SyntheticsListGlobalVariablesResponse,
    SyntheticsListTestsResponse: SyntheticsListTestsResponse_1.SyntheticsListTestsResponse,
    SyntheticsLocation: SyntheticsLocation_1.SyntheticsLocation,
    SyntheticsLocations: SyntheticsLocations_1.SyntheticsLocations,
    SyntheticsMobileStep: SyntheticsMobileStep_1.SyntheticsMobileStep,
    SyntheticsMobileStepParams: SyntheticsMobileStepParams_1.SyntheticsMobileStepParams,
    SyntheticsMobileStepParamsElement: SyntheticsMobileStepParamsElement_1.SyntheticsMobileStepParamsElement,
    SyntheticsMobileStepParamsElementRelativePosition: SyntheticsMobileStepParamsElementRelativePosition_1.SyntheticsMobileStepParamsElementRelativePosition,
    SyntheticsMobileStepParamsElementUserLocator: SyntheticsMobileStepParamsElementUserLocator_1.SyntheticsMobileStepParamsElementUserLocator,
    SyntheticsMobileStepParamsElementUserLocatorValuesItems: SyntheticsMobileStepParamsElementUserLocatorValuesItems_1.SyntheticsMobileStepParamsElementUserLocatorValuesItems,
    SyntheticsMobileStepParamsPositionsItems: SyntheticsMobileStepParamsPositionsItems_1.SyntheticsMobileStepParamsPositionsItems,
    SyntheticsMobileStepParamsVariable: SyntheticsMobileStepParamsVariable_1.SyntheticsMobileStepParamsVariable,
    SyntheticsMobileTest: SyntheticsMobileTest_1.SyntheticsMobileTest,
    SyntheticsMobileTestConfig: SyntheticsMobileTestConfig_1.SyntheticsMobileTestConfig,
    SyntheticsMobileTestOptions: SyntheticsMobileTestOptions_1.SyntheticsMobileTestOptions,
    SyntheticsMobileTestsMobileApplication: SyntheticsMobileTestsMobileApplication_1.SyntheticsMobileTestsMobileApplication,
    SyntheticsParsingOptions: SyntheticsParsingOptions_1.SyntheticsParsingOptions,
    SyntheticsPatchTestBody: SyntheticsPatchTestBody_1.SyntheticsPatchTestBody,
    SyntheticsPatchTestOperation: SyntheticsPatchTestOperation_1.SyntheticsPatchTestOperation,
    SyntheticsPrivateLocation: SyntheticsPrivateLocation_1.SyntheticsPrivateLocation,
    SyntheticsPrivateLocationCreationResponse: SyntheticsPrivateLocationCreationResponse_1.SyntheticsPrivateLocationCreationResponse,
    SyntheticsPrivateLocationCreationResponseResultEncryption: SyntheticsPrivateLocationCreationResponseResultEncryption_1.SyntheticsPrivateLocationCreationResponseResultEncryption,
    SyntheticsPrivateLocationMetadata: SyntheticsPrivateLocationMetadata_1.SyntheticsPrivateLocationMetadata,
    SyntheticsPrivateLocationSecrets: SyntheticsPrivateLocationSecrets_1.SyntheticsPrivateLocationSecrets,
    SyntheticsPrivateLocationSecretsAuthentication: SyntheticsPrivateLocationSecretsAuthentication_1.SyntheticsPrivateLocationSecretsAuthentication,
    SyntheticsPrivateLocationSecretsConfigDecryption: SyntheticsPrivateLocationSecretsConfigDecryption_1.SyntheticsPrivateLocationSecretsConfigDecryption,
    SyntheticsSSLCertificate: SyntheticsSSLCertificate_1.SyntheticsSSLCertificate,
    SyntheticsSSLCertificateIssuer: SyntheticsSSLCertificateIssuer_1.SyntheticsSSLCertificateIssuer,
    SyntheticsSSLCertificateSubject: SyntheticsSSLCertificateSubject_1.SyntheticsSSLCertificateSubject,
    SyntheticsStep: SyntheticsStep_1.SyntheticsStep,
    SyntheticsStepDetail: SyntheticsStepDetail_1.SyntheticsStepDetail,
    SyntheticsStepDetailWarning: SyntheticsStepDetailWarning_1.SyntheticsStepDetailWarning,
    SyntheticsTestCiOptions: SyntheticsTestCiOptions_1.SyntheticsTestCiOptions,
    SyntheticsTestConfig: SyntheticsTestConfig_1.SyntheticsTestConfig,
    SyntheticsTestDetails: SyntheticsTestDetails_1.SyntheticsTestDetails,
    SyntheticsTestOptions: SyntheticsTestOptions_1.SyntheticsTestOptions,
    SyntheticsTestOptionsMonitorOptions: SyntheticsTestOptionsMonitorOptions_1.SyntheticsTestOptionsMonitorOptions,
    SyntheticsTestOptionsRetry: SyntheticsTestOptionsRetry_1.SyntheticsTestOptionsRetry,
    SyntheticsTestOptionsScheduling: SyntheticsTestOptionsScheduling_1.SyntheticsTestOptionsScheduling,
    SyntheticsTestOptionsSchedulingTimeframe: SyntheticsTestOptionsSchedulingTimeframe_1.SyntheticsTestOptionsSchedulingTimeframe,
    SyntheticsTestRequest: SyntheticsTestRequest_1.SyntheticsTestRequest,
    SyntheticsTestRequestBodyFile: SyntheticsTestRequestBodyFile_1.SyntheticsTestRequestBodyFile,
    SyntheticsTestRequestCertificate: SyntheticsTestRequestCertificate_1.SyntheticsTestRequestCertificate,
    SyntheticsTestRequestCertificateItem: SyntheticsTestRequestCertificateItem_1.SyntheticsTestRequestCertificateItem,
    SyntheticsTestRequestProxy: SyntheticsTestRequestProxy_1.SyntheticsTestRequestProxy,
    SyntheticsTestRestrictionPolicyBinding: SyntheticsTestRestrictionPolicyBinding_1.SyntheticsTestRestrictionPolicyBinding,
    SyntheticsTestUptime: SyntheticsTestUptime_1.SyntheticsTestUptime,
    SyntheticsTiming: SyntheticsTiming_1.SyntheticsTiming,
    SyntheticsTriggerBody: SyntheticsTriggerBody_1.SyntheticsTriggerBody,
    SyntheticsTriggerCITestLocation: SyntheticsTriggerCITestLocation_1.SyntheticsTriggerCITestLocation,
    SyntheticsTriggerCITestRunResult: SyntheticsTriggerCITestRunResult_1.SyntheticsTriggerCITestRunResult,
    SyntheticsTriggerCITestsResponse: SyntheticsTriggerCITestsResponse_1.SyntheticsTriggerCITestsResponse,
    SyntheticsTriggerTest: SyntheticsTriggerTest_1.SyntheticsTriggerTest,
    SyntheticsUpdateTestPauseStatusPayload: SyntheticsUpdateTestPauseStatusPayload_1.SyntheticsUpdateTestPauseStatusPayload,
    SyntheticsUptime: SyntheticsUptime_1.SyntheticsUptime,
    SyntheticsVariableParser: SyntheticsVariableParser_1.SyntheticsVariableParser,
    TableWidgetDefinition: TableWidgetDefinition_1.TableWidgetDefinition,
    TableWidgetRequest: TableWidgetRequest_1.TableWidgetRequest,
    TableWidgetTextFormatMatch: TableWidgetTextFormatMatch_1.TableWidgetTextFormatMatch,
    TableWidgetTextFormatReplaceAll: TableWidgetTextFormatReplaceAll_1.TableWidgetTextFormatReplaceAll,
    TableWidgetTextFormatReplaceSubstring: TableWidgetTextFormatReplaceSubstring_1.TableWidgetTextFormatReplaceSubstring,
    TableWidgetTextFormatRule: TableWidgetTextFormatRule_1.TableWidgetTextFormatRule,
    TagToHosts: TagToHosts_1.TagToHosts,
    TimeseriesBackground: TimeseriesBackground_1.TimeseriesBackground,
    TimeseriesWidgetDefinition: TimeseriesWidgetDefinition_1.TimeseriesWidgetDefinition,
    TimeseriesWidgetExpressionAlias: TimeseriesWidgetExpressionAlias_1.TimeseriesWidgetExpressionAlias,
    TimeseriesWidgetRequest: TimeseriesWidgetRequest_1.TimeseriesWidgetRequest,
    ToplistWidgetDefinition: ToplistWidgetDefinition_1.ToplistWidgetDefinition,
    ToplistWidgetFlat: ToplistWidgetFlat_1.ToplistWidgetFlat,
    ToplistWidgetRequest: ToplistWidgetRequest_1.ToplistWidgetRequest,
    ToplistWidgetStacked: ToplistWidgetStacked_1.ToplistWidgetStacked,
    ToplistWidgetStyle: ToplistWidgetStyle_1.ToplistWidgetStyle,
    TopologyMapWidgetDefinition: TopologyMapWidgetDefinition_1.TopologyMapWidgetDefinition,
    TopologyQuery: TopologyQuery_1.TopologyQuery,
    TopologyRequest: TopologyRequest_1.TopologyRequest,
    TreeMapWidgetDefinition: TreeMapWidgetDefinition_1.TreeMapWidgetDefinition,
    TreeMapWidgetRequest: TreeMapWidgetRequest_1.TreeMapWidgetRequest,
    UsageAnalyzedLogsHour: UsageAnalyzedLogsHour_1.UsageAnalyzedLogsHour,
    UsageAnalyzedLogsResponse: UsageAnalyzedLogsResponse_1.UsageAnalyzedLogsResponse,
    UsageAttributionAggregatesBody: UsageAttributionAggregatesBody_1.UsageAttributionAggregatesBody,
    UsageAuditLogsHour: UsageAuditLogsHour_1.UsageAuditLogsHour,
    UsageAuditLogsResponse: UsageAuditLogsResponse_1.UsageAuditLogsResponse,
    UsageBillableSummaryBody: UsageBillableSummaryBody_1.UsageBillableSummaryBody,
    UsageBillableSummaryHour: UsageBillableSummaryHour_1.UsageBillableSummaryHour,
    UsageBillableSummaryKeys: UsageBillableSummaryKeys_1.UsageBillableSummaryKeys,
    UsageBillableSummaryResponse: UsageBillableSummaryResponse_1.UsageBillableSummaryResponse,
    UsageCIVisibilityHour: UsageCIVisibilityHour_1.UsageCIVisibilityHour,
    UsageCIVisibilityResponse: UsageCIVisibilityResponse_1.UsageCIVisibilityResponse,
    UsageCWSHour: UsageCWSHour_1.UsageCWSHour,
    UsageCWSResponse: UsageCWSResponse_1.UsageCWSResponse,
    UsageCloudSecurityPostureManagementHour: UsageCloudSecurityPostureManagementHour_1.UsageCloudSecurityPostureManagementHour,
    UsageCloudSecurityPostureManagementResponse: UsageCloudSecurityPostureManagementResponse_1.UsageCloudSecurityPostureManagementResponse,
    UsageCustomReportsAttributes: UsageCustomReportsAttributes_1.UsageCustomReportsAttributes,
    UsageCustomReportsData: UsageCustomReportsData_1.UsageCustomReportsData,
    UsageCustomReportsMeta: UsageCustomReportsMeta_1.UsageCustomReportsMeta,
    UsageCustomReportsPage: UsageCustomReportsPage_1.UsageCustomReportsPage,
    UsageCustomReportsResponse: UsageCustomReportsResponse_1.UsageCustomReportsResponse,
    UsageDBMHour: UsageDBMHour_1.UsageDBMHour,
    UsageDBMResponse: UsageDBMResponse_1.UsageDBMResponse,
    UsageFargateHour: UsageFargateHour_1.UsageFargateHour,
    UsageFargateResponse: UsageFargateResponse_1.UsageFargateResponse,
    UsageHostHour: UsageHostHour_1.UsageHostHour,
    UsageHostsResponse: UsageHostsResponse_1.UsageHostsResponse,
    UsageIncidentManagementHour: UsageIncidentManagementHour_1.UsageIncidentManagementHour,
    UsageIncidentManagementResponse: UsageIncidentManagementResponse_1.UsageIncidentManagementResponse,
    UsageIndexedSpansHour: UsageIndexedSpansHour_1.UsageIndexedSpansHour,
    UsageIndexedSpansResponse: UsageIndexedSpansResponse_1.UsageIndexedSpansResponse,
    UsageIngestedSpansHour: UsageIngestedSpansHour_1.UsageIngestedSpansHour,
    UsageIngestedSpansResponse: UsageIngestedSpansResponse_1.UsageIngestedSpansResponse,
    UsageIoTHour: UsageIoTHour_1.UsageIoTHour,
    UsageIoTResponse: UsageIoTResponse_1.UsageIoTResponse,
    UsageLambdaHour: UsageLambdaHour_1.UsageLambdaHour,
    UsageLambdaResponse: UsageLambdaResponse_1.UsageLambdaResponse,
    UsageLogsByIndexHour: UsageLogsByIndexHour_1.UsageLogsByIndexHour,
    UsageLogsByIndexResponse: UsageLogsByIndexResponse_1.UsageLogsByIndexResponse,
    UsageLogsByRetentionHour: UsageLogsByRetentionHour_1.UsageLogsByRetentionHour,
    UsageLogsByRetentionResponse: UsageLogsByRetentionResponse_1.UsageLogsByRetentionResponse,
    UsageLogsHour: UsageLogsHour_1.UsageLogsHour,
    UsageLogsResponse: UsageLogsResponse_1.UsageLogsResponse,
    UsageNetworkFlowsHour: UsageNetworkFlowsHour_1.UsageNetworkFlowsHour,
    UsageNetworkFlowsResponse: UsageNetworkFlowsResponse_1.UsageNetworkFlowsResponse,
    UsageNetworkHostsHour: UsageNetworkHostsHour_1.UsageNetworkHostsHour,
    UsageNetworkHostsResponse: UsageNetworkHostsResponse_1.UsageNetworkHostsResponse,
    UsageOnlineArchiveHour: UsageOnlineArchiveHour_1.UsageOnlineArchiveHour,
    UsageOnlineArchiveResponse: UsageOnlineArchiveResponse_1.UsageOnlineArchiveResponse,
    UsageProfilingHour: UsageProfilingHour_1.UsageProfilingHour,
    UsageProfilingResponse: UsageProfilingResponse_1.UsageProfilingResponse,
    UsageRumSessionsHour: UsageRumSessionsHour_1.UsageRumSessionsHour,
    UsageRumSessionsResponse: UsageRumSessionsResponse_1.UsageRumSessionsResponse,
    UsageRumUnitsHour: UsageRumUnitsHour_1.UsageRumUnitsHour,
    UsageRumUnitsResponse: UsageRumUnitsResponse_1.UsageRumUnitsResponse,
    UsageSDSHour: UsageSDSHour_1.UsageSDSHour,
    UsageSDSResponse: UsageSDSResponse_1.UsageSDSResponse,
    UsageSNMPHour: UsageSNMPHour_1.UsageSNMPHour,
    UsageSNMPResponse: UsageSNMPResponse_1.UsageSNMPResponse,
    UsageSpecifiedCustomReportsAttributes: UsageSpecifiedCustomReportsAttributes_1.UsageSpecifiedCustomReportsAttributes,
    UsageSpecifiedCustomReportsData: UsageSpecifiedCustomReportsData_1.UsageSpecifiedCustomReportsData,
    UsageSpecifiedCustomReportsMeta: UsageSpecifiedCustomReportsMeta_1.UsageSpecifiedCustomReportsMeta,
    UsageSpecifiedCustomReportsPage: UsageSpecifiedCustomReportsPage_1.UsageSpecifiedCustomReportsPage,
    UsageSpecifiedCustomReportsResponse: UsageSpecifiedCustomReportsResponse_1.UsageSpecifiedCustomReportsResponse,
    UsageSummaryDate: UsageSummaryDate_1.UsageSummaryDate,
    UsageSummaryDateOrg: UsageSummaryDateOrg_1.UsageSummaryDateOrg,
    UsageSummaryResponse: UsageSummaryResponse_1.UsageSummaryResponse,
    UsageSyntheticsAPIHour: UsageSyntheticsAPIHour_1.UsageSyntheticsAPIHour,
    UsageSyntheticsAPIResponse: UsageSyntheticsAPIResponse_1.UsageSyntheticsAPIResponse,
    UsageSyntheticsBrowserHour: UsageSyntheticsBrowserHour_1.UsageSyntheticsBrowserHour,
    UsageSyntheticsBrowserResponse: UsageSyntheticsBrowserResponse_1.UsageSyntheticsBrowserResponse,
    UsageSyntheticsHour: UsageSyntheticsHour_1.UsageSyntheticsHour,
    UsageSyntheticsResponse: UsageSyntheticsResponse_1.UsageSyntheticsResponse,
    UsageTimeseriesHour: UsageTimeseriesHour_1.UsageTimeseriesHour,
    UsageTimeseriesResponse: UsageTimeseriesResponse_1.UsageTimeseriesResponse,
    UsageTopAvgMetricsHour: UsageTopAvgMetricsHour_1.UsageTopAvgMetricsHour,
    UsageTopAvgMetricsMetadata: UsageTopAvgMetricsMetadata_1.UsageTopAvgMetricsMetadata,
    UsageTopAvgMetricsPagination: UsageTopAvgMetricsPagination_1.UsageTopAvgMetricsPagination,
    UsageTopAvgMetricsResponse: UsageTopAvgMetricsResponse_1.UsageTopAvgMetricsResponse,
    User: User_1.User,
    UserDisableResponse: UserDisableResponse_1.UserDisableResponse,
    UserListResponse: UserListResponse_1.UserListResponse,
    UserResponse: UserResponse_1.UserResponse,
    ViewingPreferences: ViewingPreferences_1.ViewingPreferences,
    WebhooksIntegration: WebhooksIntegration_1.WebhooksIntegration,
    WebhooksIntegrationCustomVariable: WebhooksIntegrationCustomVariable_1.WebhooksIntegrationCustomVariable,
    WebhooksIntegrationCustomVariableResponse: WebhooksIntegrationCustomVariableResponse_1.WebhooksIntegrationCustomVariableResponse,
    WebhooksIntegrationCustomVariableUpdateRequest: WebhooksIntegrationCustomVariableUpdateRequest_1.WebhooksIntegrationCustomVariableUpdateRequest,
    WebhooksIntegrationUpdateRequest: WebhooksIntegrationUpdateRequest_1.WebhooksIntegrationUpdateRequest,
    Widget: Widget_1.Widget,
    WidgetAxis: WidgetAxis_1.WidgetAxis,
    WidgetConditionalFormat: WidgetConditionalFormat_1.WidgetConditionalFormat,
    WidgetCustomLink: WidgetCustomLink_1.WidgetCustomLink,
    WidgetEvent: WidgetEvent_1.WidgetEvent,
    WidgetFieldSort: WidgetFieldSort_1.WidgetFieldSort,
    WidgetFormula: WidgetFormula_1.WidgetFormula,
    WidgetFormulaCellDisplayModeOptions: WidgetFormulaCellDisplayModeOptions_1.WidgetFormulaCellDisplayModeOptions,
    WidgetFormulaLimit: WidgetFormulaLimit_1.WidgetFormulaLimit,
    WidgetFormulaSort: WidgetFormulaSort_1.WidgetFormulaSort,
    WidgetFormulaStyle: WidgetFormulaStyle_1.WidgetFormulaStyle,
    WidgetGroupSort: WidgetGroupSort_1.WidgetGroupSort,
    WidgetLayout: WidgetLayout_1.WidgetLayout,
    WidgetLegacyLiveSpan: WidgetLegacyLiveSpan_1.WidgetLegacyLiveSpan,
    WidgetMarker: WidgetMarker_1.WidgetMarker,
    WidgetNewFixedSpan: WidgetNewFixedSpan_1.WidgetNewFixedSpan,
    WidgetNewLiveSpan: WidgetNewLiveSpan_1.WidgetNewLiveSpan,
    WidgetNumberFormat: WidgetNumberFormat_1.WidgetNumberFormat,
    WidgetRequestStyle: WidgetRequestStyle_1.WidgetRequestStyle,
    WidgetSortBy: WidgetSortBy_1.WidgetSortBy,
    WidgetStyle: WidgetStyle_1.WidgetStyle,
};
const oneOfMap = {
    DistributionPointItem: ["number", "Array<number>"],
    DistributionWidgetHistogramRequestQuery: [
        "FormulaAndFunctionMetricQueryDefinition",
        "FormulaAndFunctionEventQueryDefinition",
        "FormulaAndFunctionApmResourceStatsQueryDefinition",
    ],
    FormulaAndFunctionQueryDefinition: [
        "FormulaAndFunctionMetricQueryDefinition",
        "FormulaAndFunctionEventQueryDefinition",
        "FormulaAndFunctionProcessQueryDefinition",
        "FormulaAndFunctionApmDependencyStatsQueryDefinition",
        "FormulaAndFunctionApmResourceStatsQueryDefinition",
        "FormulaAndFunctionSLOQueryDefinition",
        "FormulaAndFunctionCloudCostQueryDefinition",
    ],
    LogsProcessor: [
        "LogsGrokParser",
        "LogsDateRemapper",
        "LogsStatusRemapper",
        "LogsServiceRemapper",
        "LogsMessageRemapper",
        "LogsAttributeRemapper",
        "LogsURLParser",
        "LogsUserAgentParser",
        "LogsCategoryProcessor",
        "LogsArithmeticProcessor",
        "LogsStringBuilderProcessor",
        "LogsPipelineProcessor",
        "LogsGeoIPParser",
        "LogsLookupProcessor",
        "ReferenceTableLogsLookupProcessor",
        "LogsTraceRemapper",
        "LogsSpanRemapper",
    ],
    MonitorFormulaAndFunctionQueryDefinition: [
        "MonitorFormulaAndFunctionEventQueryDefinition",
        "MonitorFormulaAndFunctionCostQueryDefinition",
    ],
    NotebookCellCreateRequestAttributes: [
        "NotebookMarkdownCellAttributes",
        "NotebookTimeseriesCellAttributes",
        "NotebookToplistCellAttributes",
        "NotebookHeatMapCellAttributes",
        "NotebookDistributionCellAttributes",
        "NotebookLogStreamCellAttributes",
    ],
    NotebookCellResponseAttributes: [
        "NotebookMarkdownCellAttributes",
        "NotebookTimeseriesCellAttributes",
        "NotebookToplistCellAttributes",
        "NotebookHeatMapCellAttributes",
        "NotebookDistributionCellAttributes",
        "NotebookLogStreamCellAttributes",
    ],
    NotebookCellTime: ["NotebookRelativeTime", "NotebookAbsoluteTime"],
    NotebookCellUpdateRequestAttributes: [
        "NotebookMarkdownCellAttributes",
        "NotebookTimeseriesCellAttributes",
        "NotebookToplistCellAttributes",
        "NotebookHeatMapCellAttributes",
        "NotebookDistributionCellAttributes",
        "NotebookLogStreamCellAttributes",
    ],
    NotebookGlobalTime: ["NotebookRelativeTime", "NotebookAbsoluteTime"],
    NotebookUpdateCell: [
        "NotebookCellCreateRequest",
        "NotebookCellUpdateRequest",
    ],
    NumberFormatUnit: ["NumberFormatUnitCanonical", "NumberFormatUnitCustom"],
    SLODataSourceQueryDefinition: ["FormulaAndFunctionMetricQueryDefinition"],
    SLOSliSpec: ["SLOTimeSliceSpec"],
    SharedDashboardInvitesData: [
        "SharedDashboardInvitesDataObject",
        "Array<SharedDashboardInvitesDataObject>",
    ],
    SplitGraphSourceWidgetDefinition: [
        "ChangeWidgetDefinition",
        "GeomapWidgetDefinition",
        "QueryValueWidgetDefinition",
        "ScatterPlotWidgetDefinition",
        "SunburstWidgetDefinition",
        "TableWidgetDefinition",
        "TimeseriesWidgetDefinition",
        "ToplistWidgetDefinition",
        "TreeMapWidgetDefinition",
    ],
    SunburstWidgetLegend: [
        "SunburstWidgetLegendTable",
        "SunburstWidgetLegendInlineAutomatic",
    ],
    SyntheticsAPIStep: ["SyntheticsAPITestStep", "SyntheticsAPIWaitStep"],
    SyntheticsAssertion: [
        "SyntheticsAssertionTarget",
        "SyntheticsAssertionBodyHashTarget",
        "SyntheticsAssertionJSONPathTarget",
        "SyntheticsAssertionJSONSchemaTarget",
        "SyntheticsAssertionXPathTarget",
        "SyntheticsAssertionJavascript",
    ],
    SyntheticsBasicAuth: [
        "SyntheticsBasicAuthWeb",
        "SyntheticsBasicAuthSigv4",
        "SyntheticsBasicAuthNTLM",
        "SyntheticsBasicAuthDigest",
        "SyntheticsBasicAuthOauthClient",
        "SyntheticsBasicAuthOauthROP",
    ],
    SyntheticsMobileStepParamsValue: ["string", "number"],
    SyntheticsTestRequestPort: ["number", "string"],
    TableWidgetTextFormatReplace: [
        "TableWidgetTextFormatReplaceAll",
        "TableWidgetTextFormatReplaceSubstring",
    ],
    ToplistWidgetDisplay: ["ToplistWidgetStacked", "ToplistWidgetFlat"],
    WidgetDefinition: [
        "AlertGraphWidgetDefinition",
        "AlertValueWidgetDefinition",
        "ChangeWidgetDefinition",
        "CheckStatusWidgetDefinition",
        "DistributionWidgetDefinition",
        "EventStreamWidgetDefinition",
        "EventTimelineWidgetDefinition",
        "FreeTextWidgetDefinition",
        "FunnelWidgetDefinition",
        "GeomapWidgetDefinition",
        "GroupWidgetDefinition",
        "HeatMapWidgetDefinition",
        "HostMapWidgetDefinition",
        "IFrameWidgetDefinition",
        "ImageWidgetDefinition",
        "ListStreamWidgetDefinition",
        "LogStreamWidgetDefinition",
        "MonitorSummaryWidgetDefinition",
        "NoteWidgetDefinition",
        "PowerpackWidgetDefinition",
        "QueryValueWidgetDefinition",
        "RunWorkflowWidgetDefinition",
        "SLOListWidgetDefinition",
        "SLOWidgetDefinition",
        "ScatterPlotWidgetDefinition",
        "ServiceMapWidgetDefinition",
        "ServiceSummaryWidgetDefinition",
        "SplitGraphWidgetDefinition",
        "SunburstWidgetDefinition",
        "TableWidgetDefinition",
        "TimeseriesWidgetDefinition",
        "ToplistWidgetDefinition",
        "TopologyMapWidgetDefinition",
        "TreeMapWidgetDefinition",
    ],
    WidgetSortOrderBy: ["WidgetFormulaSort", "WidgetGroupSort"],
    WidgetTime: [
        "WidgetLegacyLiveSpan",
        "WidgetNewLiveSpan",
        "WidgetNewFixedSpan",
    ],
};
class ObjectSerializer {
    static serialize(data, type, format) {
        if (data == undefined || type == "any") {
            return data;
        }
        else if (data instanceof util_1.UnparsedObject) {
            return data._data;
        }
        else if (primitives.includes(type.toLowerCase()) &&
            typeof data == type.toLowerCase()) {
            return data;
        }
        else if (type.startsWith(ARRAY_PREFIX)) {
            if (!Array.isArray(data)) {
                throw new TypeError(`mismatch types '${data}' and '${type}'`);
            }
            // Array<Type> => Type
            const subType = type.substring(ARRAY_PREFIX.length, type.length - 1);
            const transformedData = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.serialize(element, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(TUPLE_PREFIX)) {
            // We only support homegeneus tuples
            const subType = type
                .substring(TUPLE_PREFIX.length, type.length - 1)
                .split(", ")[0];
            const transformedData = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.serialize(element, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(MAP_PREFIX)) {
            // { [key: string]: Type; } => Type
            const subType = type.substring(MAP_PREFIX.length, type.length - 3);
            const transformedData = {};
            for (const key in data) {
                transformedData[key] = ObjectSerializer.serialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            if ("string" == typeof data) {
                return data;
            }
            if (format == "date" || format == "date-time") {
                return (0, util_1.dateToRFC3339String)(data);
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap[type]) {
                if (enumsMap[type].includes(data)) {
                    return data;
                }
                throw new TypeError(`unknown enum value '${data}'`);
            }
            if (oneOfMap[type]) {
                const oneOfs = [];
                for (const oneOf of oneOfMap[type]) {
                    try {
                        oneOfs.push(ObjectSerializer.serialize(data, oneOf, format));
                    }
                    catch (e) {
                        logger_1.logger.debug(`could not serialize ${oneOf} (${e})`);
                    }
                }
                if (oneOfs.length > 1) {
                    throw new TypeError(`${data} matches multiple types from ${oneOfMap[type]} ${oneOfs}`);
                }
                if (oneOfs.length == 0) {
                    throw new TypeError(`${data} doesn't match any type from ${oneOfMap[type]} ${oneOfs}`);
                }
                return oneOfs[0];
            }
            if (!typeMap[type]) {
                // dont know the type
                throw new TypeError(`unknown type '${type}'`);
            }
            // get the map for the correct type.
            const attributesMap = typeMap[type].getAttributeTypeMap();
            const instance = {};
            for (const attributeName in data) {
                const attributeObj = attributesMap[attributeName];
                if (attributeName === "_unparsed" ||
                    attributeName === "additionalProperties") {
                    continue;
                }
                else if (attributeObj === undefined &&
                    !("additionalProperties" in attributesMap)) {
                    throw new Error("unexpected attribute " + attributeName + " of type " + type);
                }
                else if (attributeObj) {
                    instance[attributeObj.baseName] = ObjectSerializer.serialize(data[attributeName], attributeObj.type, attributeObj.format);
                }
            }
            if (data.additionalProperties) {
                const additionalPropertiesMap = attributesMap["additionalProperties"];
                if (additionalPropertiesMap) {
                    for (const key in data.additionalProperties) {
                        instance[key] = ObjectSerializer.serialize(data.additionalProperties[key], additionalPropertiesMap.type, additionalPropertiesMap.format);
                    }
                }
                else {
                    throw new Error(`additionalProperties found in ${type}`);
                }
            }
            // check for required properties
            for (const attributeName in attributesMap) {
                const attributeObj = attributesMap[attributeName];
                if ((attributeObj === null || attributeObj === void 0 ? void 0 : attributeObj.required) &&
                    instance[attributeObj.baseName] === undefined) {
                    throw new Error(`missing required property '${attributeObj.baseName}'`);
                }
            }
            return instance;
        }
    }
    static deserialize(data, type, format = "") {
        var _a;
        if (data == undefined || type == "any") {
            return data;
        }
        else if (primitives.includes(type.toLowerCase()) &&
            typeof data == type.toLowerCase()) {
            return data;
        }
        else if (type.startsWith(ARRAY_PREFIX)) {
            // Assert the passed data is Array type
            if (!Array.isArray(data)) {
                throw new TypeError(`mismatch types '${data}' and '${type}'`);
            }
            // Array<Type> => Type
            const subType = type.substring(ARRAY_PREFIX.length, type.length - 1);
            const transformedData = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.deserialize(element, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(TUPLE_PREFIX)) {
            // [Type,...] => Type
            const subType = type
                .substring(TUPLE_PREFIX.length, type.length - 1)
                .split(", ")[0];
            const transformedData = [];
            for (const element of data) {
                transformedData.push(ObjectSerializer.deserialize(element, subType, format));
            }
            return transformedData;
        }
        else if (type.startsWith(MAP_PREFIX)) {
            // { [key: string]: Type; } => Type
            const subType = type.substring(MAP_PREFIX.length, type.length - 3);
            const transformedData = {};
            for (const key in data) {
                transformedData[key] = ObjectSerializer.deserialize(data[key], subType, format);
            }
            return transformedData;
        }
        else if (type === "Date") {
            try {
                return (0, util_1.dateFromRFC3339String)(data);
            }
            catch (_b) {
                return new Date(data);
            }
        }
        else {
            if (enumsMap[type]) {
                if (enumsMap[type].includes(data)) {
                    return data;
                }
                return new util_1.UnparsedObject(data);
            }
            if (oneOfMap[type]) {
                const oneOfs = [];
                for (const oneOf of oneOfMap[type]) {
                    try {
                        const d = ObjectSerializer.deserialize(data, oneOf, format);
                        if (!(d === null || d === void 0 ? void 0 : d._unparsed)) {
                            oneOfs.push(d);
                        }
                    }
                    catch (e) {
                        logger_1.logger.debug(`could not deserialize ${oneOf} (${e})`);
                    }
                }
                if (oneOfs.length != 1) {
                    return new util_1.UnparsedObject(data);
                }
                return oneOfs[0];
            }
            if (!typeMap[type]) {
                // dont know the type
                throw new TypeError(`unknown type '${type}'`);
            }
            const instance = new typeMap[type]();
            const attributesMap = typeMap[type].getAttributeTypeMap();
            const attributesBaseNames = Object.keys(attributesMap).reduce((o, key) => Object.assign(o, { [attributesMap[key].baseName]: "" }), {});
            const extraAttributes = Object.keys(data).filter((key) => !Object.prototype.hasOwnProperty.call(attributesBaseNames, key));
            if (extraAttributes.length > 0) {
                if ("additionalProperties" in attributesMap) {
                    if (!instance.additionalProperties) {
                        instance.additionalProperties = {};
                    }
                    const attributeObj = attributesMap["additionalProperties"];
                    for (const key in extraAttributes) {
                        instance.additionalProperties[extraAttributes[key]] =
                            ObjectSerializer.deserialize(data[extraAttributes[key]], attributeObj.type, attributeObj.format);
                    }
                }
                else {
                    throw new Error(`found extra attributes '${extraAttributes}' in ${type}`);
                }
            }
            for (const attributeName in attributesMap) {
                const attributeObj = attributesMap[attributeName];
                if (attributeName === "additionalProperties") {
                    continue;
                }
                instance[attributeName] = ObjectSerializer.deserialize(data[attributeObj.baseName], attributeObj.type, attributeObj.format);
                // check for required properties
                if ((attributeObj === null || attributeObj === void 0 ? void 0 : attributeObj.required) && instance[attributeName] === undefined) {
                    throw new Error(`missing required property '${attributeName}'`);
                }
                if (instance[attributeName] instanceof util_1.UnparsedObject ||
                    ((_a = instance[attributeName]) === null || _a === void 0 ? void 0 : _a._unparsed)) {
                    instance._unparsed = true;
                }
                if (Array.isArray(instance[attributeName])) {
                    for (const d of instance[attributeName]) {
                        if (d instanceof util_1.UnparsedObject || (d === null || d === void 0 ? void 0 : d._unparsed)) {
                            instance._unparsed = true;
                            break;
                        }
                    }
                }
            }
            return instance;
        }
    }
    /**
     * Normalize media type
     *
     * We currently do not handle any media types attributes, i.e. anything
     * after a semicolon. All content is assumed to be UTF-8 compatible.
     */
    static normalizeMediaType(mediaType) {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }
    /**
     * From a list of possible media types, choose the one we can handle best.
     *
     * The order of the given media types does not have any impact on the choice
     * made.
     */
    static getPreferredMediaType(mediaTypes) {
        /** According to OAS 3 we should default to json */
        if (!mediaTypes) {
            return "application/json";
        }
        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        let selectedMediaType = undefined;
        let selectedRank = -Infinity;
        for (const mediaType of normalMediaTypes) {
            if (mediaType === undefined) {
                continue;
            }
            const supported = supportedMediaTypes[mediaType];
            if (supported !== undefined && supported > selectedRank) {
                selectedMediaType = mediaType;
                selectedRank = supported;
            }
        }
        if (selectedMediaType === undefined) {
            throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
        }
        return selectedMediaType;
    }
    /**
     * Convert data to a string according the given media type
     */
    static stringify(data, mediaType) {
        if (mediaType === "application/json" || mediaType === "text/json") {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " +
            mediaType +
            " is not supported by ObjectSerializer.stringify.");
    }
    /**
     * Parse data from a string according to the given media type
     */
    static parse(rawData, mediaType) {
        try {
            return JSON.parse(rawData);
        }
        catch (error) {
            logger_1.logger.debug(`could not parse ${mediaType}: ${error}`);
            return rawData;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map