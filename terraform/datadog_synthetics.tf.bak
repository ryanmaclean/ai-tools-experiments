# Datadog Synthetics Tests Terraform Configuration for AI Tools Lab
# This file manages all synthetic browser tests for the AI Tools Lab project

terraform {
  required_providers {
    datadog = {
      source  = "datadog/datadog"
      version = "~> 3.30.0"
    }
  }
}

provider "datadog" {
  api_key = var.datadog_api_key
  app_key = var.datadog_app_key
  api_url = "https://api.datadoghq.com/"
}

# Datadog provider configuration uses variables from variables.tf

locals {
  # Base URLs for different environments
  environments = {
    production = "https://ai-tools-lab.com"
    staging    = "https://ai-tools-lab-tst.netlify.app"
  }
  
  # Default test config
  default_test_config = {
    device_ids  = ["laptop_large"]
    frequency   = 300 # 5 minutes in seconds
    locations   = ["aws:us-west-1"]
    retry_count = 2
    retry_interval = 300 # 5 minutes in seconds
  }
  
  # Episode pages to monitor
  episode_pages = [
    "ep01", "ep02", "ep03", "ep04", "ep05", 
    "ep06", "ep07", "ep08", "ep09", "ep10",
    "ep11", "ep12", "ep13", "ep14", "ep15",
    "ep16", "ep17"
  ]
}

# Helper for determining the correct URL based on environment and route
locals {
  get_url = { for env_key, env_url in local.environments : env_key => {
    for route in concat(["home", "about", "resources", "observations"], local.episode_pages) :
      route => (
        # Home page is the base URL
        route == "home" ? env_url : (
          # Episodes in production use /pages/ prefix
          startswith(route, "ep") && env_key == "production" ? "${env_url}/pages/${route}" : (
            # Episodes in staging use direct path
            startswith(route, "ep") && env_key == "staging" ? "${env_url}/${route}" : (
              # Standard pages like about, resources in production use /pages/ prefix
              contains(["about", "resources", "observations"], route) && env_key == "production" ? "${env_url}/pages/${route}" : (
                # Standard pages in staging use direct path
                "${env_url}/${route}"
              )
            )
          )
        )
      )
    }
  }
}

# Homepage Test
resource "datadog_synthetics_test" "homepage" {
  name      = "Homepage Test"
  type      = "browser"
  subtype   = "http"
  status    = "live"
  message   = "The AI Tools Lab homepage is not responding correctly. Please investigate immediately."
  tags      = ["ai-tools-lab", "page:home", "terraform:true"]
  
  request_definition {
    method = "GET"
    url    = local.get_url["production"]["home"]
  }
  
  assertion {
    type     = "statusCode"
    operator = "is"
    target   = "200"
  }
  
  locations = local.default_test_config.locations
  device_ids = local.default_test_config.device_ids
  
  options_list {
    tick_every         = local.default_test_config.frequency
    min_failure_duration = 300
    min_location_failed  = 1
    retry {
      count    = local.default_test_config.retry_count
      interval = local.default_test_config.retry_interval
    }
  }
  
  browser_step {
    name = "Verify Homepage Content"
    type = "assertElementContent"
    params {
      element = "{\"selector\":\".episode-grid\"}"
      check = "contains"
      attribute = "textContent"
    }
  }
  
  browser_step {
    name = "Check Navigation"
    type = "assertElementPresent"
    params {
      element = "{\"selector\":\"nav\"}"
    }
  }
  
  browser_step {
    name = "Take Screenshot"
    type = "screenshot"
  }
}

# About Page Test
resource "datadog_synthetics_test" "about" {
  name      = "About Page Test"
  type      = "browser"
  subtype   = "http"
  status    = "live"
  message   = "The AI Tools Lab about page is not responding correctly. Please investigate immediately."
  tags      = ["ai-tools-lab", "page:about", "terraform:true"]
  
  request_definition {
    method = "GET"
    url    = local.get_url["production"]["about"]
  }
  
  assertion {
    type     = "statusCode"
    operator = "is"
    target   = "200"
  }
  
  locations = local.default_test_config.locations
  device_ids = local.default_test_config.device_ids
  
  options_list {
    tick_every         = local.default_test_config.frequency
    min_failure_duration = 300
    min_location_failed  = 1
    retry {
      count    = local.default_test_config.retry_count
      interval = local.default_test_config.retry_interval
    }
  }
  
  browser_step {
    name = "Verify About Content"
    type = "assertElementContent"
    params {
      element = "{\"selector\":\".about-content\"}"
      check = "contains"
      attribute = "textContent"
    }
  }
  
  browser_step {
    name = "Take Screenshot"
    type = "screenshot"
  }
}

# Resources Page Test
resource "datadog_synthetics_test" "resources" {
  name      = "Resources Page Test"
  type      = "browser"
  subtype   = "http"
  status    = "live"
  message   = "The AI Tools Lab resources page is not responding correctly. Please investigate immediately."
  tags      = ["ai-tools-lab", "page:resources", "terraform:true"]
  
  request_definition {
    method = "GET"
    url    = local.get_url["production"]["resources"]
  }
  
  assertion {
    type     = "statusCode"
    operator = "is"
    target   = "200"
  }
  
  locations = local.default_test_config.locations
  device_ids = local.default_test_config.device_ids
  
  options_list {
    tick_every         = local.default_test_config.frequency
    min_failure_duration = 300
    min_location_failed  = 1
    retry {
      count    = local.default_test_config.retry_count
      interval = local.default_test_config.retry_interval
    }
  }
  
  browser_step {
    name = "Verify Resource Cards"
    type = "assertElementPresent"
    params {
      element = "{\"selector\":\".resource-cards\"}"
    }
  }
  
  browser_step {
    name = "Check Resource Cards Count"
    type = "assertElementsCount"
    params {
      element = "{\"selector\":\".resource-card\"}"
      count = ">=10"
    }
  }
  
  browser_step {
    name = "Take Screenshot"
    type = "screenshot"
  }
}

# Observations Page Test
resource "datadog_synthetics_test" "observations" {
  name      = "Observations Page Test"
  type      = "browser"
  subtype   = "http"
  status    = "live"
  message   = "The AI Tools Lab observations page is not responding correctly. Please investigate immediately."
  tags      = ["ai-tools-lab", "page:observations", "terraform:true"]
  
  request_definition {
    method = "GET"
    url    = local.get_url["production"]["observations"]
  }
  
  assertion {
    type     = "statusCode"
    operator = "is"
    target   = "200"
  }
  
  locations = local.default_test_config.locations
  device_ids = local.default_test_config.device_ids
  
  options_list {
    tick_every         = local.default_test_config.frequency
    min_failure_duration = 300
    min_location_failed  = 1
    retry {
      count    = local.default_test_config.retry_count
      interval = local.default_test_config.retry_interval
    }
  }
  
  browser_step {
    name = "Verify Observations Content"
    type = "assertElementPresent"
    params {
      element = "{\"selector\":\".observations-content\"}"
    }
  }
  
  browser_step {
    name = "Take Screenshot"
    type = "screenshot"
  }
}

# Episode Pages Tests
resource "datadog_synthetics_test" "episode_pages" {
  for_each = toset(local.episode_pages)
  
  name      = "Episode Page Test - ${each.value}"
  type      = "browser"
  subtype   = "http"
  status    = "live"
  message   = "The AI Tools Lab episode page ${each.value} is not responding correctly. Please investigate immediately."
  tags      = ["ai-tools-lab", "page:episode", "episode:${each.value}", "terraform:true"]
  
  request_definition {
    method = "GET"
    url    = local.get_url["production"][each.value]
  }
  
  assertion {
    type     = "statusCode"
    operator = "is"
    target   = "200"
  }
  
  locations = local.default_test_config.locations
  device_ids = local.default_test_config.device_ids
  
  options_list {
    tick_every         = local.default_test_config.frequency
    min_failure_duration = 300
    min_location_failed  = 1
    retry {
      count    = local.default_test_config.retry_count
      interval = local.default_test_config.retry_interval
    }
  }
  
  browser_step {
    name = "Verify Episode Content"
    type = "assertElementPresent"
    params {
      element = "{\"selector\":\".episode-content\"}"
    }
  }
  
  browser_step {
    name = "Check Episode Navigation"
    type = "assertElementPresent"
    params {
      element = "{\"selector\":\".episode-navigation\"}"
    }
  }
  
  browser_step {
    name = "Take Screenshot"
    type = "screenshot"
  }
}

# Output test URLs for reference
output "test_urls" {
  value = {
    for page in concat(["home", "about", "resources", "observations"], local.episode_pages) :
      page => {
        production = local.get_url["production"][page]
        staging    = local.get_url["staging"][page]
      }
  }
  description = "URLs for all synthetic tests in both environments"
  sensitive   = false
}
