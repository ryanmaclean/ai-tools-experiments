#!/usr/bin/env node

/**
 * Terraform Datadog Synthetics Driver with Vitest Integration
 * 
 * This script drives Terraform to set up Datadog Synthetics tests and uses
 * Vitest for validation of the results. It integrates with Puppeteer
 * for visual validation as well.
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// ANSI colors for output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

// Get configuration
const TF_DIR = path.resolve(__dirname, '../terraform');
const DD_API_KEY = process.env.DD_API_KEY || process.env.TF_VAR_datadog_api_key;
const DD_APP_KEY = process.env.DD_APP_KEY || process.env.TF_VAR_datadog_app_key;
const TEST_PRODUCTION = process.env.TEST_PRODUCTION === 'true';

// Check if Terraform is installed
function checkTerraform() {
  try {
    const version = execSync('terraform --version', { stdio: 'pipe' }).toString();
    console.log(`${colors.green}✅ Terraform detected: ${colors.reset}${version.split('\n')[0]}`);
    return true;
  } catch (error) {
    console.error(`${colors.red}❌ Terraform not found! Please install Terraform first.${colors.reset}`);
    return false;
  }
}

// Create tfvars file with credentials
function createTfvars() {
  if (!DD_API_KEY || !DD_APP_KEY) {
    console.error(`${colors.red}❌ Datadog API credentials not found!${colors.reset}`);
    console.error(`Please ensure DD_API_KEY and DD_APP_KEY are set in your environment.`);
    return false;
  }
  
  const tfvarsContent = `
# Datadog API credentials
datadog_api_key = "${DD_API_KEY}"
datadog_app_key = "${DD_APP_KEY}"

# Testing environment
environment = "${TEST_PRODUCTION ? 'production' : 'test'}"

# Test frequency (5 minutes)
test_frequency = 300

# Notification emails
notification_emails = [
  "team@ai-tools-lab.com"
]
`;
  
  try {
    fs.writeFileSync(path.join(TF_DIR, 'terraform.tfvars'), tfvarsContent);
    console.log(`${colors.green}✅ Created terraform.tfvars with credentials${colors.reset}`);
    return true;
  } catch (error) {
    console.error(`${colors.red}❌ Failed to create tfvars file: ${error.message}${colors.reset}`);
    return false;
  }
}

// Initialize Terraform
function initTerraform() {
  console.log(`${colors.blue}${colors.bright}Initializing Terraform...${colors.reset}`);
  try {
    execSync('terraform init', { stdio: 'inherit', cwd: TF_DIR });
    console.log(`${colors.green}✅ Terraform initialized successfully${colors.reset}`);
    return true;
  } catch (error) {
    console.error(`${colors.red}❌ Terraform initialization failed: ${error.message}${colors.reset}`);
    return false;
  }
}

// Validate Terraform configuration
function validateTerraform() {
  console.log(`${colors.blue}${colors.bright}Validating Terraform configuration...${colors.reset}`);
  try {
    execSync('terraform validate', { stdio: 'inherit', cwd: TF_DIR });
    console.log(`${colors.green}✅ Terraform configuration is valid${colors.reset}`);
    return true;
  } catch (error) {
    console.error(`${colors.red}❌ Terraform validation failed: ${error.message}${colors.reset}`);
    return false;
  }
}

// Show Terraform plan
function planTerraform() {
  console.log(`${colors.blue}${colors.bright}Generating Terraform plan...${colors.reset}`);
  try {
    execSync('terraform plan -out=tfplan', { stdio: 'inherit', cwd: TF_DIR });
    console.log(`${colors.green}✅ Terraform plan generated successfully${colors.reset}`);
    return true;
  } catch (error) {
    console.error(`${colors.red}❌ Terraform plan failed: ${error.message}${colors.reset}`);
    return false;
  }
}

// Apply Terraform plan
function applyTerraform() {
  console.log(`${colors.blue}${colors.bright}Applying Terraform plan...${colors.reset}`);
  try {
    execSync('terraform apply tfplan', { stdio: 'inherit', cwd: TF_DIR });
    console.log(`${colors.green}✅ Terraform applied successfully${colors.reset}`);
    return true;
  } catch (error) {
    console.error(`${colors.red}❌ Terraform apply failed: ${error.message}${colors.reset}`);
    return false;
  }
}

// Generate Vitest validation code
function generateVitestFile() {
  const targetFile = path.resolve(__dirname, 'validate-synthetics.test.js');
  
  const vitestContent = `
/**
 * Datadog Synthetics Tests Validation
 * Generated by terraform-synthetics-vitest.js
 */
import { test, describe, expect, beforeAll } from 'vitest';
import puppeteer from 'puppeteer';
import dotenv from 'dotenv';
import { get } from 'https';

// Load environment variables
dotenv.config();

// Get Datadog API credentials
const DD_API_KEY = process.env.DD_API_KEY || process.env.TF_VAR_datadog_api_key;
const DD_APP_KEY = process.env.DD_APP_KEY || process.env.TF_VAR_datadog_app_key;

// Test URLs for both environments
const URLS = {
  production: {
    home: 'https://ai-tools-lab.com/',
    about: 'https://ai-tools-lab.com/pages/about',
    resources: 'https://ai-tools-lab.com/pages/resources',
    observations: 'https://ai-tools-lab.com/pages/observations',
    ep01: 'https://ai-tools-lab.com/pages/ep01',
    // Additional episodes can be added here
  },
  test: {
    home: 'https://ai-tools-lab-tst.netlify.app/',
    about: 'https://ai-tools-lab-tst.netlify.app/pages/about',
    resources: 'https://ai-tools-lab-tst.netlify.app/resources',
    observations: 'https://ai-tools-lab-tst.netlify.app/observations',
    ep01: 'https://ai-tools-lab-tst.netlify.app/pages/ep01',
    // Additional episodes can be added here
  }
};

// Helper to fetch Datadog Synthetics tests
async function fetchDatadogTests() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.datadoghq.com',
      path: '/api/v1/synthetics/tests',
      method: 'GET',
      headers: {
        'DD-API-KEY': DD_API_KEY,
        'DD-APPLICATION-KEY': DD_APP_KEY
      }
    };
    
    let data = '';
    const req = get(options, res => {
      res.on('data', chunk => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            const tests = JSON.parse(data);
            resolve(tests);
          } catch (error) {
            reject(new Error('Failed to parse Datadog response'));
          }
        } else {
          reject(new Error('Datadog API returned status ' + res.statusCode));
        }
      });
    });
    
    req.on('error', error => {
      reject(error);
    });
    
    req.end();
  });
}

let browser;
let page;

beforeAll(async () => {
  browser = await puppeteer.launch({
    headless: 'new',
    args: ['--no-sandbox']
  });
  page = await browser.newPage();
});

afterAll(async () => {
  await browser.close();
});

describe('Datadog Synthetics Tests Validation', () => {
  test('Datadog API should be accessible with provided credentials', async () => {
    const tests = await fetchDatadogTests();
    expect(tests).toBeDefined();
    expect(Array.isArray(tests)).toBe(true);
  });
  
  test('All expected Datadog synthetic tests should exist', async () => {
    const tests = await fetchDatadogTests();
    
    // Check for required tests
    const testNames = tests.map(test => test.name);
    expect(testNames).toContain('Homepage Test');
    expect(testNames).toContain('About Page Test');
    expect(testNames).toContain('Resources Page Test');
    expect(testNames).toContain('Observations Page Test');
    expect(testNames).toContain('Episode Page Test - ep01');
  });
  
  test('Tests should be in live status', async () => {
    const tests = await fetchDatadogTests();
    
    // At least 90% of tests should be live
    const liveTests = tests.filter(test => test.status === 'live');
    const livePercentage = (liveTests.length / tests.length) * 100;
    
    expect(livePercentage).toBeGreaterThanOrEqual(90);
  });
});

describe('Production URL Validation', () => {
  test('Homepage should be accessible and contain correct elements', async () => {
    await page.goto(URLS.production.home, { waitUntil: 'networkidle0' });
    const title = await page.title();
    expect(title).toContain('AI Tools Lab');
    
    const hasNavigation = await page.evaluate(() => {
      return !!document.querySelector('nav');
    });
    expect(hasNavigation).toBe(true);
  });
  
  test('About page should be accessible and contain correct elements', async () => {
    await page.goto(URLS.production.about, { waitUntil: 'networkidle0' });
    
    const hasContent = await page.evaluate(() => {
      return !!document.querySelector('.about-content');
    });
    expect(hasContent).toBe(true);
  });
  
  test('Resources page should be accessible and contain resource cards', async () => {
    await page.goto(URLS.production.resources, { waitUntil: 'networkidle0' });
    
    const cardCount = await page.evaluate(() => {
      return document.querySelectorAll('.resource-card').length;
    });
    expect(cardCount).toBeGreaterThanOrEqual(10);
  });
});

describe('Test Environment URL Validation', () => {
  test('Test homepage should be accessible and match production structure', async () => {
    await page.goto(URLS.test.home, { waitUntil: 'networkidle0' });
    const title = await page.title();
    expect(title).toContain('AI Tools Lab');
    
    const hasNavigation = await page.evaluate(() => {
      return !!document.querySelector('nav');
    });
    expect(hasNavigation).toBe(true);
  });
  
  test('Test resources page should have the same resource cards as production', async () => {
    // First check production
    await page.goto(URLS.production.resources, { waitUntil: 'networkidle0' });
    const prodCardCount = await page.evaluate(() => {
      return document.querySelectorAll('.resource-card').length;
    });
    
    // Then check test environment
    await page.goto(URLS.test.resources, { waitUntil: 'networkidle0' });
    const testCardCount = await page.evaluate(() => {
      return document.querySelectorAll('.resource-card').length;
    });
    
    expect(testCardCount).toBe(prodCardCount);
  });
});
`;
  
  try {
    fs.writeFileSync(targetFile, vitestContent);
    console.log(`${colors.green}✅ Generated Vitest validation file: ${colors.reset}${targetFile}`);
    return true;
  } catch (error) {
    console.error(`${colors.red}❌ Failed to create Vitest file: ${error.message}${colors.reset}`);
    return false;
  }
}

// Run Vitest validation
function runVitestValidation() {
  console.log(`${colors.blue}${colors.bright}Running Vitest validation...${colors.reset}`);
  try {
    execSync('npx vitest run tests/validate-synthetics.test.js', { stdio: 'inherit' });
    console.log(`${colors.green}✅ Vitest validation completed successfully${colors.reset}`);
    return true;
  } catch (error) {
    console.error(`${colors.red}❌ Vitest validation failed: ${error.message}${colors.reset}`);
    return false;
  }
}

// Main function
async function main() {
  console.log(`${colors.blue}${colors.bright}TERRAFORM DATADOG SYNTHETICS SETUP${colors.reset}`);
  console.log(`${colors.blue}======================================${colors.reset}\n`);
  
  console.log(`Environment: ${TEST_PRODUCTION ? colors.yellow + 'PRODUCTION' : colors.green + 'TEST'}${colors.reset}`);
  
  // Check prerequisites
  if (!checkTerraform()) {
    process.exit(1);
  }
  
  // Create tfvars
  if (!createTfvars()) {
    process.exit(1);
  }
  
  // Initialize and validate Terraform
  if (!initTerraform() || !validateTerraform()) {
    process.exit(1);
  }
  
  // Generate and apply Terraform plan
  if (!planTerraform() || !applyTerraform()) {
    process.exit(1);
  }
  
  // Generate and run Vitest validation
  if (!generateVitestFile() || !runVitestValidation()) {
    process.exit(1);
  }
  
  console.log(`\n${colors.green}${colors.bright}SUCCESS! Datadog Synthetics tests have been deployed and validated!${colors.reset}`);
}

// Run the main function
main().catch(error => {
  console.error(`${colors.red}${colors.bright}ERROR: ${error.message}${colors.reset}`);
  process.exit(1);
});
