services:
  # Testing service for running sequential web tests
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      # Using Node official image for better compatibility
      args:
        - NODE_ENV=test
    volumes:
      - ./:/app
      - /app/node_modules
      - ./scripts:/app/scripts
      # Use anonymous volume to protect node_modules from being overridden by host
    environment:
      - NODE_ENV=test
      - DEBUG=false
      # Proper networking configuration for Docker (uses Docker's internal hostname)
      - TEST_URL=http://dev:4321
      # Address potential 404 warnings in the tests rather than suppressing them
      - HANDLE_404_WARNINGS=true
    depends_on:
      - dev
    networks:
      - ai-tools-network
    # Don't start automatically
    profiles: [test]
    # Expose DD API key when provided
    env_file:
      - .env.local
    # Use entrypoint script to fix Rollup ARM64 module issue before starting tests
    entrypoint: ["./scripts/docker-entrypoint.sh"]
    # Add Datadog labels for container monitoring
    labels:
      com.datadoghq.ad.logs: '[{"source":"nodejs", "service":"ai-tools-test"}]'
      com.datadoghq.tags.service: 'ai-tools-test'
      com.datadoghq.tags.env: 'test'
      com.datadoghq.tags.issue: 'rollup-arm64-fix'

  # Development service with hot-reloading
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      # Using Node official image for better compatibility
      # This ensures proper support for Puppeteer and canvas dependencies
      args:
        - NODE_ENV=development
    ports:
      - "4321-4325:4321-4325"  # Expose multiple ports for Astro's automatic port shifting
    volumes:
      # Mount everything needed for development with hot-reloading
      - ./:/app
      - /app/node_modules
      - ./scripts:/app/scripts
      # Use anonymous volume to protect node_modules from being overridden by host
    environment:
      - NODE_ENV=development
      # Address potential 404 warnings in the tests rather than suppressing them
      - HANDLE_404_WARNINGS=true
    restart: unless-stopped
    networks:
      - ai-tools-network
    # Show log output in console
    tty: true
    stdin_open: true
    # Use entrypoint script to fix Rollup ARM64 module issue before starting dev server
    entrypoint: ["./scripts/docker-entrypoint.sh"]
    command: ["sh", "-c", "cd /app && npm run dev -- --host 0.0.0.0"]
    # Add Datadog labels for container monitoring
    labels:
      com.datadoghq.ad.logs: '[{"source":"nodejs", "service":"ai-tools-dev"}]'
      com.datadoghq.tags.service: 'ai-tools-dev'
      com.datadoghq.tags.env: 'development'
      com.datadoghq.tags.issue: 'rollup-arm64-fix'

  # Production service using multi-stage optimized build (matches Netlify production)
  prod:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - DD_API_KEY=${DD_API_KEY:-}
    ports:
      - "4321:4321"
    # No volumes needed - uses built artifacts from multi-stage build
    environment:
      - NODE_ENV=production
      - PORT=4321
      # Netlify-specific environment variables
      - NETLIFY=true
      - CONTEXT=production
    restart: unless-stopped
    networks:
      - ai-tools-network
    # Entrypoint is set in Dockerfile
    # Add Datadog labels for container monitoring
    labels:
      com.datadoghq.ad.logs: '[{"source":"nodejs", "service":"ai-tools-prod"}]'
      com.datadoghq.tags.service: 'ai-tools-prod'
      com.datadoghq.tags.env: 'production'
      com.datadoghq.tags.version: '${VERSION:-1.0.0}'
      com.datadoghq.tags.issue: 'rollup-arm64-fix'
    env_file:
      - .env.local

  # Datadog Agent for monitoring all Docker containers
  datadog-agent:
    image: datadog/agent:latest
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE=name:datadog-agent
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_SITE=datadoghq.com
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /opt/datadog-agent/run:/opt/datadog-agent/run:rw
    networks:
      - ai-tools-network
    restart: unless-stopped
    env_file:
      - .env.local

networks:
  ai-tools-network:
    driver: bridge
